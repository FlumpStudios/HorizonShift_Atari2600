------- FILE E:\Dev\test\default.bas.asm LEVEL 1 PASS 3
      1  2ffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; VCS.H
      2  3000 ????						; Version 1.05, 13/November/2003
      3  3000 ????
      4  3000 ????	       00 69	   VERSION_VCS =	105
      5  3000 ????
      6  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  3000 ????						;
     10  3000 ????						; This file defines hardware registers and memory mapping for the
     11  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  3000 ????						; available at at http://www.atari2600.org/dasm
     14  3000 ????						;
     15  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  3000 ????						; with your views.  Please contribute, if you think you can improve this
     19  3000 ????						; file!
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify VCS.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  3000 ????						;			 readability issue, and binary compatibility with disassembled
     30  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  3000 ????						;			 which was broken by the use of segments in this file, as
     33  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  3000 ????						;						   it is safe to leave it undefined, and the base address will
     38  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  3000 ????						;			  - register definitions are now generated through assignment
     41  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  3000 ????						;			    address architecture.
     43  3000 ????						; 1.0	22/MAR/2003		Initial release
     44  3000 ????
     45  3000 ????
     46  3000 ????						;-------------------------------------------------------------------------------
     47  3000 ????
     48  3000 ????						; TIA_BASE_ADDRESS
     49  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  3000 ????						; Normally 0, the base address should (externally, before including this file)
     51  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  3000 ????						; < $40 as a bankswitch.
     54  3000 ????
     55  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  3000 ????			  -TIA_BASE_ADDRESS =	0
     57  3000 ????				      ENDIF
     58  3000 ????
     59  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  3000 ????						; *OR* by declaring the label before including this file, eg:
     62  3000 ????						; TIA_BASE_ADDRESS = $40
     63  3000 ????						;   include "vcs.h"
     64  3000 ????
     65  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  3000 ????						; for the mirrored ROM hardware registers.
     68  3000 ????
     69  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  3000 ????
     73  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  3000 ????				      ENDIF
     76  3000 ????
     77  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  3000 ????				      ENDIF
     80  3000 ????
     81  3000 ????						;-------------------------------------------------------------------------------
     82  3000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  3000 ????				      SEG
    199  3000 ????
    200  3000 ????						; EOF
------- FILE E:\Dev\test\default.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; MACRO.H
      2  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  3000 ????
      4  3000 ????	       00 69	   VERSION_MACRO =	105
      5  3000 ????
      6  3000 ????						;
      7  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  3000 ????						;
     10  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  3000 ????						; It is distributed as a companion machine-specific support package
     12  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  3000 ????						; available at at http://www.atari2600.org/dasm
     14  3000 ????						;
     15  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  3000 ????						; contents, or would like to add something, please write to me
     17  3000 ????						; (atari2600@taswegian.com) with your contribution.
     18  3000 ????						;
     19  3000 ????						; Latest Revisions...
     20  3000 ????						;
     21  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  3000 ????						;			    used for code assembly.
     24  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  3000 ????						;
     26  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  3000 ????						;
     28  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  3000 ????						;			   (standardised macro for vertical synch code)
     30  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  3000 ????						; 1.0	22/MAR/2003		Initial release
     33  3000 ????
     34  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  3000 ????						;   registers and require them to be defined first).
     39  3000 ????
     40  3000 ????						; Available macros...
     41  3000 ????						;   SLEEP n		 - sleep for n cycles
     42  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  3000 ????
     46  3000 ????						;-------------------------------------------------------------------------------
     47  3000 ????						; SLEEP duration
     48  3000 ????						; Original author: Thomas Jentzsch
     49  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  3000 ????						; useful for code where precise timing is required.
     51  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  3000 ????
     55  3000 ????				      MAC	sleep
     56  3000 ????			   .CYCLES    SET	{1}
     57  3000 ????
     58  3000 ????				      IF	.CYCLES < 2
     59  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  3000 ????				      ERR
     61  3000 ????				      ENDIF
     62  3000 ????
     63  3000 ????				      IF	.CYCLES & 1
     64  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     65  3000 ????				      nop	0
     66  3000 ????				      ELSE
     67  3000 ????				      bit	VSYNC
     68  3000 ????				      ENDIF
     69  3000 ????			   .CYCLES    SET	.CYCLES - 3
     70  3000 ????				      ENDIF
     71  3000 ????
     72  3000 ????				      REPEAT	.CYCLES / 2
     73  3000 ????				      nop
     74  3000 ????				      REPEND
     75  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     76  3000 ????
     77  3000 ????						;-------------------------------------------------------------------------------
     78  3000 ????						; VERTICAL_SYNC
     79  3000 ????						; Original author: Manuel Polik
     80  3000 ????						; Inserts the code required for a proper 3 scannline 
     81  3000 ????						; vertical sync sequence
     82  3000 ????						;
     83  3000 ????						; Note: Alters the accumulator
     84  3000 ????						;
     85  3000 ????						; IN:
     86  3000 ????						; OUT: A = 1
     87  3000 ????
     88  3000 ????				      MAC	vertical_sync
     89  3000 ????				      LDA	#$02	; A = VSYNC enable
     90  3000 ????				      STA	WSYNC	; Finish current line
     91  3000 ????				      STA	VSYNC	; Start vertical sync
     92  3000 ????				      STA	WSYNC	; 1st line vertical sync
     93  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     94  3000 ????				      LSR		; A = VSYNC disable
     95  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     96  3000 ????				      STA	VSYNC	; Stop vertical sync
     97  3000 ????				      ENDM
     98  3000 ????
     99  3000 ????						;-------------------------------------------------------------------------------
    100  3000 ????						; CLEAN_START
    101  3000 ????						; Original author: Andrew Davie
    102  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  3000 ????						; Use as very first section of code on boot (ie: at reset)
    106  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  3000 ????
    108  3000 ????				      MAC	clean_start
    109  3000 ????				      sei
    110  3000 ????				      cld
    111  3000 ????
    112  3000 ????				      ldx	#0
    113  3000 ????				      txa
    114  3000 ????				      tay
    115  3000 ????			   .CLEAR_STACK dex
    116  3000 ????				      txs
    117  3000 ????				      pha
    118  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  3000 ????
    120  3000 ????				      ENDM
    121  3000 ????
    122  3000 ????						;-------------------------------------------------------
    123  3000 ????						; SET_POINTER
    124  3000 ????						; Original author: Manuel Rotschkar
    125  3000 ????						;
    126  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  3000 ????						;
    128  3000 ????						; Usage: SET_POINTER pointer, address
    129  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  3000 ????						;
    131  3000 ????						; Note: Alters the accumulator, NZ flags
    132  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  3000 ????						; IN 2: absolute address
    134  3000 ????
    135  3000 ????				      MAC	set_pointer
    136  3000 ????			   .POINTER   SET	{1}
    137  3000 ????			   .ADDRESS   SET	{2}
    138  3000 ????
    139  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  3000 ????				      STA	.POINTER	; Store in pointer
    141  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    142  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    143  3000 ????
    144  3000 ????				      ENDM
    145  3000 ????
    146  3000 ????						; EOF
------- FILE E:\Dev\test\default.bas.asm
------- FILE multisprite.h LEVEL 2 PASS 3
      0  3000 ????				      include	"multisprite.h"
      1  3000 ????	       00 80	   missile0x  =	$80
      2  3000 ????	       00 81	   missile1x  =	$81
      3  3000 ????	       00 82	   ballx      =	$82
      4  3000 ????
      5  3000 ????						; multisprite stuff below - 5 bytes each starting with spritex
      6  3000 ????
      7  3000 ????	       00 83	   SpriteIndex =	$83
      8  3000 ????
      9  3000 ????	       00 84	   player0x   =	$84
     10  3000 ????	       00 85	   NewSpriteX =	$85	;		X position
     11  3000 ????	       00 85	   player1x   =	$85
     12  3000 ????	       00 86	   player2x   =	$86
     13  3000 ????	       00 87	   player3x   =	$87
     14  3000 ????	       00 88	   player4x   =	$88
     15  3000 ????	       00 89	   player5x   =	$89
     16  3000 ????
     17  3000 ????	       00 8a	   objecty    =	$8A
     18  3000 ????	       00 8a	   missile0y  =	$8A
     19  3000 ????	       00 8b	   missile1y  =	$8B
     20  3000 ????	       00 8c	   bally      =	$8C
     21  3000 ????
     22  3000 ????	       00 8d	   player0y   =	$8D
     23  3000 ????	       00 8e	   NewSpriteY =	$8E	;		Y position
     24  3000 ????	       00 8e	   player1y   =	$8E
     25  3000 ????	       00 8f	   player2y   =	$8F
     26  3000 ????	       00 90	   player3y   =	$90
     27  3000 ????	       00 91	   player4y   =	$91
     28  3000 ????	       00 92	   player5y   =	$92
     29  3000 ????
     30  3000 ????	       00 93	   NewNUSIZ   =	$93
     31  3000 ????	       00 93	   _NUSIZ1    =	$93
     32  3000 ????	       00 94	   NUSIZ2     =	$94
     33  3000 ????	       00 95	   NUSIZ3     =	$95
     34  3000 ????	       00 96	   NUSIZ4     =	$96
     35  3000 ????	       00 97	   NUSIZ5     =	$97
     36  3000 ????
     37  3000 ????	       00 98	   NewCOLUP1  =	$98
     38  3000 ????	       00 98	   _COLUP1    =	$98
     39  3000 ????	       00 99	   COLUP2     =	$99
     40  3000 ????	       00 9a	   COLUP3     =	$9A
     41  3000 ????	       00 9b	   COLUP4     =	$9B
     42  3000 ????	       00 9c	   COLUP5     =	$9C
     43  3000 ????
     44  3000 ????	       00 9d	   SpriteGfxIndex =	$9D
     45  3000 ????
     46  3000 ????	       00 a2	   player0pointer =	$A2
     47  3000 ????	       00 a2	   player0pointerlo =	$A2
     48  3000 ????	       00 a3	   player0pointerhi =	$A3
     49  3000 ????
     50  3000 ????						;P0Top = temp5
     51  3000 ????	       00 cf	   P0Top      =	$CF	; changed to hard value to avoid dasm issues
     52  3000 ????	       00 a4	   P0Bottom   =	$A4
     53  3000 ????	       00 a5	   P1Bottom   =	$A5
     54  3000 ????
     55  3000 ????	       00 a6	   player1pointerlo =	$A6
     56  3000 ????	       00 a7	   player2pointerlo =	$A7
     57  3000 ????	       00 a8	   player3pointerlo =	$A8
     58  3000 ????	       00 a9	   player4pointerlo =	$A9
     59  3000 ????	       00 aa	   player5pointerlo =	$AA
     60  3000 ????
     61  3000 ????	       00 ab	   player1pointerhi =	$AB
     62  3000 ????	       00 ac	   player2pointerhi =	$AC
     63  3000 ????	       00 ad	   player3pointerhi =	$AD
     64  3000 ????	       00 ae	   player4pointerhi =	$AE
     65  3000 ????	       00 af	   player5pointerhi =	$AF
     66  3000 ????
     67  3000 ????	       00 b0	   player0height =	$B0
     68  3000 ????	       00 b1	   spriteheight =	$B1	; heights of multiplexed player sprite
     69  3000 ????	       00 b1	   player1height =	$B1
     70  3000 ????	       00 b2	   player2height =	$B2
     71  3000 ????	       00 b3	   player3height =	$B3
     72  3000 ????	       00 b4	   player4height =	$B4
     73  3000 ????	       00 b5	   player5height =	$B5
     74  3000 ????
     75  3000 ????	       00 b6	   PF1temp1   =	$B6
     76  3000 ????	       00 b7	   PF1temp2   =	$B7
     77  3000 ????	       00 b8	   PF2temp1   =	$B8
     78  3000 ????	       00 b9	   PF2temp2   =	$B9
     79  3000 ????
     80  3000 ????	       00 ba	   pfpixelheight =	$BA
     81  3000 ????
     82  3000 ????						; playfield is now a pointer to graphics
     83  3000 ????	       00 bb	   playfield  =	$BB
     84  3000 ????	       00 bb	   PF1pointer =	$BB
     85  3000 ????
     86  3000 ????	       00 bd	   PF2pointer =	$BD
     87  3000 ????
     88  3000 ????	       00 bf	   statusbarlength =	$BF
     89  3000 ????	       00 bf	   aux3       =	$BF
     90  3000 ????
     91  3000 ????	       00 c0	   lifecolor  =	$C0
     92  3000 ????	       00 c0	   pfscorecolor =	$C0
     93  3000 ????	       00 c0	   aux4       =	$C0
     94  3000 ????
     95  3000 ????						;P1display = temp2 ; temp2 and temp3
     96  3000 ????	       00 cc	   P1display  =	$cc	; changed to hard value to avoid dasm issues
     97  3000 ????	       00 c1	   lifepointer =	$c1
     98  3000 ????	       00 c2	   lives      =	$c2
     99  3000 ????	       00 c1	   pfscore1   =	$c1
    100  3000 ????	       00 c2	   pfscore2   =	$c2
    101  3000 ????	       00 c1	   aux5       =	$c1
    102  3000 ????	       00 c2	   aux6       =	$c2
    103  3000 ????
    104  3000 ????	       00 c3	   playfieldpos =	$C3
    105  3000 ????
    106  3000 ????						;RepoLine = temp4
    107  3000 ????	       00 ce	   RepoLine   =	$ce	; changed to hard value to avoid dasm issues
    108  3000 ????
    109  3000 ????	       00 c4	   pfheight   =	$C4
    110  3000 ????	       00 c5	   scorepointers =	$C5
    111  3000 ????
    112  3000 ????	       00 cb	   temp1      =	$CB	;used by kernel.  can be used in program too, but
    113  3000 ????	       00 cc	   temp2      =	$CC	;are obliterated when drawscreen is called.
    114  3000 ????	       00 cd	   temp3      =	$CD
    115  3000 ????	       00 ce	   temp4      =	$CE
    116  3000 ????	       00 cf	   temp5      =	$CF
    117  3000 ????	       00 d0	   temp6      =	$D0
    118  3000 ????	       00 d1	   temp7      =	$D1	; This is used to aid in bankswitching
    119  3000 ????
    120  3000 ????	       00 d2	   score      =	$D2
    121  3000 ????	       00 d5	   scorecolor =	$D5	;need to find other places for these, possibly...
    122  3000 ????	       00 d6	   rand       =	$D6
    123  3000 ????
    124  3000 ????
    125  3000 ????
    126  3000 ????	       00 d7	   A	      =	$d7
    127  3000 ????	       00 d7	   a	      =	$d7
    128  3000 ????	       00 d8	   B	      =	$d8
    129  3000 ????	       00 d8	   b	      =	$d8
    130  3000 ????	       00 d9	   C	      =	$d9
    131  3000 ????	       00 d9	   c	      =	$d9
    132  3000 ????	       00 da	   D	      =	$da
    133  3000 ????	       00 da	   d	      =	$da
    134  3000 ????	       00 db	   E	      =	$db
    135  3000 ????	       00 db	   e	      =	$db
    136  3000 ????	       00 dc	   F	      =	$dc
    137  3000 ????	       00 dc	   f	      =	$dc
    138  3000 ????	       00 dd	   G	      =	$dd
    139  3000 ????	       00 dd	   g	      =	$dd
    140  3000 ????	       00 de	   H	      =	$de
    141  3000 ????	       00 de	   h	      =	$de
    142  3000 ????	       00 df	   I	      =	$df
    143  3000 ????	       00 df	   i	      =	$df
    144  3000 ????	       00 e0	   J	      =	$e0
    145  3000 ????	       00 e0	   j	      =	$e0
    146  3000 ????	       00 e1	   K	      =	$e1
    147  3000 ????	       00 e1	   k	      =	$e1
    148  3000 ????	       00 e2	   L	      =	$e2
    149  3000 ????	       00 e2	   l	      =	$e2
    150  3000 ????	       00 e3	   M	      =	$e3
    151  3000 ????	       00 e3	   m	      =	$e3
    152  3000 ????	       00 e4	   N	      =	$e4
    153  3000 ????	       00 e4	   n	      =	$e4
    154  3000 ????	       00 e5	   O	      =	$e5
    155  3000 ????	       00 e5	   o	      =	$e5
    156  3000 ????	       00 e6	   P	      =	$e6
    157  3000 ????	       00 e6	   p	      =	$e6
    158  3000 ????	       00 e7	   Q	      =	$e7
    159  3000 ????	       00 e7	   q	      =	$e7
    160  3000 ????	       00 e8	   R	      =	$e8
    161  3000 ????	       00 e8	   r	      =	$e8
    162  3000 ????	       00 e9	   S	      =	$e9
    163  3000 ????	       00 e9	   s	      =	$e9
    164  3000 ????	       00 ea	   T	      =	$ea
    165  3000 ????	       00 ea	   t	      =	$ea
    166  3000 ????	       00 eb	   U	      =	$eb
    167  3000 ????	       00 eb	   u	      =	$eb
    168  3000 ????	       00 ec	   V	      =	$ec
    169  3000 ????	       00 ec	   v	      =	$ec
    170  3000 ????	       00 ed	   W	      =	$ed
    171  3000 ????	       00 ed	   w	      =	$ed
    172  3000 ????	       00 ee	   X	      =	$ee
    173  3000 ????	       00 ee	   x	      =	$ee
    174  3000 ????	       00 ef	   Y	      =	$ef
    175  3000 ????	       00 ef	   y	      =	$ef
    176  3000 ????	       00 f0	   Z	      =	$f0
    177  3000 ????	       00 f0	   z	      =	$f0
    178  3000 ????
    179  3000 ????	       00 f1	   spritesort =	$f1	; helps with flickersort
    180  3000 ????	       00 f2	   spritesort2 =	$f2	; helps with flickersort
    181  3000 ????	       00 f3	   spritesort3 =	$f3
    182  3000 ????	       00 f4	   spritesort4 =	$f4
    183  3000 ????	       00 f5	   spritesort5 =	$f5
    184  3000 ????
    185  3000 ????	       00 f6	   stack1     =	$f6
    186  3000 ????	       00 f7	   stack2     =	$f7
    187  3000 ????	       00 f8	   stack3     =	$f8
    188  3000 ????	       00 f9	   stack4     =	$f9
    189  3000 ????						; the stack bytes above may be used in the kernel
    190  3000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    191  3000 ????
    192  3000 ????				      MAC	return
    193  3000 ????				      ifnconst	bankswitch
    194  3000 ????				      rts
    195  3000 ????				      else
    196  3000 ????				      jmp	BS_return
    197  3000 ????				      endif
    198  3000 ????				      ENDM		; auto-return from either a regular or bankswitched module
------- FILE E:\Dev\test\default.bas.asm
------- FILE superchip.h LEVEL 2 PASS 3
      0  3000 ????				      include	"superchip.h"
      1  3000 ????	       f0 00	   write_RAM  =	$F000
      2  3000 ????	       f0 00	   wRAM       =	$F000
      3  3000 ????	       f0 00	   w000       =	$F000
      4  3000 ????	       f0 01	   w001       =	$F001
      5  3000 ????	       f0 02	   w002       =	$F002
      6  3000 ????	       f0 03	   w003       =	$F003
      7  3000 ????	       f0 04	   w004       =	$F004
      8  3000 ????	       f0 05	   w005       =	$F005
      9  3000 ????	       f0 06	   w006       =	$F006
     10  3000 ????	       f0 07	   w007       =	$F007
     11  3000 ????	       f0 08	   w008       =	$F008
     12  3000 ????	       f0 09	   w009       =	$F009
     13  3000 ????	       f0 0a	   w010       =	$F00A
     14  3000 ????	       f0 0b	   w011       =	$F00B
     15  3000 ????	       f0 0c	   w012       =	$F00C
     16  3000 ????	       f0 0d	   w013       =	$F00D
     17  3000 ????	       f0 0e	   w014       =	$F00E
     18  3000 ????	       f0 0f	   w015       =	$F00F
     19  3000 ????	       f0 10	   w016       =	$F010
     20  3000 ????	       f0 11	   w017       =	$F011
     21  3000 ????	       f0 12	   w018       =	$F012
     22  3000 ????	       f0 13	   w019       =	$F013
     23  3000 ????	       f0 14	   w020       =	$F014
     24  3000 ????	       f0 15	   w021       =	$F015
     25  3000 ????	       f0 16	   w022       =	$F016
     26  3000 ????	       f0 17	   w023       =	$F017
     27  3000 ????	       f0 18	   w024       =	$F018
     28  3000 ????	       f0 19	   w025       =	$F019
     29  3000 ????	       f0 1a	   w026       =	$F01A
     30  3000 ????	       f0 1b	   w027       =	$F01B
     31  3000 ????	       f0 1c	   w028       =	$F01C
     32  3000 ????	       f0 1d	   w029       =	$F01D
     33  3000 ????	       f0 1e	   w030       =	$F01E
     34  3000 ????	       f0 1f	   w031       =	$F01F
     35  3000 ????	       f0 20	   w032       =	$F020
     36  3000 ????	       f0 21	   w033       =	$F021
     37  3000 ????	       f0 22	   w034       =	$F022
     38  3000 ????	       f0 23	   w035       =	$F023
     39  3000 ????	       f0 24	   w036       =	$F024
     40  3000 ????	       f0 25	   w037       =	$F025
     41  3000 ????	       f0 26	   w038       =	$F026
     42  3000 ????	       f0 27	   w039       =	$F027
     43  3000 ????	       f0 28	   w040       =	$F028
     44  3000 ????	       f0 29	   w041       =	$F029
     45  3000 ????	       f0 2a	   w042       =	$F02A
     46  3000 ????	       f0 2b	   w043       =	$F02B
     47  3000 ????	       f0 2c	   w044       =	$F02C
     48  3000 ????	       f0 2d	   w045       =	$F02D
     49  3000 ????	       f0 2e	   w046       =	$F02E
     50  3000 ????	       f0 2f	   w047       =	$F02F
     51  3000 ????	       f0 30	   w048       =	$F030
     52  3000 ????	       f0 31	   w049       =	$F031
     53  3000 ????	       f0 32	   w050       =	$F032
     54  3000 ????	       f0 33	   w051       =	$F033
     55  3000 ????	       f0 34	   w052       =	$F034
     56  3000 ????	       f0 35	   w053       =	$F035
     57  3000 ????	       f0 36	   w054       =	$F036
     58  3000 ????	       f0 37	   w055       =	$F037
     59  3000 ????	       f0 38	   w056       =	$F038
     60  3000 ????	       f0 39	   w057       =	$F039
     61  3000 ????	       f0 3a	   w058       =	$F03A
     62  3000 ????	       f0 3b	   w059       =	$F03B
     63  3000 ????	       f0 3c	   w060       =	$F03C
     64  3000 ????	       f0 3d	   w061       =	$F03D
     65  3000 ????	       f0 3e	   w062       =	$F03E
     66  3000 ????	       f0 3f	   w063       =	$F03F
     67  3000 ????	       f0 40	   w064       =	$F040
     68  3000 ????	       f0 41	   w065       =	$F041
     69  3000 ????	       f0 42	   w066       =	$F042
     70  3000 ????	       f0 43	   w067       =	$F043
     71  3000 ????	       f0 44	   w068       =	$F044
     72  3000 ????	       f0 45	   w069       =	$F045
     73  3000 ????	       f0 46	   w070       =	$F046
     74  3000 ????	       f0 47	   w071       =	$F047
     75  3000 ????	       f0 48	   w072       =	$F048
     76  3000 ????	       f0 49	   w073       =	$F049
     77  3000 ????	       f0 4a	   w074       =	$F04A
     78  3000 ????	       f0 4b	   w075       =	$F04B
     79  3000 ????	       f0 4c	   w076       =	$F04C
     80  3000 ????	       f0 4d	   w077       =	$F04D
     81  3000 ????	       f0 4e	   w078       =	$F04E
     82  3000 ????	       f0 4f	   w079       =	$F04F
     83  3000 ????	       f0 50	   w080       =	$F050
     84  3000 ????	       f0 51	   w081       =	$F051
     85  3000 ????	       f0 52	   w082       =	$F052
     86  3000 ????	       f0 53	   w083       =	$F053
     87  3000 ????	       f0 54	   w084       =	$F054
     88  3000 ????	       f0 55	   w085       =	$F055
     89  3000 ????	       f0 56	   w086       =	$F056
     90  3000 ????	       f0 57	   w087       =	$F057
     91  3000 ????	       f0 58	   w088       =	$F058
     92  3000 ????	       f0 59	   w089       =	$F059
     93  3000 ????	       f0 5a	   w090       =	$F05A
     94  3000 ????	       f0 5b	   w091       =	$F05B
     95  3000 ????	       f0 5c	   w092       =	$F05C
     96  3000 ????	       f0 5d	   w093       =	$F05D
     97  3000 ????	       f0 5e	   w094       =	$F05E
     98  3000 ????	       f0 5f	   w095       =	$F05F
     99  3000 ????	       f0 60	   w096       =	$F060
    100  3000 ????	       f0 61	   w097       =	$F061
    101  3000 ????	       f0 62	   w098       =	$F062
    102  3000 ????	       f0 63	   w099       =	$F063
    103  3000 ????	       f0 64	   w100       =	$F064
    104  3000 ????	       f0 65	   w101       =	$F065
    105  3000 ????	       f0 66	   w102       =	$F066
    106  3000 ????	       f0 67	   w103       =	$F067
    107  3000 ????	       f0 68	   w104       =	$F068
    108  3000 ????	       f0 69	   w105       =	$F069
    109  3000 ????	       f0 6a	   w106       =	$F06A
    110  3000 ????	       f0 6b	   w107       =	$F06B
    111  3000 ????	       f0 6c	   w108       =	$F06C
    112  3000 ????	       f0 6d	   w109       =	$F06D
    113  3000 ????	       f0 6e	   w110       =	$F06E
    114  3000 ????	       f0 6f	   w111       =	$F06F
    115  3000 ????	       f0 70	   w112       =	$F070
    116  3000 ????	       f0 71	   w113       =	$F071
    117  3000 ????	       f0 72	   w114       =	$F072
    118  3000 ????	       f0 73	   w115       =	$F073
    119  3000 ????	       f0 74	   w116       =	$F074
    120  3000 ????	       f0 75	   w117       =	$F075
    121  3000 ????	       f0 76	   w118       =	$F076
    122  3000 ????	       f0 77	   w119       =	$F077
    123  3000 ????	       f0 78	   w120       =	$F078
    124  3000 ????	       f0 79	   w121       =	$F079
    125  3000 ????	       f0 7a	   w122       =	$F07A
    126  3000 ????	       f0 7b	   w123       =	$F07B
    127  3000 ????	       f0 7c	   w124       =	$F07C
    128  3000 ????	       f0 7d	   w125       =	$F07D
    129  3000 ????	       f0 7e	   w126       =	$F07E
    130  3000 ????	       f0 7f	   w127       =	$F07F
    131  3000 ????
    132  3000 ????	       f0 80	   read_RAM   =	$F080
    133  3000 ????	       f0 80	   rRAM       =	$F080
    134  3000 ????	       f0 80	   r000       =	$F080
    135  3000 ????	       f0 81	   r001       =	$F081
    136  3000 ????	       f0 82	   r002       =	$F082
    137  3000 ????	       f0 83	   r003       =	$F083
    138  3000 ????	       f0 84	   r004       =	$F084
    139  3000 ????	       f0 85	   r005       =	$F085
    140  3000 ????	       f0 86	   r006       =	$F086
    141  3000 ????	       f0 87	   r007       =	$F087
    142  3000 ????	       f0 88	   r008       =	$F088
    143  3000 ????	       f0 89	   r009       =	$F089
    144  3000 ????	       f0 8a	   r010       =	$F08A
    145  3000 ????	       f0 8b	   r011       =	$F08B
    146  3000 ????	       f0 8c	   r012       =	$F08C
    147  3000 ????	       f0 8d	   r013       =	$F08D
    148  3000 ????	       f0 8e	   r014       =	$F08E
    149  3000 ????	       f0 8f	   r015       =	$F08F
    150  3000 ????	       f0 90	   r016       =	$F090
    151  3000 ????	       f0 91	   r017       =	$F091
    152  3000 ????	       f0 92	   r018       =	$F092
    153  3000 ????	       f0 93	   r019       =	$F093
    154  3000 ????	       f0 94	   r020       =	$F094
    155  3000 ????	       f0 95	   r021       =	$F095
    156  3000 ????	       f0 96	   r022       =	$F096
    157  3000 ????	       f0 97	   r023       =	$F097
    158  3000 ????	       f0 98	   r024       =	$F098
    159  3000 ????	       f0 99	   r025       =	$F099
    160  3000 ????	       f0 9a	   r026       =	$F09A
    161  3000 ????	       f0 9b	   r027       =	$F09B
    162  3000 ????	       f0 9c	   r028       =	$F09C
    163  3000 ????	       f0 9d	   r029       =	$F09D
    164  3000 ????	       f0 9e	   r030       =	$F09E
    165  3000 ????	       f0 9f	   r031       =	$F09F
    166  3000 ????	       f0 a0	   r032       =	$F0A0
    167  3000 ????	       f0 a1	   r033       =	$F0A1
    168  3000 ????	       f0 a2	   r034       =	$F0A2
    169  3000 ????	       f0 a3	   r035       =	$F0A3
    170  3000 ????	       f0 a4	   r036       =	$F0A4
    171  3000 ????	       f0 a5	   r037       =	$F0A5
    172  3000 ????	       f0 a6	   r038       =	$F0A6
    173  3000 ????	       f0 a7	   r039       =	$F0A7
    174  3000 ????	       f0 a8	   r040       =	$F0A8
    175  3000 ????	       f0 a9	   r041       =	$F0A9
    176  3000 ????	       f0 aa	   r042       =	$F0AA
    177  3000 ????	       f0 ab	   r043       =	$F0AB
    178  3000 ????	       f0 ac	   r044       =	$F0AC
    179  3000 ????	       f0 ad	   r045       =	$F0AD
    180  3000 ????	       f0 ae	   r046       =	$F0AE
    181  3000 ????	       f0 af	   r047       =	$F0AF
    182  3000 ????	       f0 b0	   r048       =	$F0B0
    183  3000 ????	       f0 b1	   r049       =	$F0B1
    184  3000 ????	       f0 b2	   r050       =	$F0B2
    185  3000 ????	       f0 b3	   r051       =	$F0B3
    186  3000 ????	       f0 b4	   r052       =	$F0B4
    187  3000 ????	       f0 b5	   r053       =	$F0B5
    188  3000 ????	       f0 b6	   r054       =	$F0B6
    189  3000 ????	       f0 b7	   r055       =	$F0B7
    190  3000 ????	       f0 b8	   r056       =	$F0B8
    191  3000 ????	       f0 b9	   r057       =	$F0B9
    192  3000 ????	       f0 ba	   r058       =	$F0BA
    193  3000 ????	       f0 bb	   r059       =	$F0BB
    194  3000 ????	       f0 bc	   r060       =	$F0BC
    195  3000 ????	       f0 bd	   r061       =	$F0BD
    196  3000 ????	       f0 be	   r062       =	$F0BE
    197  3000 ????	       f0 bf	   r063       =	$F0BF
    198  3000 ????	       f0 c0	   r064       =	$F0C0
    199  3000 ????	       f0 c1	   r065       =	$F0C1
    200  3000 ????	       f0 c2	   r066       =	$F0C2
    201  3000 ????	       f0 c3	   r067       =	$F0C3
    202  3000 ????	       f0 c4	   r068       =	$F0C4
    203  3000 ????	       f0 c5	   r069       =	$F0C5
    204  3000 ????	       f0 c6	   r070       =	$F0C6
    205  3000 ????	       f0 c7	   r071       =	$F0C7
    206  3000 ????	       f0 c8	   r072       =	$F0C8
    207  3000 ????	       f0 c9	   r073       =	$F0C9
    208  3000 ????	       f0 ca	   r074       =	$F0CA
    209  3000 ????	       f0 cb	   r075       =	$F0CB
    210  3000 ????	       f0 cc	   r076       =	$F0CC
    211  3000 ????	       f0 cd	   r077       =	$F0CD
    212  3000 ????	       f0 ce	   r078       =	$F0CE
    213  3000 ????	       f0 cf	   r079       =	$F0CF
    214  3000 ????	       f0 d0	   r080       =	$F0D0
    215  3000 ????	       f0 d1	   r081       =	$F0D1
    216  3000 ????	       f0 d2	   r082       =	$F0D2
    217  3000 ????	       f0 d3	   r083       =	$F0D3
    218  3000 ????	       f0 d4	   r084       =	$F0D4
    219  3000 ????	       f0 d5	   r085       =	$F0D5
    220  3000 ????	       f0 d6	   r086       =	$F0D6
    221  3000 ????	       f0 d7	   r087       =	$F0D7
    222  3000 ????	       f0 d8	   r088       =	$F0D8
    223  3000 ????	       f0 d9	   r089       =	$F0D9
    224  3000 ????	       f0 da	   r090       =	$F0DA
    225  3000 ????	       f0 db	   r091       =	$F0DB
    226  3000 ????	       f0 dc	   r092       =	$F0DC
    227  3000 ????	       f0 dd	   r093       =	$F0DD
    228  3000 ????	       f0 de	   r094       =	$F0DE
    229  3000 ????	       f0 df	   r095       =	$F0DF
    230  3000 ????	       f0 e0	   r096       =	$F0E0
    231  3000 ????	       f0 e1	   r097       =	$F0E1
    232  3000 ????	       f0 e2	   r098       =	$F0E2
    233  3000 ????	       f0 e3	   r099       =	$F0E3
    234  3000 ????	       f0 e4	   r100       =	$F0E4
    235  3000 ????	       f0 e5	   r101       =	$F0E5
    236  3000 ????	       f0 e6	   r102       =	$F0E6
    237  3000 ????	       f0 e7	   r103       =	$F0E7
    238  3000 ????	       f0 e8	   r104       =	$F0E8
    239  3000 ????	       f0 e9	   r105       =	$F0E9
    240  3000 ????	       f0 ea	   r106       =	$F0EA
    241  3000 ????	       f0 eb	   r107       =	$F0EB
    242  3000 ????	       f0 ec	   r108       =	$F0EC
    243  3000 ????	       f0 ed	   r109       =	$F0ED
    244  3000 ????	       f0 ee	   r110       =	$F0EE
    245  3000 ????	       f0 ef	   r111       =	$F0EF
    246  3000 ????	       f0 f0	   r112       =	$F0F0
    247  3000 ????	       f0 f1	   r113       =	$F0F1
    248  3000 ????	       f0 f2	   r114       =	$F0F2
    249  3000 ????	       f0 f3	   r115       =	$F0F3
    250  3000 ????	       f0 f4	   r116       =	$F0F4
    251  3000 ????	       f0 f5	   r117       =	$F0F5
    252  3000 ????	       f0 f6	   r118       =	$F0F6
    253  3000 ????	       f0 f7	   r119       =	$F0F7
    254  3000 ????	       f0 f8	   r120       =	$F0F8
    255  3000 ????	       f0 f9	   r121       =	$F0F9
    256  3000 ????	       f0 fa	   r122       =	$F0FA
    257  3000 ????	       f0 fb	   r123       =	$F0FB
    258  3000 ????	       f0 fc	   r124       =	$F0FC
    259  3000 ????	       f0 fd	   r125       =	$F0FD
    260  3000 ????	       f0 fe	   r126       =	$F0FE
    261  3000 ????	       f0 ff	   r127       =	$F0FF
------- FILE E:\Dev\test\default.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 20	   bscode_length =	32
      4  3000 ????	       00 f0	   titlescreencolor =	$F0
      5  3000 ????
      6  3000 ????	       00 e2	   ticker     =	l
      7  3000 ????
      8  3000 ????	       00 e6	   switchSprite =	p
      9  3000 ????
     10  3000 ????	       00 e8	   firstFrame =	r
     11  3000 ????
     12  3000 ????	       00 e9	   _High_Score3 =	s
     13  3000 ????
     14  3000 ????	       00 eb	   _High_Score2 =	u
     15  3000 ????
     16  3000 ????	       00 ea	   _High_Score1 =	t
     17  3000 ????
     18  3000 ????	       00 f0	   gameReady  =	z
     19  3000 ????
     20  3000 ????	       00 ee	   _resetTicker =	x
     21  3000 ????
     22  3000 ????	       00 dc	   explosionTicker =	f
     23  3000 ????
     24  3000 ????	       00 ef	   _Bit6_Sequence_Switch =	y
     25  3000 ????
     26  3000 ????	       00 ef	   _Bit0_Reset_Restrainer =	y
     27  3000 ????
     28  3000 ????	       00 d4	   _sc3       =	score + 2
     29  3000 ????
     30  3000 ????	       00 d3	   _sc2       =	score + 1
     31  3000 ????
     32  3000 ????	       00 d2	   _sc1       =	score
     33  3000 ????
     34  3000 ????	       00 d7	   _P0_Luminosity =	a
     35  3000 ????	       00 8b	   misy       =	missile1y
     36  3000 ????	       00 81	   misx       =	missile1x
     37  3000 ????	       00 91	   asteroid4Y =	player4y
     38  3000 ????	       00 90	   asteroid3Y =	player3y
     39  3000 ????	       00 8f	   asteroid2Y =	player2y
     40  3000 ????	       00 8e	   asteroidY  =	player1y
     41  3000 ????	       00 01	   bs_mask    =	1
     42  3000 ????	       00 08	   bankswitch =	8
     43  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
     44  3000 ????	       00 01	   multisprite =	1
------- FILE E:\Dev\test\default.bas.asm
      7  3000 ????				      ifconst	bankswitch
      8  3000 ????				      if	bankswitch == 8
      9  1000					      ORG	$1000
     10  1000					      RORG	$D000
     11  1000					      endif
     12  1000				  -	      if	bankswitch == 16
     13  1000				  -	      ORG	$1000
     14  1000				  -	      RORG	$9000
     15  1000					      endif
     16  1000				  -	      if	bankswitch == 32
     17  1000				  -	      ORG	$1000
     18  1000				  -	      RORG	$1000
     19  1000					      endif
     20  1000				  -	      if	bankswitch == 64
     21  1000				  -	      ORG	$1000
     22  1000				  -	      RORG	$1000
     23  1000					      endif
     24  1000				  -	      else
     25  1000				  -	      ORG	$F000
     26  1000					      endif
     27  1000					      repeat	256
     28  1000		       ff		      .byte.b	$ff
     27  1000					      repend
     28  1001		       ff		      .byte.b	$ff
     27  1001					      repend
     28  1002		       ff		      .byte.b	$ff
     27  1002					      repend
     28  1003		       ff		      .byte.b	$ff
     27  1003					      repend
     28  1004		       ff		      .byte.b	$ff
     27  1004					      repend
     28  1005		       ff		      .byte.b	$ff
     27  1005					      repend
     28  1006		       ff		      .byte.b	$ff
     27  1006					      repend
     28  1007		       ff		      .byte.b	$ff
     27  1007					      repend
     28  1008		       ff		      .byte.b	$ff
     27  1008					      repend
     28  1009		       ff		      .byte.b	$ff
     27  1009					      repend
     28  100a		       ff		      .byte.b	$ff
     27  100a					      repend
     28  100b		       ff		      .byte.b	$ff
     27  100b					      repend
     28  100c		       ff		      .byte.b	$ff
     27  100c					      repend
     28  100d		       ff		      .byte.b	$ff
     27  100d					      repend
     28  100e		       ff		      .byte.b	$ff
     27  100e					      repend
     28  100f		       ff		      .byte.b	$ff
     27  100f					      repend
     28  1010		       ff		      .byte.b	$ff
     27  1010					      repend
     28  1011		       ff		      .byte.b	$ff
     27  1011					      repend
     28  1012		       ff		      .byte.b	$ff
     27  1012					      repend
     28  1013		       ff		      .byte.b	$ff
     27  1013					      repend
     28  1014		       ff		      .byte.b	$ff
     27  1014					      repend
     28  1015		       ff		      .byte.b	$ff
     27  1015					      repend
     28  1016		       ff		      .byte.b	$ff
     27  1016					      repend
     28  1017		       ff		      .byte.b	$ff
     27  1017					      repend
     28  1018		       ff		      .byte.b	$ff
     27  1018					      repend
     28  1019		       ff		      .byte.b	$ff
     27  1019					      repend
     28  101a		       ff		      .byte.b	$ff
     27  101a					      repend
     28  101b		       ff		      .byte.b	$ff
     27  101b					      repend
     28  101c		       ff		      .byte.b	$ff
     27  101c					      repend
     28  101d		       ff		      .byte.b	$ff
     27  101d					      repend
     28  101e		       ff		      .byte.b	$ff
     27  101e					      repend
     28  101f		       ff		      .byte.b	$ff
     27  101f					      repend
     28  1020		       ff		      .byte.b	$ff
     27  1020					      repend
     28  1021		       ff		      .byte.b	$ff
     27  1021					      repend
     28  1022		       ff		      .byte.b	$ff
     27  1022					      repend
     28  1023		       ff		      .byte.b	$ff
     27  1023					      repend
     28  1024		       ff		      .byte.b	$ff
     27  1024					      repend
     28  1025		       ff		      .byte.b	$ff
     27  1025					      repend
     28  1026		       ff		      .byte.b	$ff
     27  1026					      repend
     28  1027		       ff		      .byte.b	$ff
     27  1027					      repend
     28  1028		       ff		      .byte.b	$ff
     27  1028					      repend
     28  1029		       ff		      .byte.b	$ff
     27  1029					      repend
     28  102a		       ff		      .byte.b	$ff
     27  102a					      repend
     28  102b		       ff		      .byte.b	$ff
     27  102b					      repend
     28  102c		       ff		      .byte.b	$ff
     27  102c					      repend
     28  102d		       ff		      .byte.b	$ff
     27  102d					      repend
     28  102e		       ff		      .byte.b	$ff
     27  102e					      repend
     28  102f		       ff		      .byte.b	$ff
     27  102f					      repend
     28  1030		       ff		      .byte.b	$ff
     27  1030					      repend
     28  1031		       ff		      .byte.b	$ff
     27  1031					      repend
     28  1032		       ff		      .byte.b	$ff
     27  1032					      repend
     28  1033		       ff		      .byte.b	$ff
     27  1033					      repend
     28  1034		       ff		      .byte.b	$ff
     27  1034					      repend
     28  1035		       ff		      .byte.b	$ff
     27  1035					      repend
     28  1036		       ff		      .byte.b	$ff
     27  1036					      repend
     28  1037		       ff		      .byte.b	$ff
     27  1037					      repend
     28  1038		       ff		      .byte.b	$ff
     27  1038					      repend
     28  1039		       ff		      .byte.b	$ff
     27  1039					      repend
     28  103a		       ff		      .byte.b	$ff
     27  103a					      repend
     28  103b		       ff		      .byte.b	$ff
     27  103b					      repend
     28  103c		       ff		      .byte.b	$ff
     27  103c					      repend
     28  103d		       ff		      .byte.b	$ff
     27  103d					      repend
     28  103e		       ff		      .byte.b	$ff
     27  103e					      repend
     28  103f		       ff		      .byte.b	$ff
     27  103f					      repend
     28  1040		       ff		      .byte.b	$ff
     27  1040					      repend
     28  1041		       ff		      .byte.b	$ff
     27  1041					      repend
     28  1042		       ff		      .byte.b	$ff
     27  1042					      repend
     28  1043		       ff		      .byte.b	$ff
     27  1043					      repend
     28  1044		       ff		      .byte.b	$ff
     27  1044					      repend
     28  1045		       ff		      .byte.b	$ff
     27  1045					      repend
     28  1046		       ff		      .byte.b	$ff
     27  1046					      repend
     28  1047		       ff		      .byte.b	$ff
     27  1047					      repend
     28  1048		       ff		      .byte.b	$ff
     27  1048					      repend
     28  1049		       ff		      .byte.b	$ff
     27  1049					      repend
     28  104a		       ff		      .byte.b	$ff
     27  104a					      repend
     28  104b		       ff		      .byte.b	$ff
     27  104b					      repend
     28  104c		       ff		      .byte.b	$ff
     27  104c					      repend
     28  104d		       ff		      .byte.b	$ff
     27  104d					      repend
     28  104e		       ff		      .byte.b	$ff
     27  104e					      repend
     28  104f		       ff		      .byte.b	$ff
     27  104f					      repend
     28  1050		       ff		      .byte.b	$ff
     27  1050					      repend
     28  1051		       ff		      .byte.b	$ff
     27  1051					      repend
     28  1052		       ff		      .byte.b	$ff
     27  1052					      repend
     28  1053		       ff		      .byte.b	$ff
     27  1053					      repend
     28  1054		       ff		      .byte.b	$ff
     27  1054					      repend
     28  1055		       ff		      .byte.b	$ff
     27  1055					      repend
     28  1056		       ff		      .byte.b	$ff
     27  1056					      repend
     28  1057		       ff		      .byte.b	$ff
     27  1057					      repend
     28  1058		       ff		      .byte.b	$ff
     27  1058					      repend
     28  1059		       ff		      .byte.b	$ff
     27  1059					      repend
     28  105a		       ff		      .byte.b	$ff
     27  105a					      repend
     28  105b		       ff		      .byte.b	$ff
     27  105b					      repend
     28  105c		       ff		      .byte.b	$ff
     27  105c					      repend
     28  105d		       ff		      .byte.b	$ff
     27  105d					      repend
     28  105e		       ff		      .byte.b	$ff
     27  105e					      repend
     28  105f		       ff		      .byte.b	$ff
     27  105f					      repend
     28  1060		       ff		      .byte.b	$ff
     27  1060					      repend
     28  1061		       ff		      .byte.b	$ff
     27  1061					      repend
     28  1062		       ff		      .byte.b	$ff
     27  1062					      repend
     28  1063		       ff		      .byte.b	$ff
     27  1063					      repend
     28  1064		       ff		      .byte.b	$ff
     27  1064					      repend
     28  1065		       ff		      .byte.b	$ff
     27  1065					      repend
     28  1066		       ff		      .byte.b	$ff
     27  1066					      repend
     28  1067		       ff		      .byte.b	$ff
     27  1067					      repend
     28  1068		       ff		      .byte.b	$ff
     27  1068					      repend
     28  1069		       ff		      .byte.b	$ff
     27  1069					      repend
     28  106a		       ff		      .byte.b	$ff
     27  106a					      repend
     28  106b		       ff		      .byte.b	$ff
     27  106b					      repend
     28  106c		       ff		      .byte.b	$ff
     27  106c					      repend
     28  106d		       ff		      .byte.b	$ff
     27  106d					      repend
     28  106e		       ff		      .byte.b	$ff
     27  106e					      repend
     28  106f		       ff		      .byte.b	$ff
     27  106f					      repend
     28  1070		       ff		      .byte.b	$ff
     27  1070					      repend
     28  1071		       ff		      .byte.b	$ff
     27  1071					      repend
     28  1072		       ff		      .byte.b	$ff
     27  1072					      repend
     28  1073		       ff		      .byte.b	$ff
     27  1073					      repend
     28  1074		       ff		      .byte.b	$ff
     27  1074					      repend
     28  1075		       ff		      .byte.b	$ff
     27  1075					      repend
     28  1076		       ff		      .byte.b	$ff
     27  1076					      repend
     28  1077		       ff		      .byte.b	$ff
     27  1077					      repend
     28  1078		       ff		      .byte.b	$ff
     27  1078					      repend
     28  1079		       ff		      .byte.b	$ff
     27  1079					      repend
     28  107a		       ff		      .byte.b	$ff
     27  107a					      repend
     28  107b		       ff		      .byte.b	$ff
     27  107b					      repend
     28  107c		       ff		      .byte.b	$ff
     27  107c					      repend
     28  107d		       ff		      .byte.b	$ff
     27  107d					      repend
     28  107e		       ff		      .byte.b	$ff
     27  107e					      repend
     28  107f		       ff		      .byte.b	$ff
     27  107f					      repend
     28  1080		       ff		      .byte.b	$ff
     27  1080					      repend
     28  1081		       ff		      .byte.b	$ff
     27  1081					      repend
     28  1082		       ff		      .byte.b	$ff
     27  1082					      repend
     28  1083		       ff		      .byte.b	$ff
     27  1083					      repend
     28  1084		       ff		      .byte.b	$ff
     27  1084					      repend
     28  1085		       ff		      .byte.b	$ff
     27  1085					      repend
     28  1086		       ff		      .byte.b	$ff
     27  1086					      repend
     28  1087		       ff		      .byte.b	$ff
     27  1087					      repend
     28  1088		       ff		      .byte.b	$ff
     27  1088					      repend
     28  1089		       ff		      .byte.b	$ff
     27  1089					      repend
     28  108a		       ff		      .byte.b	$ff
     27  108a					      repend
     28  108b		       ff		      .byte.b	$ff
     27  108b					      repend
     28  108c		       ff		      .byte.b	$ff
     27  108c					      repend
     28  108d		       ff		      .byte.b	$ff
     27  108d					      repend
     28  108e		       ff		      .byte.b	$ff
     27  108e					      repend
     28  108f		       ff		      .byte.b	$ff
     27  108f					      repend
     28  1090		       ff		      .byte.b	$ff
     27  1090					      repend
     28  1091		       ff		      .byte.b	$ff
     27  1091					      repend
     28  1092		       ff		      .byte.b	$ff
     27  1092					      repend
     28  1093		       ff		      .byte.b	$ff
     27  1093					      repend
     28  1094		       ff		      .byte.b	$ff
     27  1094					      repend
     28  1095		       ff		      .byte.b	$ff
     27  1095					      repend
     28  1096		       ff		      .byte.b	$ff
     27  1096					      repend
     28  1097		       ff		      .byte.b	$ff
     27  1097					      repend
     28  1098		       ff		      .byte.b	$ff
     27  1098					      repend
     28  1099		       ff		      .byte.b	$ff
     27  1099					      repend
     28  109a		       ff		      .byte.b	$ff
     27  109a					      repend
     28  109b		       ff		      .byte.b	$ff
     27  109b					      repend
     28  109c		       ff		      .byte.b	$ff
     27  109c					      repend
     28  109d		       ff		      .byte.b	$ff
     27  109d					      repend
     28  109e		       ff		      .byte.b	$ff
     27  109e					      repend
     28  109f		       ff		      .byte.b	$ff
     27  109f					      repend
     28  10a0		       ff		      .byte.b	$ff
     27  10a0					      repend
     28  10a1		       ff		      .byte.b	$ff
     27  10a1					      repend
     28  10a2		       ff		      .byte.b	$ff
     27  10a2					      repend
     28  10a3		       ff		      .byte.b	$ff
     27  10a3					      repend
     28  10a4		       ff		      .byte.b	$ff
     27  10a4					      repend
     28  10a5		       ff		      .byte.b	$ff
     27  10a5					      repend
     28  10a6		       ff		      .byte.b	$ff
     27  10a6					      repend
     28  10a7		       ff		      .byte.b	$ff
     27  10a7					      repend
     28  10a8		       ff		      .byte.b	$ff
     27  10a8					      repend
     28  10a9		       ff		      .byte.b	$ff
     27  10a9					      repend
     28  10aa		       ff		      .byte.b	$ff
     27  10aa					      repend
     28  10ab		       ff		      .byte.b	$ff
     27  10ab					      repend
     28  10ac		       ff		      .byte.b	$ff
     27  10ac					      repend
     28  10ad		       ff		      .byte.b	$ff
     27  10ad					      repend
     28  10ae		       ff		      .byte.b	$ff
     27  10ae					      repend
     28  10af		       ff		      .byte.b	$ff
     27  10af					      repend
     28  10b0		       ff		      .byte.b	$ff
     27  10b0					      repend
     28  10b1		       ff		      .byte.b	$ff
     27  10b1					      repend
     28  10b2		       ff		      .byte.b	$ff
     27  10b2					      repend
     28  10b3		       ff		      .byte.b	$ff
     27  10b3					      repend
     28  10b4		       ff		      .byte.b	$ff
     27  10b4					      repend
     28  10b5		       ff		      .byte.b	$ff
     27  10b5					      repend
     28  10b6		       ff		      .byte.b	$ff
     27  10b6					      repend
     28  10b7		       ff		      .byte.b	$ff
     27  10b7					      repend
     28  10b8		       ff		      .byte.b	$ff
     27  10b8					      repend
     28  10b9		       ff		      .byte.b	$ff
     27  10b9					      repend
     28  10ba		       ff		      .byte.b	$ff
     27  10ba					      repend
     28  10bb		       ff		      .byte.b	$ff
     27  10bb					      repend
     28  10bc		       ff		      .byte.b	$ff
     27  10bc					      repend
     28  10bd		       ff		      .byte.b	$ff
     27  10bd					      repend
     28  10be		       ff		      .byte.b	$ff
     27  10be					      repend
     28  10bf		       ff		      .byte.b	$ff
     27  10bf					      repend
     28  10c0		       ff		      .byte.b	$ff
     27  10c0					      repend
     28  10c1		       ff		      .byte.b	$ff
     27  10c1					      repend
     28  10c2		       ff		      .byte.b	$ff
     27  10c2					      repend
     28  10c3		       ff		      .byte.b	$ff
     27  10c3					      repend
     28  10c4		       ff		      .byte.b	$ff
     27  10c4					      repend
     28  10c5		       ff		      .byte.b	$ff
     27  10c5					      repend
     28  10c6		       ff		      .byte.b	$ff
     27  10c6					      repend
     28  10c7		       ff		      .byte.b	$ff
     27  10c7					      repend
     28  10c8		       ff		      .byte.b	$ff
     27  10c8					      repend
     28  10c9		       ff		      .byte.b	$ff
     27  10c9					      repend
     28  10ca		       ff		      .byte.b	$ff
     27  10ca					      repend
     28  10cb		       ff		      .byte.b	$ff
     27  10cb					      repend
     28  10cc		       ff		      .byte.b	$ff
     27  10cc					      repend
     28  10cd		       ff		      .byte.b	$ff
     27  10cd					      repend
     28  10ce		       ff		      .byte.b	$ff
     27  10ce					      repend
     28  10cf		       ff		      .byte.b	$ff
     27  10cf					      repend
     28  10d0		       ff		      .byte.b	$ff
     27  10d0					      repend
     28  10d1		       ff		      .byte.b	$ff
     27  10d1					      repend
     28  10d2		       ff		      .byte.b	$ff
     27  10d2					      repend
     28  10d3		       ff		      .byte.b	$ff
     27  10d3					      repend
     28  10d4		       ff		      .byte.b	$ff
     27  10d4					      repend
     28  10d5		       ff		      .byte.b	$ff
     27  10d5					      repend
     28  10d6		       ff		      .byte.b	$ff
     27  10d6					      repend
     28  10d7		       ff		      .byte.b	$ff
     27  10d7					      repend
     28  10d8		       ff		      .byte.b	$ff
     27  10d8					      repend
     28  10d9		       ff		      .byte.b	$ff
     27  10d9					      repend
     28  10da		       ff		      .byte.b	$ff
     27  10da					      repend
     28  10db		       ff		      .byte.b	$ff
     27  10db					      repend
     28  10dc		       ff		      .byte.b	$ff
     27  10dc					      repend
     28  10dd		       ff		      .byte.b	$ff
     27  10dd					      repend
     28  10de		       ff		      .byte.b	$ff
     27  10de					      repend
     28  10df		       ff		      .byte.b	$ff
     27  10df					      repend
     28  10e0		       ff		      .byte.b	$ff
     27  10e0					      repend
     28  10e1		       ff		      .byte.b	$ff
     27  10e1					      repend
     28  10e2		       ff		      .byte.b	$ff
     27  10e2					      repend
     28  10e3		       ff		      .byte.b	$ff
     27  10e3					      repend
     28  10e4		       ff		      .byte.b	$ff
     27  10e4					      repend
     28  10e5		       ff		      .byte.b	$ff
     27  10e5					      repend
     28  10e6		       ff		      .byte.b	$ff
     27  10e6					      repend
     28  10e7		       ff		      .byte.b	$ff
     27  10e7					      repend
     28  10e8		       ff		      .byte.b	$ff
     27  10e8					      repend
     28  10e9		       ff		      .byte.b	$ff
     27  10e9					      repend
     28  10ea		       ff		      .byte.b	$ff
     27  10ea					      repend
     28  10eb		       ff		      .byte.b	$ff
     27  10eb					      repend
     28  10ec		       ff		      .byte.b	$ff
     27  10ec					      repend
     28  10ed		       ff		      .byte.b	$ff
     27  10ed					      repend
     28  10ee		       ff		      .byte.b	$ff
     27  10ee					      repend
     28  10ef		       ff		      .byte.b	$ff
     27  10ef					      repend
     28  10f0		       ff		      .byte.b	$ff
     27  10f0					      repend
     28  10f1		       ff		      .byte.b	$ff
     27  10f1					      repend
     28  10f2		       ff		      .byte.b	$ff
     27  10f2					      repend
     28  10f3		       ff		      .byte.b	$ff
     27  10f3					      repend
     28  10f4		       ff		      .byte.b	$ff
     27  10f4					      repend
     28  10f5		       ff		      .byte.b	$ff
     27  10f5					      repend
     28  10f6		       ff		      .byte.b	$ff
     27  10f6					      repend
     28  10f7		       ff		      .byte.b	$ff
     27  10f7					      repend
     28  10f8		       ff		      .byte.b	$ff
     27  10f8					      repend
     28  10f9		       ff		      .byte.b	$ff
     27  10f9					      repend
     28  10fa		       ff		      .byte.b	$ff
     27  10fa					      repend
     28  10fb		       ff		      .byte.b	$ff
     27  10fb					      repend
     28  10fc		       ff		      .byte.b	$ff
     27  10fc					      repend
     28  10fd		       ff		      .byte.b	$ff
     27  10fd					      repend
     28  10fe		       ff		      .byte.b	$ff
     27  10fe					      repend
     28  10ff		       ff		      .byte.b	$ff
     29  1100					      repend
     30  1100				   game
     31  1100				   .
     32  1100							; 
     33  1100
     34  1100				   .L00 		;  rem Generated 22/10/2018 21:47:13 by Visual bB Version 1.0.0.568
     35  1100
     36  1100				   .L01 		;  rem **********************************
     37  1100
     38  1100				   .L02 		;  rem *Horizon Shift			 *
     39  1100
     40  1100				   .L03 		;  rem *<description>			 *
     41  1100
     42  1100				   .L04 		;  rem *<author>			 *
     43  1100
     44  1100				   .L05 		;  rem *<contact info> 		 *
     45  1100
     46  1100				   .L06 		;  rem *<license>			 *
     47  1100
     48  1100				   .L07 		;  rem ********************************** 
     49  1100
     50  1100				   .L08 		;  includesfile multisprite_superchip.inc
     51  1100
     52  1100				   .L09 		;  set kernel multisprite
     53  1100
     54  1100				   .L010		;  set romsize 8k
     55  1100
     56  1100				   .
     57  1100							; 
     58  1100
     59  1100				   .L011		;  pfheight = 7
     60  1100
     61  1100		       a9 07		      LDA	#7
     62  1102		       85 c4		      STA	pfheight
     63  1104				   .
     64  1104							; 
     65  1104
     66  1104				   .L012		;  playfield:
     67  1104
     68  1104		       a9 bc		      LDA	#<PF1_data0
     69  1106		       85 bb		      STA	PF1pointer
     70  1108		       a9 fe		      LDA	#>PF1_data0
     71  110a		       85 bc		      STA	PF1pointer+1
     72  110c		       a9 c7		      LDA	#<PF2_data0
     73  110e		       85 bd		      STA	PF2pointer
     74  1110		       a9 fe		      LDA	#>PF2_data0
     75  1112		       85 be		      STA	PF2pointer+1
     76  1114				   .
     77  1114							; 
     78  1114
     79  1114				   .
     80  1114							; 
     81  1114
     82  1114				   .L013		;  COLUBK  =  $0
     83  1114
     84  1114		       a9 00		      LDA	#$0
     85  1116		       85 09		      STA	COLUBK
     86  1118				   .
     87  1118							; 
     88  1118
     89  1118				   .L014		;  _COLUP1  =	$3A
     90  1118
     91  1118		       a9 3a		      LDA	#$3A
     92  111a		       85 98		      STA	_COLUP1
     93  111c				   .L015		;  COLUP2  =  $A4
     94  111c
     95  111c		       a9 a4		      LDA	#$A4
     96  111e		       85 99		      STA	COLUP2
     97  1120				   .L016		;  COLUP3  =  $A4
     98  1120
     99  1120		       a9 a4		      LDA	#$A4
    100  1122		       85 9a		      STA	COLUP3
    101  1124				   .L017		;  COLUP4  =  $76
    102  1124
    103  1124		       a9 76		      LDA	#$76
    104  1126		       85 9b		      STA	COLUP4
    105  1128				   .L018		;  COLUP5  =  $2E
    106  1128
    107  1128		       a9 2e		      LDA	#$2E
    108  112a		       85 9c		      STA	COLUP5
    109  112c				   .
    110  112c							; 
    111  112c
    112  112c				   .
    113  112c							; 
    114  112c
    115  112c				   .L019		;  lifecolor  =  $aa
    116  112c
    117  112c		       a9 aa		      LDA	#$aa
    118  112e		       85 c0		      STA	lifecolor
    119  1130				   .
    120  1130							; 
    121  1130
    122  1130				   .
    123  1130							; 
    124  1130
    125  1130				   .
    126  1130							; 
    127  1130
    128  1130				   .L020		;  player0x = 66
    129  1130
    130  1130		       a9 42		      LDA	#66
    131  1132		       85 84		      STA	player0x
    132  1134				   .L021		;  player0y = 57
    133  1134
    134  1134		       a9 39		      LDA	#57
    135  1136		       85 8d		      STA	player0y
    136  1138				   .
    137  1138							; 
    138  1138
    139  1138				   .L022		;  player1x = 76
    140  1138
    141  1138		       a9 4c		      LDA	#76
    142  113a		       85 85		      STA	player1x
    143  113c				   .L023		;  player1y = 99
    144  113c
    145  113c		       a9 63		      LDA	#99
    146  113e		       85 8e		      STA	player1y
    147  1140				   .
    148  1140							; 
    149  1140
    150  1140				   .L024		;  player2x = 86
    151  1140
    152  1140		       a9 56		      LDA	#86
    153  1142		       85 86		      STA	player2x
    154  1144				   .L025		;  player2y = 100
    155  1144
    156  1144		       a9 64		      LDA	#100
    157  1146		       85 8f		      STA	player2y
    158  1148				   .
    159  1148							; 
    160  1148
    161  1148				   .L026		;  player3x = 96
    162  1148
    163  1148		       a9 60		      LDA	#96
    164  114a		       85 87		      STA	player3x
    165  114c				   .L027		;  player3y = 100
    166  114c
    167  114c		       a9 64		      LDA	#100
    168  114e		       85 90		      STA	player3y
    169  1150				   .
    170  1150							; 
    171  1150
    172  1150				   .L028		;  player4x = 106
    173  1150
    174  1150		       a9 6a		      LDA	#106
    175  1152		       85 88		      STA	player4x
    176  1154				   .L029		;  player4y = 100
    177  1154
    178  1154		       a9 64		      LDA	#100
    179  1156		       85 91		      STA	player4y
    180  1158				   .
    181  1158							; 
    182  1158
    183  1158				   .L030		;  player5x = 100
    184  1158
    185  1158		       a9 64		      LDA	#100
    186  115a		       85 89		      STA	player5x
    187  115c				   .L031		;  player5y =	200
    188  115c
    189  115c		       a9 c8		      LDA	#200
    190  115e		       85 92		      STA	player5y
    191  1160				   .L032		;  missile0y = 255
    192  1160
    193  1160		       a9 ff		      LDA	#255
    194  1162		       85 8a		      STA	missile0y
    195  1164				   .
    196  1164							; 
    197  1164
    198  1164				   .
    199  1164							; 
    200  1164
    201  1164				   .L033		;  missile1y = 200
    202  1164
    203  1164		       a9 c8		      LDA	#200
    204  1166		       85 8b		      STA	missile1y
    205  1168				   .L034		;  missile1x = 50
    206  1168
    207  1168		       a9 32		      LDA	#50
    208  116a		       85 81		      STA	missile1x
    209  116c				   .
    210  116c							; 
    211  116c
    212  116c				   .
    213  116c							; 
    214  116c
    215  116c				   .
    216  116c							; 
    217  116c
    218  116c				   .
    219  116c							; 
    220  116c
    221  116c				   .
    222  116c							; 
    223  116c
    224  116c				   .
    225  116c							; 
    226  116c
    227  116c				   .
    228  116c							; 
    229  116c
    230  116c				   .
    231  116c							; 
    232  116c
    233  116c				   .L035		;  dim asteroidY  =  player1y.b
    234  116c
    235  116c				   .L036		;  dim asteroid2Y  =  player2y.c
    236  116c
    237  116c				   .L037		;  dim asteroid3Y  =  player3y.d
    238  116c
    239  116c				   .L038		;  dim asteroid4Y  =  player4y.e
    240  116c
    241  116c				   .
    242  116c							; 
    243  116c
    244  116c				   .L039		;  dim misx  =  missile1x.h
    245  116c
    246  116c				   .L040		;  dim misy  =  missile1y.i
    247  116c
    248  116c				   .
    249  116c							; 
    250  116c
    251  116c				   .L041		;  dim _P0_Luminosity	=  a.b
    252  116c
    253  116c				   .
    254  116c							; 
    255  116c
    256  116c				   .L042		;  dim _sc1  =  score
    257  116c
    258  116c				   .L043		;  dim _sc2  =  score + 1
    259  116c
    260  116c				   .L044		;  dim _sc3  =  score + 2
    261  116c
    262  116c				   .
    263  116c							; 
    264  116c
    265  116c				   .L045		;  dim _Bit0_Reset_Restrainer	=  y
    266  116c
    267  116c				   .L046		;  dim _Bit6_Sequence_Switch  =  y
    268  116c
    269  116c				   .
    270  116c							; 
    271  116c
    272  116c				   .L047		;  dim explosionTicker  =  f
    273  116c
    274  116c				   .L048		;  dim _resetTicker  =  x
    275  116c
    276  116c				   .L049		;  dim gameReady  =  z
    277  116c
    278  116c				   .L050		;  dim _High_Score1  =  t
    279  116c
    280  116c				   .L051		;  dim _High_Score2  =  u
    281  116c
    282  116c				   .L052		;  dim _High_Score3  =  s
    283  116c
    284  116c				   .L053		;  dim firstFrame  =  r
    285  116c
    286  116c				   .L054		;  dim switchSprite  =  p
    287  116c
    288  116c				   .
    289  116c							; 
    290  116c
    291  116c				   .L055		;  dim ticker	=  l
    292  116c
    293  116c				   .L056		;  dim titlescreencolor  =  $F0
    294  116c
    295  116c				   .
    296  116c							; 
    297  116c
    298  116c				   .
    299  116c							; 
    300  116c
    301  116c				   .
    302  116c							; 
    303  116c
    304  116c				   .
    305  116c							; 
    306  116c
    307  116c				   .
    308  116c							; 
    309  116c
    310  116c				   .
    311  116c							; 
    312  116c
    313  116c				   .L057		;  _High_Score1  =  _sc1
    314  116c
    315  116c		       a5 d2		      LDA	_sc1
    316  116e		       85 ea		      STA	_High_Score1
    317  1170				   .L058		;  _High_Score2  =  _sc2
    318  1170
    319  1170		       a5 d3		      LDA	_sc2
    320  1172		       85 eb		      STA	_High_Score2
    321  1174				   .L059		;  _High_Score3  =  _sc3
    322  1174
    323  1174		       a5 d4		      LDA	_sc3
    324  1176		       85 e9		      STA	_High_Score3
    325  1178				   .L060		;  lives  =  96
    326  1178
    327  1178		       a9 60		      LDA	#96
    328  117a		       85 c2		      STA	lives
    329  117c				   .L061		;  ticker  =  0
    330  117c
    331  117c		       a9 00		      LDA	#0
    332  117e		       85 e2		      STA	ticker
    333  1180				   .L062		;  _resetTicker  =  0
    334  1180
    335  1180		       a9 00		      LDA	#0
    336  1182		       85 ee		      STA	_resetTicker
    337  1184				   .L063		;  switchSprite  =  0
    338  1184
    339  1184		       a9 00		      LDA	#0
    340  1186		       85 e6		      STA	switchSprite
    341  1188				   .L064		;  explosionTicker  =	0
    342  1188
    343  1188		       a9 00		      LDA	#0
    344  118a		       85 dc		      STA	explosionTicker
    345  118c				   .L065		;  scorecolor = $1a
    346  118c
    347  118c		       a9 1a		      LDA	#$1a
    348  118e		       85 d5		      STA	scorecolor
    349  1190				   .L066		;  firstFrame	=  0
    350  1190
    351  1190		       a9 00		      LDA	#0
    352  1192		       85 e8		      STA	firstFrame
    353  1194				   .
    354  1194							; 
    355  1194
    356  1194				   .L067		;  NUSIZ0  =  16
    357  1194
    358  1194		       a9 10		      LDA	#16
    359  1196		       85 04		      STA	NUSIZ0
    360  1198				   .
    361  1198							; 
    362  1198
    363  1198				   .L068		;  lives:
    364  1198
    365  1198		       a9 29		      LDA	#<lives__L068
    366  119a		       85 c1		      STA	lifepointer
    367  119c		       a5 c2		      LDA	lifepointer+1
    368  119e		       29 e0		      AND	#$E0
    369  11a0		       09 1e		      ORA	#(>lives__L068)&($1F)
    370  11a2		       85 c2		      STA	lifepointer+1
    371  11a4				   .
    372  11a4							; 
    373  11a4
    374  11a4				   .L069		;  player1:
    375  11a4
    376  11a4		       a2 5a		      LDX	#<playerL069_1
    377  11a6		       86 a6		      STX	player1pointerlo
    378  11a8		       a9 fe		      LDA	#>playerL069_1
    379  11aa		       85 ab		      STA	player1pointerhi
    380  11ac		       a9 09		      LDA	#9
    381  11ae		       85 b1		      STA	player1height
    382  11b0				   .
    383  11b0							; 
    384  11b0
    385  11b0				   .L070		;  player3:
    386  11b0
    387  11b0		       a2 62		      LDX	#<playerL070_3
    388  11b2		       86 a8		      STX	player3pointerlo
    389  11b4		       a9 fe		      LDA	#>playerL070_3
    390  11b6		       85 ad		      STA	player3pointerhi
    391  11b8		       a9 09		      LDA	#9
    392  11ba		       85 b3		      STA	player3height
    393  11bc				   .
    394  11bc							; 
    395  11bc
    396  11bc				   .sprites
    397  11bc							; sprites
    398  11bc
    399  11bc				   .L071		;  ticker  =  ticker  +  1
    400  11bc
    401  11bc		       e6 e2		      INC	ticker
    402  11be				   .L072		;  if ticker  >  10 then ticker  =  0
    403  11be
    404  11be		       a9 0a		      LDA	#10
    405  11c0		       c5 e2		      CMP	ticker
    406  11c2		       b0 04		      BCS	.skipL072
    407  11c4				   .condpart0
    408  11c4		       a9 00		      LDA	#0
    409  11c6		       85 e2		      STA	ticker
    410  11c8				   .skipL072
    411  11c8				   .
    412  11c8							; 
    413  11c8
    414  11c8				   .
    415  11c8							; 
    416  11c8
    417  11c8				   .
    418  11c8							; 
    419  11c8
    420  11c8				   .
    421  11c8							; 
    422  11c8
    423  11c8				   .
    424  11c8							; 
    425  11c8
    426  11c8				   .L073		;  if player1y  =  100  ||  player1y  =  0 then goto setPlayer1Color
    427  11c8
    428  11c8		       a5 8e		      LDA	player1y
    429  11ca		       c9 64		      CMP	#100
    430  11cc		       d0 03		      BNE	.skipL073
    431  11ce				   .condpart1
    432  11ce		       4c d7 d1 	      jmp	.condpart2
    433  11d1				   .skipL073
    434  11d1		       a5 8e		      LDA	player1y
    435  11d3		       c9 00		      CMP	#0
    436  11d5		       d0 03		      BNE	.skip0OR
    437  11d7				   .condpart2
    438  11d7		       4c 83 d7 	      jmp	.setPlayer1Color
    439  11da
    440  11da				   .skip0OR
    441  11da				   .L074		;  if player2y  =  100  ||  player2y  =  0 then goto setPlayer2Color
    442  11da
    443  11da		       a5 8f		      LDA	player2y
    444  11dc		       c9 64		      CMP	#100
    445  11de		       d0 03		      BNE	.skipL074
    446  11e0				   .condpart3
    447  11e0		       4c e9 d1 	      jmp	.condpart4
    448  11e3				   .skipL074
    449  11e3		       a5 8f		      LDA	player2y
    450  11e5		       c9 00		      CMP	#0
    451  11e7		       d0 03		      BNE	.skip1OR
    452  11e9				   .condpart4
    453  11e9		       4c cc d7 	      jmp	.setPlayer2Color
    454  11ec
    455  11ec				   .skip1OR
    456  11ec				   .L075		;  if player3y  =  100  ||  player4y  =  0 then goto setPlayer3Color
    457  11ec
    458  11ec		       a5 90		      LDA	player3y
    459  11ee		       c9 64		      CMP	#100
    460  11f0		       d0 03		      BNE	.skipL075
    461  11f2				   .condpart5
    462  11f2		       4c fb d1 	      jmp	.condpart6
    463  11f5				   .skipL075
    464  11f5		       a5 91		      LDA	player4y
    465  11f7		       c9 00		      CMP	#0
    466  11f9		       d0 03		      BNE	.skip2OR
    467  11fb				   .condpart6
    468  11fb		       4c 51 d8 	      jmp	.setPlayer3Color
    469  11fe
    470  11fe				   .skip2OR
    471  11fe				   .L076		;  if player4y  =  100  ||  player5y  =  0 then goto setPlayer4Color
    472  11fe
    473  11fe		       a5 91		      LDA	player4y
    474  1200		       c9 64		      CMP	#100
    475  1202		       d0 03		      BNE	.skipL076
    476  1204				   .condpart7
    477  1204		       4c 0d d2 	      jmp	.condpart8
    478  1207				   .skipL076
    479  1207		       a5 92		      LDA	player5y
    480  1209		       c9 00		      CMP	#0
    481  120b		       d0 03		      BNE	.skip3OR
    482  120d				   .condpart8
    483  120d		       4c c2 d8 	      jmp	.setPlayer4Color
    484  1210
    485  1210				   .skip3OR
    486  1210				   .
    487  1210							; 
    488  1210
    489  1210				   .colorSetComplete
    490  1210							; colorSetComplete
    491  1210
    492  1210				   .
    493  1210							; 
    494  1210
    495  1210				   .L077		;  if player5y  <  200 then explosionTicker  =  explosionTicker  +  1
    496  1210
    497  1210		       a5 92		      LDA	player5y
    498  1212		       c9 c8		      CMP	#200
    499  1214		       b0 02		      BCS	.skipL077
    500  1216				   .condpart9
    501  1216		       e6 dc		      INC	explosionTicker
    502  1218				   .skipL077
    503  1218				   .L078		;  if explosionTicker	>  1 then player5y  =  200 : explosionTicker  =  0 :  AUDV0  =	0  :  AUDC0  =	0  :  AUDF0  =	0
    504  1218
    505  1218		       a9 01		      LDA	#1
    506  121a		       c5 dc		      CMP	explosionTicker
    507  121c		       b0 0e		      BCS	.skipL078
    508  121e				   .condpart10
    509  121e		       a9 c8		      LDA	#200
    510  1220		       85 92		      STA	player5y
    511  1222		       a9 00		      LDA	#0
    512  1224		       85 dc		      STA	explosionTicker
    513  1226		       85 19		      STA	AUDV0
    514  1228		       85 15		      STA	AUDC0
    515  122a		       85 17		      STA	AUDF0
    516  122c				   .skipL078
    517  122c				   .
    518  122c							; 
    519  122c
    520  122c				   .L079		;  if player4y  =  80	&&  missile1y  >  150 then missile1y  =  player4y :  missile1x	=  player4x  -	3
    521  122c
    522  122c		       a5 91		      LDA	player4y
    523  122e		       c9 50		      CMP	#80
    524  1230		       d0 11		      BNE	.skipL079
    525  1232				   .condpart11
    526  1232		       a9 96		      LDA	#150
    527  1234		       c5 8b		      CMP	missile1y
    528  1236		       b0 0b		      BCS	.skip11then
    529  1238				   .condpart12
    530  1238		       a5 91		      LDA	player4y
    531  123a		       85 8b		      STA	missile1y
    532  123c		       a5 88		      LDA	player4x
    533  123e		       38		      SEC
    534  123f		       e9 03		      SBC	#3
    535  1241		       85 81		      STA	missile1x
    536  1243				   .skip11then
    537  1243				   .skipL079
    538  1243				   .L080		;  if player4y  =  10	&&  missile1y  >  150 then missile1y  =  player4y :  missile1x	=  player4x  -	3
    539  1243
    540  1243		       a5 91		      LDA	player4y
    541  1245		       c9 0a		      CMP	#10
    542  1247		       d0 11		      BNE	.skipL080
    543  1249				   .condpart13
    544  1249		       a9 96		      LDA	#150
    545  124b		       c5 8b		      CMP	missile1y
    546  124d		       b0 0b		      BCS	.skip13then
    547  124f				   .condpart14
    548  124f		       a5 91		      LDA	player4y
    549  1251		       85 8b		      STA	missile1y
    550  1253		       a5 88		      LDA	player4x
    551  1255		       38		      SEC
    552  1256		       e9 03		      SBC	#3
    553  1258		       85 81		      STA	missile1x
    554  125a				   .skip13then
    555  125a				   .skipL080
    556  125a				   .
    557  125a							; 
    558  125a
    559  125a				   .L081		;  if player4y  =  70	&&  missile1y  >  150 then missile1y  =  player4y :  missile1x	=  player4x  -	3
    560  125a
    561  125a		       a5 91		      LDA	player4y
    562  125c		       c9 46		      CMP	#70
    563  125e		       d0 11		      BNE	.skipL081
    564  1260				   .condpart15
    565  1260		       a9 96		      LDA	#150
    566  1262		       c5 8b		      CMP	missile1y
    567  1264		       b0 0b		      BCS	.skip15then
    568  1266				   .condpart16
    569  1266		       a5 91		      LDA	player4y
    570  1268		       85 8b		      STA	missile1y
    571  126a		       a5 88		      LDA	player4x
    572  126c		       38		      SEC
    573  126d		       e9 03		      SBC	#3
    574  126f		       85 81		      STA	missile1x
    575  1271				   .skip15then
    576  1271				   .skipL081
    577  1271				   .L082		;  if player4y  =  20	&&  missile1y  >  150 then missile1y  =  player4y :  missile1x	=  player4x  -	3
    578  1271
    579  1271		       a5 91		      LDA	player4y
    580  1273		       c9 14		      CMP	#20
    581  1275		       d0 11		      BNE	.skipL082
    582  1277				   .condpart17
    583  1277		       a9 96		      LDA	#150
    584  1279		       c5 8b		      CMP	missile1y
    585  127b		       b0 0b		      BCS	.skip17then
    586  127d				   .condpart18
    587  127d		       a5 91		      LDA	player4y
    588  127f		       85 8b		      STA	missile1y
    589  1281		       a5 88		      LDA	player4x
    590  1283		       38		      SEC
    591  1284		       e9 03		      SBC	#3
    592  1286		       85 81		      STA	missile1x
    593  1288				   .skip17then
    594  1288				   .skipL082
    595  1288				   .
    596  1288							; 
    597  1288
    598  1288				   .L083		;  if missile0y  >  30  &&  missile0y	<  60 then AUDV1  =  2	:  AUDC1  =  12  :  AUDF1  =  7 else AUDV1  =  0  :  AUDC1  =  0 :  AUDF0  =  0
    599  1288
    600  1288		       a9 1e		      LDA	#30
    601  128a		       c5 8a		      CMP	missile0y
    602  128c		       b0 15		      BCS	.skipL083
    603  128e				   .condpart19
    604  128e		       a5 8a		      LDA	missile0y
    605  1290		       c9 3c		      CMP	#60
    606  1292		       b0 0f		      BCS	.skip19then
    607  1294				   .condpart20
    608  1294		       a9 02		      LDA	#2
    609  1296		       85 1a		      STA	AUDV1
    610  1298		       a9 0c		      LDA	#12
    611  129a		       85 16		      STA	AUDC1
    612  129c		       a9 07		      LDA	#7
    613  129e		       85 18		      STA	AUDF1
    614  12a0		       4c ab d2 	      jmp	.skipelse0
    615  12a3				   .skip19then
    616  12a3				   .skipL083
    617  12a3		       a9 00		      LDA	#0
    618  12a5		       85 1a		      STA	AUDV1
    619  12a7		       85 16		      STA	AUDC1
    620  12a9		       85 17		      STA	AUDF0
    621  12ab				   .skipelse0
    622  12ab				   .
    623  12ab							; 
    624  12ab
    625  12ab				   .L084		;  if collision(missile1,player0) then goto gameOver
    626  12ab
    627  12ab		       24 01		      bit	CXM1P
    628  12ad		       10 03		      BPL	.skipL084
    629  12af				   .condpart21
    630  12af		       4c 59 da 	      jmp	.gameOver
    631  12b2
    632  12b2				   .skipL084
    633  12b2				   .
    634  12b2							; 
    635  12b2
    636  12b2				   .L085		;  if missile1y  <  45 then misy  =  misy  +  0.4
    637  12b2
    638  12b2		       a5 8b		      LDA	missile1y
    639  12b4		       c9 2d		      CMP	#45
    640  12b6		       b0 0d		      BCS	.skipL085
    641  12b8				   .condpart22
    642  12b8		       a5 df		      LDA	i
    643  12ba		       18		      CLC
    644  12bb		       69 66		      ADC	#102
    645  12bd		       85 df		      STA	i
    646  12bf		       a5 8b		      LDA	misy
    647  12c1		       69 00		      ADC	#0
    648  12c3		       85 8b		      STA	misy
    649  12c5				   .skipL085
    650  12c5				   .L086		;  if missile1y  >  45  &&  misy  <  150  &&  _resetTicker  =	0 then misy  =	misy  - 0.4
    651  12c5
    652  12c5		       a9 2d		      LDA	#45
    653  12c7		       c5 8b		      CMP	missile1y
    654  12c9		       b0 19		      BCS	.skipL086
    655  12cb				   .condpart23
    656  12cb		       a5 8b		      LDA	misy
    657  12cd		       c9 96		      CMP	#150
    658  12cf		       b0 13		      BCS	.skip23then
    659  12d1				   .condpart24
    660  12d1		       a5 ee		      LDA	_resetTicker
    661  12d3		       c9 00		      CMP	#0
    662  12d5		       d0 0d		      BNE	.skip24then
    663  12d7				   .condpart25
    664  12d7		       a5 df		      LDA	i
    665  12d9		       38		      SEC
    666  12da		       e9 66		      SBC	#102
    667  12dc		       85 df		      STA	i
    668  12de		       a5 8b		      LDA	misy
    669  12e0		       e9 00		      SBC	#0
    670  12e2		       85 8b		      STA	misy
    671  12e4				   .skip24then
    672  12e4				   .skip23then
    673  12e4				   .skipL086
    674  12e4				   .
    675  12e4							; 
    676  12e4
    677  12e4				   .
    678  12e4							; 
    679  12e4
    680  12e4				   .
    681  12e4							; 
    682  12e4
    683  12e4				   .titlepage
    684  12e4							; titlepage
    685  12e4
    686  12e4				   .L087		;  if joy0fire  ||  switchreset then gameReady  =  1
    687  12e4
    688  12e4		       24 0c		      bit	INPT4
    689  12e6		       30 03		      BMI	.skipL087
    690  12e8				   .condpart26
    691  12e8		       4c f2 d2 	      jmp	.condpart27
    692  12eb				   .skipL087
    693  12eb		       a9 01		      lda	#1
    694  12ed		       2c 82 02 	      bit	SWCHB
    695  12f0		       d0 04		      BNE	.skip11OR
    696  12f2				   .condpart27
    697  12f2		       a9 01		      LDA	#1
    698  12f4		       85 f0		      STA	gameReady
    699  12f6				   .skip11OR
    700  12f6				   .L088		;  if gameReady  =  1 then COLUBK  =  $0  :  goto gamestart
    701  12f6
    702  12f6		       a5 f0		      LDA	gameReady
    703  12f8		       c9 01		      CMP	#1
    704  12fa		       d0 07		      BNE	.skipL088
    705  12fc				   .condpart28
    706  12fc		       a9 00		      LDA	#$0
    707  12fe		       85 09		      STA	COLUBK
    708  1300		       4c 36 d3 	      jmp	.gamestart
    709  1303
    710  1303				   .skipL088
    711  1303				   .L089		;  gosub titledrawscreen bank2
    712  1303
    713  1303		       85 d1		      sta	temp7
    714  1305		       a9 d3		      lda	#>(ret_point1-1)
    715  1307		       48		      pha
    716  1308		       a9 1a		      lda	#<(ret_point1-1)
    717  130a		       48		      pha
    718  130b		       a9 f4		      lda	#>(.titledrawscreen-1)
    719  130d		       48		      pha
    720  130e		       a9 40		      lda	#<(.titledrawscreen-1)
    721  1310		       48		      pha
    722  1311		       a5 d1		      lda	temp7
    723  1313		       48		      pha
    724  1314		       8a		      txa
    725  1315		       48		      pha
    726  1316		       a2 02		      ldx	#2
    727  1318		       4c eb ff 	      jmp	BS_jsr
    728  131b				   ret_point1
    729  131b				   .L090		;  _sc1  =  0
    730  131b
    731  131b		       a9 00		      LDA	#0
    732  131d		       85 d2		      STA	_sc1
    733  131f				   .L091		;  _sc2  =  0
    734  131f
    735  131f		       a9 00		      LDA	#0
    736  1321		       85 d3		      STA	_sc2
    737  1323				   .L092		;  _sc3  =  0
    738  1323
    739  1323		       a9 00		      LDA	#0
    740  1325		       85 d4		      STA	_sc3
    741  1327				   .L093		;  _sc1  =  _High_Score1
    742  1327
    743  1327		       a5 ea		      LDA	_High_Score1
    744  1329		       85 d2		      STA	_sc1
    745  132b				   .L094		;  _sc2  =  _High_Score2
    746  132b
    747  132b		       a5 eb		      LDA	_High_Score2
    748  132d		       85 d3		      STA	_sc2
    749  132f				   .L095		;  _sc3  =  _High_Score3
    750  132f
    751  132f		       a5 e9		      LDA	_High_Score3
    752  1331		       85 d4		      STA	_sc3
    753  1333				   .
    754  1333							; 
    755  1333
    756  1333				   .L096		;  goto titlepage
    757  1333
    758  1333		       4c e4 d2 	      jmp	.titlepage
    759  1336
    760  1336				   .
    761  1336							; 
    762  1336
    763  1336				   .gamestart
    764  1336							; gamestart
    765  1336
    766  1336				   .L097		;  if firstFrame  =  0 then _sc1  =  0 :  _sc2  =  0 :  _sc3  =  0 :  firstFrame  =  1
    767  1336
    768  1336		       a5 e8		      LDA	firstFrame
    769  1338		       c9 00		      CMP	#0
    770  133a		       d0 0c		      BNE	.skipL097
    771  133c				   .condpart29
    772  133c		       a9 00		      LDA	#0
    773  133e		       85 d2		      STA	_sc1
    774  1340		       85 d3		      STA	_sc2
    775  1342		       85 d4		      STA	_sc3
    776  1344		       a9 01		      LDA	#1
    777  1346		       85 e8		      STA	firstFrame
    778  1348				   .skipL097
    779  1348				   .
    780  1348							; 
    781  1348
    782  1348				   .
    783  1348							; 
    784  1348
    785  1348				   .L098		;  if _sc1  >	_High_Score1 then goto __New_High_Score
    786  1348
    787  1348		       a5 ea		      LDA	_High_Score1
    788  134a		       c5 d2		      CMP	_sc1
    789  134c		       b0 03		      BCS	.skipL098
    790  134e				   .condpart30
    791  134e		       4c 81 d3 	      jmp	.__New_High_Score
    792  1351
    793  1351				   .skipL098
    794  1351				   .L099		;  if _sc1  <	_High_Score1 then goto __Skip_High_Score
    795  1351
    796  1351		       a5 d2		      LDA	_sc1
    797  1353		       c5 ea		      CMP	_High_Score1
    798  1355		       b0 03		      BCS	.skipL099
    799  1357				   .condpart31
    800  1357		       4c 8d d3 	      jmp	.__Skip_High_Score
    801  135a
    802  135a				   .skipL099
    803  135a				   .L0100		;  if _sc2  >	_High_Score2 then goto __New_High_Score
    804  135a
    805  135a		       a5 eb		      LDA	_High_Score2
    806  135c		       c5 d3		      CMP	_sc2
    807  135e		       b0 03		      BCS	.skipL0100
    808  1360				   .condpart32
    809  1360		       4c 81 d3 	      jmp	.__New_High_Score
    810  1363
    811  1363				   .skipL0100
    812  1363				   .L0101		;  if _sc2  <	_High_Score2 then goto __Skip_High_Score
    813  1363
    814  1363		       a5 d3		      LDA	_sc2
    815  1365		       c5 eb		      CMP	_High_Score2
    816  1367		       b0 03		      BCS	.skipL0101
    817  1369				   .condpart33
    818  1369		       4c 8d d3 	      jmp	.__Skip_High_Score
    819  136c
    820  136c				   .skipL0101
    821  136c				   .
    822  136c							; 
    823  136c
    824  136c				   .L0102		;  if _sc3  >	_High_Score3 then goto __New_High_Score
    825  136c
    826  136c		       a5 e9		      LDA	_High_Score3
    827  136e		       c5 d4		      CMP	_sc3
    828  1370		       b0 03		      BCS	.skipL0102
    829  1372				   .condpart34
    830  1372		       4c 81 d3 	      jmp	.__New_High_Score
    831  1375
    832  1375				   .skipL0102
    833  1375				   .L0103		;  if _sc3  <	_High_Score3 then goto __Skip_High_Score
    834  1375
    835  1375		       a5 d4		      LDA	_sc3
    836  1377		       c5 e9		      CMP	_High_Score3
    837  1379		       b0 03		      BCS	.skipL0103
    838  137b				   .condpart35
    839  137b		       4c 8d d3 	      jmp	.__Skip_High_Score
    840  137e
    841  137e				   .skipL0103
    842  137e				   .
    843  137e							; 
    844  137e
    845  137e				   .L0104		;  goto __Skip_High_Score
    846  137e
    847  137e		       4c 8d d3 	      jmp	.__Skip_High_Score
    848  1381
    849  1381				   .
    850  1381							; 
    851  1381
    852  1381				   .
    853  1381							; 
    854  1381
    855  1381				   .__New_High_Score
    856  1381							; __New_High_Score
    857  1381
    858  1381				   .
    859  1381							; 
    860  1381
    861  1381				   .L0105		;  _High_Score1  =  _sc1  :  _High_Score2  =  _sc2  :	_High_Score3  =  _sc3
    862  1381
    863  1381		       a5 d2		      LDA	_sc1
    864  1383		       85 ea		      STA	_High_Score1
    865  1385		       a5 d3		      LDA	_sc2
    866  1387		       85 eb		      STA	_High_Score2
    867  1389		       a5 d4		      LDA	_sc3
    868  138b		       85 e9		      STA	_High_Score3
    869  138d				   .__Skip_High_Score
    870  138d							; __Skip_High_Score
    871  138d
    872  138d				   .
    873  138d							; 
    874  138d
    875  138d				   .
    876  138d							; 
    877  138d
    878  138d				   .
    879  138d							; 
    880  138d
    881  138d				   .L0106		;  if player0y  >  50 then player0:
    882  138d
    883  138d		       a9 32		      LDA	#50
    884  138f		       c5 8d		      CMP	player0y
    885  1391		       b0 0c		      BCS	.skipL0106
    886  1393				   .condpart36
    887  1393		       a2 6a		      LDX	#<player36then_0
    888  1395		       86 a2		      STX	player0pointerlo
    889  1397		       a9 fe		      LDA	#>player36then_0
    890  1399		       85 a3		      STA	player0pointerhi
    891  139b		       a9 09		      LDA	#9
    892  139d		       85 b0		      STA	player0height
    893  139f				   .skipL0106
    894  139f				   .
    895  139f							; 
    896  139f
    897  139f				   .L0107		;  if player0y  <  50 then player0:
    898  139f
    899  139f		       a5 8d		      LDA	player0y
    900  13a1		       c9 32		      CMP	#50
    901  13a3		       b0 0c		      BCS	.skipL0107
    902  13a5				   .condpart37
    903  13a5		       a2 73		      LDX	#<player37then_0
    904  13a7		       86 a2		      STX	player0pointerlo
    905  13a9		       a9 fe		      LDA	#>player37then_0
    906  13ab		       85 a3		      STA	player0pointerhi
    907  13ad		       a9 09		      LDA	#9
    908  13af		       85 b0		      STA	player0height
    909  13b1				   .skipL0107
    910  13b1				   .
    911  13b1							; 
    912  13b1
    913  13b1				   .
    914  13b1							; 
    915  13b1
    916  13b1				   .L0108		;  if ticker  <  5 then player2:
    917  13b1
    918  13b1		       a5 e2		      LDA	ticker
    919  13b3		       c9 05		      CMP	#5
    920  13b5		       b0 0c		      BCS	.skipL0108
    921  13b7				   .condpart38
    922  13b7		       a2 7c		      LDX	#<player38then_2
    923  13b9		       86 a7		      STX	player2pointerlo
    924  13bb		       a9 fe		      LDA	#>player38then_2
    925  13bd		       85 ac		      STA	player2pointerhi
    926  13bf		       a9 09		      LDA	#9
    927  13c1		       85 b2		      STA	player2height
    928  13c3				   .skipL0108
    929  13c3				   .
    930  13c3							; 
    931  13c3
    932  13c3				   .L0109		;  if ticker  >=  5 then player2:
    933  13c3
    934  13c3		       a5 e2		      LDA	ticker
    935  13c5		       c9 05		      CMP	#5
    936  13c7		       90 0c		      BCC	.skipL0109
    937  13c9				   .condpart39
    938  13c9		       a2 84		      LDX	#<player39then_2
    939  13cb		       86 a7		      STX	player2pointerlo
    940  13cd		       a9 fe		      LDA	#>player39then_2
    941  13cf		       85 ac		      STA	player2pointerhi
    942  13d1		       a9 09		      LDA	#9
    943  13d3		       85 b2		      STA	player2height
    944  13d5				   .skipL0109
    945  13d5				   .
    946  13d5							; 
    947  13d5
    948  13d5				   .
    949  13d5							; 
    950  13d5
    951  13d5				   .L0110		;  if switchSprite  >	0 then player2:
    952  13d5
    953  13d5		       a9 00		      LDA	#0
    954  13d7		       c5 e6		      CMP	switchSprite
    955  13d9		       b0 0c		      BCS	.skipL0110
    956  13db				   .condpart40
    957  13db		       a2 8c		      LDX	#<player40then_2
    958  13dd		       86 a7		      STX	player2pointerlo
    959  13df		       a9 fe		      LDA	#>player40then_2
    960  13e1		       85 ac		      STA	player2pointerhi
    961  13e3		       a9 09		      LDA	#9
    962  13e5		       85 b2		      STA	player2height
    963  13e7				   .skipL0110
    964  13e7				   .
    965  13e7							; 
    966  13e7
    967  13e7				   .
    968  13e7							; 
    969  13e7
    970  13e7				   .L0111		;  if ticker  <  5 then player4:
    971  13e7
    972  13e7		       a5 e2		      LDA	ticker
    973  13e9		       c9 05		      CMP	#5
    974  13eb		       b0 0c		      BCS	.skipL0111
    975  13ed				   .condpart41
    976  13ed		       a2 94		      LDX	#<player41then_4
    977  13ef		       86 a9		      STX	player4pointerlo
    978  13f1		       a9 fe		      LDA	#>player41then_4
    979  13f3		       85 ae		      STA	player4pointerhi
    980  13f5		       a9 09		      LDA	#9
    981  13f7		       85 b4		      STA	player4height
    982  13f9				   .skipL0111
    983  13f9				   .
    984  13f9							; 
    985  13f9
    986  13f9				   .L0112		;  if ticker  >=  5 then player4:
    987  13f9
    988  13f9		       a5 e2		      LDA	ticker
    989  13fb		       c9 05		      CMP	#5
    990  13fd		       90 0c		      BCC	.skipL0112
    991  13ff				   .condpart42
    992  13ff		       a2 9c		      LDX	#<player42then_4
    993  1401		       86 a9		      STX	player4pointerlo
    994  1403		       a9 fe		      LDA	#>player42then_4
    995  1405		       85 ae		      STA	player4pointerhi
    996  1407		       a9 09		      LDA	#9
    997  1409		       85 b4		      STA	player4height
    998  140b				   .skipL0112
    999  140b				   .
   1000  140b							; 
   1001  140b
   1002  140b				   .L0113		;  if explosionTicker	=  1 then player5:
   1003  140b
   1004  140b		       a5 dc		      LDA	explosionTicker
   1005  140d		       c9 01		      CMP	#1
   1006  140f		       d0 0c		      BNE	.skipL0113
   1007  1411				   .condpart43
   1008  1411		       a2 a4		      LDX	#<player43then_5
   1009  1413		       86 aa		      STX	player5pointerlo
   1010  1415		       a9 fe		      LDA	#>player43then_5
   1011  1417		       85 af		      STA	player5pointerhi
   1012  1419		       a9 09		      LDA	#9
   1013  141b		       85 b5		      STA	player5height
   1014  141d				   .skipL0113
   1015  141d				   .
   1016  141d							; 
   1017  141d
   1018  141d				   .L0114		;  if explosionTicker	=  2 then player5:
   1019  141d
   1020  141d		       a5 dc		      LDA	explosionTicker
   1021  141f		       c9 02		      CMP	#2
   1022  1421		       d0 0c		      BNE	.skipL0114
   1023  1423				   .condpart44
   1024  1423		       a2 ac		      LDX	#<player44then_5
   1025  1425		       86 aa		      STX	player5pointerlo
   1026  1427		       a9 fe		      LDA	#>player44then_5
   1027  1429		       85 af		      STA	player5pointerhi
   1028  142b		       a9 09		      LDA	#9
   1029  142d		       85 b5		      STA	player5height
   1030  142f				   .skipL0114
   1031  142f				   .
   1032  142f							; 
   1033  142f
   1034  142f				   .L0115		;  if explosionTicker	=  3 then player5:
   1035  142f
   1036  142f		       a5 dc		      LDA	explosionTicker
   1037  1431		       c9 03		      CMP	#3
   1038  1433		       d0 0c		      BNE	.skipL0115
   1039  1435				   .condpart45
   1040  1435		       a2 b4		      LDX	#<player45then_5
   1041  1437		       86 aa		      STX	player5pointerlo
   1042  1439		       a9 fe		      LDA	#>player45then_5
   1043  143b		       85 af		      STA	player5pointerhi
   1044  143d		       a9 09		      LDA	#9
   1045  143f		       85 b5		      STA	player5height
   1046  1441				   .skipL0115
   1047  1441				   .
   1048  1441							; 
   1049  1441
   1050  1441				   .
   1051  1441							; 
   1052  1441
   1053  1441				   .
   1054  1441							; 
   1055  1441
   1056  1441				   .
   1057  1441							; 
   1058  1441
   1059  1441				   .
   1060  1441							; 
   1061  1441
   1062  1441				   .
   1063  1441							; 
   1064  1441
   1065  1441				   .
   1066  1441							; 
   1067  1441
   1068  1441				   .L0116		;  if player1y  >  40	&&  player1y  <  56 then goto gameOver
   1069  1441
   1070  1441		       a9 28		      LDA	#40
   1071  1443		       c5 8e		      CMP	player1y
   1072  1445		       b0 09		      BCS	.skipL0116
   1073  1447				   .condpart46
   1074  1447		       a5 8e		      LDA	player1y
   1075  1449		       c9 38		      CMP	#56
   1076  144b		       b0 03		      BCS	.skip46then
   1077  144d				   .condpart47
   1078  144d		       4c 59 da 	      jmp	.gameOver
   1079  1450
   1080  1450				   .skip46then
   1081  1450				   .skipL0116
   1082  1450				   .L0117		;  if player2y  >  40	&&  player2y  <  56 then goto gameOver
   1083  1450
   1084  1450		       a9 28		      LDA	#40
   1085  1452		       c5 8f		      CMP	player2y
   1086  1454		       b0 09		      BCS	.skipL0117
   1087  1456				   .condpart48
   1088  1456		       a5 8f		      LDA	player2y
   1089  1458		       c9 38		      CMP	#56
   1090  145a		       b0 03		      BCS	.skip48then
   1091  145c				   .condpart49
   1092  145c		       4c 59 da 	      jmp	.gameOver
   1093  145f
   1094  145f				   .skip48then
   1095  145f				   .skipL0117
   1096  145f				   .L0118		;  if player3y  >  40	&&  player3y  <  56 then goto gameOver
   1097  145f
   1098  145f		       a9 28		      LDA	#40
   1099  1461		       c5 90		      CMP	player3y
   1100  1463		       b0 09		      BCS	.skipL0118
   1101  1465				   .condpart50
   1102  1465		       a5 90		      LDA	player3y
   1103  1467		       c9 38		      CMP	#56
   1104  1469		       b0 03		      BCS	.skip50then
   1105  146b				   .condpart51
   1106  146b		       4c 59 da 	      jmp	.gameOver
   1107  146e
   1108  146e				   .skip50then
   1109  146e				   .skipL0118
   1110  146e				   .L0119		;  if player4y  >  40	&&  player4y  <  56 then goto gameOver
   1111  146e
   1112  146e		       a9 28		      LDA	#40
   1113  1470		       c5 91		      CMP	player4y
   1114  1472		       b0 09		      BCS	.skipL0119
   1115  1474				   .condpart52
   1116  1474		       a5 91		      LDA	player4y
   1117  1476		       c9 38		      CMP	#56
   1118  1478		       b0 03		      BCS	.skip52then
   1119  147a				   .condpart53
   1120  147a		       4c 59 da 	      jmp	.gameOver
   1121  147d
   1122  147d				   .skip52then
   1123  147d				   .skipL0119
   1124  147d				   .
   1125  147d							; 
   1126  147d
   1127  147d				   .L0120		;  if missile1y  >  40  &&  missile1y	<  48 then missile1y  =  200
   1128  147d
   1129  147d		       a9 28		      LDA	#40
   1130  147f		       c5 8b		      CMP	missile1y
   1131  1481		       b0 0a		      BCS	.skipL0120
   1132  1483				   .condpart54
   1133  1483		       a5 8b		      LDA	missile1y
   1134  1485		       c9 30		      CMP	#48
   1135  1487		       b0 04		      BCS	.skip54then
   1136  1489				   .condpart55
   1137  1489		       a9 c8		      LDA	#200
   1138  148b		       85 8b		      STA	missile1y
   1139  148d				   .skip54then
   1140  148d				   .skipL0120
   1141  148d				   .
   1142  148d							; 
   1143  148d
   1144  148d				   .
   1145  148d							; 
   1146  148d
   1147  148d				   .
   1148  148d							; 
   1149  148d
   1150  148d				   .L0121		;  if missile0y  >  100 then goto skip
   1151  148d
   1152  148d		       a9 64		      LDA	#100
   1153  148f		       c5 8a		      CMP	missile0y
   1154  1491		       b0 03		      BCS	.skipL0121
   1155  1493				   .condpart56
   1156  1493		       4c bf d4 	      jmp	.skip
   1157  1496
   1158  1496				   .skipL0121
   1159  1496				   .L0122		;  if missile0y  <  0 then goto skip
   1160  1496
   1161  1496		       a5 8a		      LDA	missile0y
   1162  1498		       c9 00		      CMP	#0
   1163  149a		       b0 03		      BCS	.skipL0122
   1164  149c				   .condpart57
   1165  149c		       4c bf d4 	      jmp	.skip
   1166  149f
   1167  149f				   .skipL0122
   1168  149f				   .
   1169  149f							; 
   1170  149f
   1171  149f				   .
   1172  149f							; 
   1173  149f
   1174  149f				   .
   1175  149f							; 
   1176  149f
   1177  149f				   .
   1178  149f							; 
   1179  149f
   1180  149f				   .
   1181  149f							; 
   1182  149f
   1183  149f				   .L0123		;  if missile0y  <  50 then missile0y	=  missile0y - 2 : goto draw_loop
   1184  149f
   1185  149f		       a5 8a		      LDA	missile0y
   1186  14a1		       c9 32		      CMP	#50
   1187  14a3		       b0 0a		      BCS	.skipL0123
   1188  14a5				   .condpart58
   1189  14a5		       a5 8a		      LDA	missile0y
   1190  14a7		       38		      SEC
   1191  14a8		       e9 02		      SBC	#2
   1192  14aa		       85 8a		      STA	missile0y
   1193  14ac		       4c d7 d4 	      jmp	.draw_loop
   1194  14af
   1195  14af				   .skipL0123
   1196  14af				   .L0124		;  if missile0y  >  50 then missile0y	=  missile0y + 2 : goto draw_loop
   1197  14af
   1198  14af		       a9 32		      LDA	#50
   1199  14b1		       c5 8a		      CMP	missile0y
   1200  14b3		       b0 0a		      BCS	.skipL0124
   1201  14b5				   .condpart59
   1202  14b5		       a5 8a		      LDA	missile0y
   1203  14b7		       18		      CLC
   1204  14b8		       69 02		      ADC	#2
   1205  14ba		       85 8a		      STA	missile0y
   1206  14bc		       4c d7 d4 	      jmp	.draw_loop
   1207  14bf
   1208  14bf				   .skipL0124
   1209  14bf				   .
   1210  14bf							; 
   1211  14bf
   1212  14bf				   .
   1213  14bf							; 
   1214  14bf
   1215  14bf				   .skip
   1216  14bf							; skip
   1217  14bf
   1218  14bf				   .L0125		;  if joy0fire  &&  player5y  >  150 then missile0y  =  player0y  -  4 : missile0x  =	player0x  +  5
   1219  14bf
   1220  14bf		       24 0c		      bit	INPT4
   1221  14c1		       30 14		      BMI	.skipL0125
   1222  14c3				   .condpart60
   1223  14c3		       a9 96		      LDA	#150
   1224  14c5		       c5 92		      CMP	player5y
   1225  14c7		       b0 0e		      BCS	.skip60then
   1226  14c9				   .condpart61
   1227  14c9		       a5 8d		      LDA	player0y
   1228  14cb		       38		      SEC
   1229  14cc		       e9 04		      SBC	#4
   1230  14ce		       85 8a		      STA	missile0y
   1231  14d0		       a5 84		      LDA	player0x
   1232  14d2		       18		      CLC
   1233  14d3		       69 05		      ADC	#5
   1234  14d5		       85 80		      STA	missile0x
   1235  14d7				   .skip60then
   1236  14d7				   .skipL0125
   1237  14d7				   .draw_loop
   1238  14d7							; draw_loop
   1239  14d7
   1240  14d7				   .L0126		;  if joy0right  &&  player0x	<  134 then player0x  =  player0x + 1
   1241  14d7
   1242  14d7		       2c 80 02 	      bit	SWCHA
   1243  14da		       30 08		      BMI	.skipL0126
   1244  14dc				   .condpart62
   1245  14dc		       a5 84		      LDA	player0x
   1246  14de		       c9 86		      CMP	#134
   1247  14e0		       b0 02		      BCS	.skip62then
   1248  14e2				   .condpart63
   1249  14e2		       e6 84		      INC	player0x
   1250  14e4				   .skip62then
   1251  14e4				   .skipL0126
   1252  14e4				   .L0127		;  if joy0left  &&  player0x  >  19 then player0x  =  player0x - 1
   1253  14e4
   1254  14e4		       2c 80 02 	      bit	SWCHA
   1255  14e7		       70 08		      BVS	.skipL0127
   1256  14e9				   .condpart64
   1257  14e9		       a9 13		      LDA	#19
   1258  14eb		       c5 84		      CMP	player0x
   1259  14ed		       b0 02		      BCS	.skip64then
   1260  14ef				   .condpart65
   1261  14ef		       c6 84		      DEC	player0x
   1262  14f1				   .skip64then
   1263  14f1				   .skipL0127
   1264  14f1				   .L0128		;  if joy0down then player0y  =  44
   1265  14f1
   1266  14f1		       a9 20		      lda	#$20
   1267  14f3		       2c 80 02 	      bit	SWCHA
   1268  14f6		       d0 04		      BNE	.skipL0128
   1269  14f8				   .condpart66
   1270  14f8		       a9 2c		      LDA	#44
   1271  14fa		       85 8d		      STA	player0y
   1272  14fc				   .skipL0128
   1273  14fc				   .L0129		;  if joy0up then player0y  =	57
   1274  14fc
   1275  14fc		       a9 10		      lda	#$10
   1276  14fe		       2c 80 02 	      bit	SWCHA
   1277  1501		       d0 04		      BNE	.skipL0129
   1278  1503				   .condpart67
   1279  1503		       a9 39		      LDA	#57
   1280  1505		       85 8d		      STA	player0y
   1281  1507				   .skipL0129
   1282  1507				   .
   1283  1507							; 
   1284  1507
   1285  1507				   .
   1286  1507							; 
   1287  1507
   1288  1507				   .L0130		;  if collision(missile0,player1) then goto collisions
   1289  1507
   1290  1507		       24 00		      bit	CXM0P
   1291  1509		       10 03		      BPL	.skipL0130
   1292  150b				   .condpart68
   1293  150b		       4c 33 d9 	      jmp	.collisions
   1294  150e
   1295  150e				   .skipL0130
   1296  150e				   .
   1297  150e							; 
   1298  150e
   1299  150e				   .L0131		;  if player1x  <  28	||  player1x  >  141 then player1x  =  60
   1300  150e
   1301  150e		       a5 85		      LDA	player1x
   1302  1510		       c9 1c		      CMP	#28
   1303  1512		       b0 03		      BCS	.skipL0131
   1304  1514				   .condpart69
   1305  1514		       4c 1d d5 	      jmp	.condpart70
   1306  1517				   .skipL0131
   1307  1517		       a9 8d		      LDA	#141
   1308  1519		       c5 85		      CMP	player1x
   1309  151b		       b0 04		      BCS	.skip20OR
   1310  151d				   .condpart70
   1311  151d		       a9 3c		      LDA	#60
   1312  151f		       85 85		      STA	player1x
   1313  1521				   .skip20OR
   1314  1521				   .L0132		;  if player2x  <  28	||  player2x  >  141 then player2x  =  60
   1315  1521
   1316  1521		       a5 86		      LDA	player2x
   1317  1523		       c9 1c		      CMP	#28
   1318  1525		       b0 03		      BCS	.skipL0132
   1319  1527				   .condpart71
   1320  1527		       4c 30 d5 	      jmp	.condpart72
   1321  152a				   .skipL0132
   1322  152a		       a9 8d		      LDA	#141
   1323  152c		       c5 86		      CMP	player2x
   1324  152e		       b0 04		      BCS	.skip21OR
   1325  1530				   .condpart72
   1326  1530		       a9 3c		      LDA	#60
   1327  1532		       85 86		      STA	player2x
   1328  1534				   .skip21OR
   1329  1534				   .L0133		;  if player3x  <  28	||  player3x  >  141 then player3x  =  60
   1330  1534
   1331  1534		       a5 87		      LDA	player3x
   1332  1536		       c9 1c		      CMP	#28
   1333  1538		       b0 03		      BCS	.skipL0133
   1334  153a				   .condpart73
   1335  153a		       4c 43 d5 	      jmp	.condpart74
   1336  153d				   .skipL0133
   1337  153d		       a9 8d		      LDA	#141
   1338  153f		       c5 87		      CMP	player3x
   1339  1541		       b0 04		      BCS	.skip22OR
   1340  1543				   .condpart74
   1341  1543		       a9 3c		      LDA	#60
   1342  1545		       85 87		      STA	player3x
   1343  1547				   .skip22OR
   1344  1547				   .L0134		;  if player4x  <  28	||  player2x  >  141 then player4x  =  60
   1345  1547
   1346  1547		       a5 88		      LDA	player4x
   1347  1549		       c9 1c		      CMP	#28
   1348  154b		       b0 03		      BCS	.skipL0134
   1349  154d				   .condpart75
   1350  154d		       4c 56 d5 	      jmp	.condpart76
   1351  1550				   .skipL0134
   1352  1550		       a9 8d		      LDA	#141
   1353  1552		       c5 86		      CMP	player2x
   1354  1554		       b0 04		      BCS	.skip23OR
   1355  1556				   .condpart76
   1356  1556		       a9 3c		      LDA	#60
   1357  1558		       85 88		      STA	player4x
   1358  155a				   .skip23OR
   1359  155a				   .
   1360  155a							; 
   1361  155a
   1362  155a				   .
   1363  155a							; 
   1364  155a
   1365  155a				   .frameReset
   1366  155a							; frameReset
   1367  155a
   1368  155a				   .
   1369  155a							; 
   1370  155a
   1371  155a				   .
   1372  155a							; 
   1373  155a
   1374  155a				   .
   1375  155a							; 
   1376  155a
   1377  155a				   .
   1378  155a							; 
   1379  155a
   1380  155a				   .
   1381  155a							; 
   1382  155a
   1383  155a				   .
   1384  155a							; 
   1385  155a
   1386  155a				   .L0135		;  if _sc3  <	60  &&	_sc2  <  1 then goto slow
   1387  155a
   1388  155a		       a5 d4		      LDA	_sc3
   1389  155c		       c9 3c		      CMP	#60
   1390  155e		       b0 09		      BCS	.skipL0135
   1391  1560				   .condpart77
   1392  1560		       a5 d3		      LDA	_sc2
   1393  1562		       c9 01		      CMP	#1
   1394  1564		       b0 03		      BCS	.skip77then
   1395  1566				   .condpart78
   1396  1566		       4c a8 d6 	      jmp	.slow
   1397  1569
   1398  1569				   .skip77then
   1399  1569				   .skipL0135
   1400  1569				   .
   1401  1569							; 
   1402  1569
   1403  1569				   .L0136		;  if _sc2  <	1 then goto fast
   1404  1569
   1405  1569		       a5 d3		      LDA	_sc2
   1406  156b		       c9 01		      CMP	#1
   1407  156d		       b0 03		      BCS	.skipL0136
   1408  156f				   .condpart79
   1409  156f		       4c 0d d6 	      jmp	.fast
   1410  1572
   1411  1572				   .skipL0136
   1412  1572				   .
   1413  1572							; 
   1414  1572
   1415  1572				   .
   1416  1572							; 
   1417  1572
   1418  1572				   .L0137		;  if asteroidY  <  50 then asteroidY	=  asteroidY  +  0.19
   1419  1572
   1420  1572		       a5 8e		      LDA	asteroidY
   1421  1574		       c9 32		      CMP	#50
   1422  1576		       b0 0d		      BCS	.skipL0137
   1423  1578				   .condpart80
   1424  1578		       a5 d8		      LDA	b
   1425  157a		       18		      CLC
   1426  157b		       69 30		      ADC	#48
   1427  157d		       85 d8		      STA	b
   1428  157f		       a5 8e		      LDA	asteroidY
   1429  1581		       69 00		      ADC	#0
   1430  1583		       85 8e		      STA	asteroidY
   1431  1585				   .skipL0137
   1432  1585				   .L0138		;  if asteroidY  >  50 then asteroidY	=  asteroidY  -  0.19
   1433  1585
   1434  1585		       a9 32		      LDA	#50
   1435  1587		       c5 8e		      CMP	asteroidY
   1436  1589		       b0 0d		      BCS	.skipL0138
   1437  158b				   .condpart81
   1438  158b		       a5 d8		      LDA	b
   1439  158d		       38		      SEC
   1440  158e		       e9 30		      SBC	#48
   1441  1590		       85 d8		      STA	b
   1442  1592		       a5 8e		      LDA	asteroidY
   1443  1594		       e9 00		      SBC	#0
   1444  1596		       85 8e		      STA	asteroidY
   1445  1598				   .skipL0138
   1446  1598				   .
   1447  1598							; 
   1448  1598
   1449  1598				   .L0139		;  if asteroid2Y  <  50 then asteroid2Y  =  asteroid2Y  +  0.21
   1450  1598
   1451  1598		       a5 8f		      LDA	asteroid2Y
   1452  159a		       c9 32		      CMP	#50
   1453  159c		       b0 0d		      BCS	.skipL0139
   1454  159e				   .condpart82
   1455  159e		       a5 d9		      LDA	c
   1456  15a0		       18		      CLC
   1457  15a1		       69 35		      ADC	#53
   1458  15a3		       85 d9		      STA	c
   1459  15a5		       a5 8f		      LDA	asteroid2Y
   1460  15a7		       69 00		      ADC	#0
   1461  15a9		       85 8f		      STA	asteroid2Y
   1462  15ab				   .skipL0139
   1463  15ab				   .L0140		;  if asteroid2Y  >  50 then asteroid2Y  =  asteroid2Y  -  0.21
   1464  15ab
   1465  15ab		       a9 32		      LDA	#50
   1466  15ad		       c5 8f		      CMP	asteroid2Y
   1467  15af		       b0 0d		      BCS	.skipL0140
   1468  15b1				   .condpart83
   1469  15b1		       a5 d9		      LDA	c
   1470  15b3		       38		      SEC
   1471  15b4		       e9 35		      SBC	#53
   1472  15b6		       85 d9		      STA	c
   1473  15b8		       a5 8f		      LDA	asteroid2Y
   1474  15ba		       e9 00		      SBC	#0
   1475  15bc		       85 8f		      STA	asteroid2Y
   1476  15be				   .skipL0140
   1477  15be				   .
   1478  15be							; 
   1479  15be
   1480  15be				   .L0141		;  if asteroid3Y  <  50 then asteroid3Y  =  asteroid3Y  +  0.22
   1481  15be
   1482  15be		       a5 90		      LDA	asteroid3Y
   1483  15c0		       c9 32		      CMP	#50
   1484  15c2		       b0 0d		      BCS	.skipL0141
   1485  15c4				   .condpart84
   1486  15c4		       a5 da		      LDA	d
   1487  15c6		       18		      CLC
   1488  15c7		       69 38		      ADC	#56
   1489  15c9		       85 da		      STA	d
   1490  15cb		       a5 90		      LDA	asteroid3Y
   1491  15cd		       69 00		      ADC	#0
   1492  15cf		       85 90		      STA	asteroid3Y
   1493  15d1				   .skipL0141
   1494  15d1				   .L0142		;  if asteroid3Y  >  50 then asteroid3Y  =  asteroid3Y  -  0.22
   1495  15d1
   1496  15d1		       a9 32		      LDA	#50
   1497  15d3		       c5 90		      CMP	asteroid3Y
   1498  15d5		       b0 0d		      BCS	.skipL0142
   1499  15d7				   .condpart85
   1500  15d7		       a5 da		      LDA	d
   1501  15d9		       38		      SEC
   1502  15da		       e9 38		      SBC	#56
   1503  15dc		       85 da		      STA	d
   1504  15de		       a5 90		      LDA	asteroid3Y
   1505  15e0		       e9 00		      SBC	#0
   1506  15e2		       85 90		      STA	asteroid3Y
   1507  15e4				   .skipL0142
   1508  15e4				   .
   1509  15e4							; 
   1510  15e4
   1511  15e4				   .L0143		;  if asteroid4Y  <  50 then asteroid4Y  =  asteroid4Y  +  0.16
   1512  15e4
   1513  15e4		       a5 91		      LDA	asteroid4Y
   1514  15e6		       c9 32		      CMP	#50
   1515  15e8		       b0 0d		      BCS	.skipL0143
   1516  15ea				   .condpart86
   1517  15ea		       a5 db		      LDA	e
   1518  15ec		       18		      CLC
   1519  15ed		       69 28		      ADC	#40
   1520  15ef		       85 db		      STA	e
   1521  15f1		       a5 91		      LDA	asteroid4Y
   1522  15f3		       69 00		      ADC	#0
   1523  15f5		       85 91		      STA	asteroid4Y
   1524  15f7				   .skipL0143
   1525  15f7				   .L0144		;  if asteroid4Y  >  50 then asteroid4Y  =  asteroid4Y  -  0.16
   1526  15f7
   1527  15f7		       a9 32		      LDA	#50
   1528  15f9		       c5 91		      CMP	asteroid4Y
   1529  15fb		       b0 0d		      BCS	.skipL0144
   1530  15fd				   .condpart87
   1531  15fd		       a5 db		      LDA	e
   1532  15ff		       38		      SEC
   1533  1600		       e9 28		      SBC	#40
   1534  1602		       85 db		      STA	e
   1535  1604		       a5 91		      LDA	asteroid4Y
   1536  1606		       e9 00		      SBC	#0
   1537  1608		       85 91		      STA	asteroid4Y
   1538  160a				   .skipL0144
   1539  160a				   .
   1540  160a							; 
   1541  160a
   1542  160a				   .L0145		;  goto resetScreen
   1543  160a
   1544  160a		       4c 64 d7 	      jmp	.resetScreen
   1545  160d
   1546  160d				   .
   1547  160d							; 
   1548  160d
   1549  160d				   .fast
   1550  160d							; fast
   1551  160d
   1552  160d				   .L0146		;  if asteroidY  <  50 then asteroidY	=  asteroidY  +  0.15
   1553  160d
   1554  160d		       a5 8e		      LDA	asteroidY
   1555  160f		       c9 32		      CMP	#50
   1556  1611		       b0 0d		      BCS	.skipL0146
   1557  1613				   .condpart88
   1558  1613		       a5 d8		      LDA	b
   1559  1615		       18		      CLC
   1560  1616		       69 26		      ADC	#38
   1561  1618		       85 d8		      STA	b
   1562  161a		       a5 8e		      LDA	asteroidY
   1563  161c		       69 00		      ADC	#0
   1564  161e		       85 8e		      STA	asteroidY
   1565  1620				   .skipL0146
   1566  1620				   .L0147		;  if asteroidY  >  50 then asteroidY	=  asteroidY  -  0.15
   1567  1620
   1568  1620		       a9 32		      LDA	#50
   1569  1622		       c5 8e		      CMP	asteroidY
   1570  1624		       b0 0d		      BCS	.skipL0147
   1571  1626				   .condpart89
   1572  1626		       a5 d8		      LDA	b
   1573  1628		       38		      SEC
   1574  1629		       e9 26		      SBC	#38
   1575  162b		       85 d8		      STA	b
   1576  162d		       a5 8e		      LDA	asteroidY
   1577  162f		       e9 00		      SBC	#0
   1578  1631		       85 8e		      STA	asteroidY
   1579  1633				   .skipL0147
   1580  1633				   .
   1581  1633							; 
   1582  1633
   1583  1633				   .L0148		;  if asteroid2Y  <  50 then asteroid2Y  =  asteroid2Y  +  0.17
   1584  1633
   1585  1633		       a5 8f		      LDA	asteroid2Y
   1586  1635		       c9 32		      CMP	#50
   1587  1637		       b0 0d		      BCS	.skipL0148
   1588  1639				   .condpart90
   1589  1639		       a5 d9		      LDA	c
   1590  163b		       18		      CLC
   1591  163c		       69 2b		      ADC	#43
   1592  163e		       85 d9		      STA	c
   1593  1640		       a5 8f		      LDA	asteroid2Y
   1594  1642		       69 00		      ADC	#0
   1595  1644		       85 8f		      STA	asteroid2Y
   1596  1646				   .skipL0148
   1597  1646				   .L0149		;  if asteroid2Y  >  50 then asteroid2Y  =  asteroid2Y  -  0.17
   1598  1646
   1599  1646		       a9 32		      LDA	#50
   1600  1648		       c5 8f		      CMP	asteroid2Y
   1601  164a		       b0 0d		      BCS	.skipL0149
   1602  164c				   .condpart91
   1603  164c		       a5 d9		      LDA	c
   1604  164e		       38		      SEC
   1605  164f		       e9 2b		      SBC	#43
   1606  1651		       85 d9		      STA	c
   1607  1653		       a5 8f		      LDA	asteroid2Y
   1608  1655		       e9 00		      SBC	#0
   1609  1657		       85 8f		      STA	asteroid2Y
   1610  1659				   .skipL0149
   1611  1659				   .
   1612  1659							; 
   1613  1659
   1614  1659				   .L0150		;  if asteroid3Y  <  50 then asteroid3Y  =  asteroid3Y  +  0.19
   1615  1659
   1616  1659		       a5 90		      LDA	asteroid3Y
   1617  165b		       c9 32		      CMP	#50
   1618  165d		       b0 0d		      BCS	.skipL0150
   1619  165f				   .condpart92
   1620  165f		       a5 da		      LDA	d
   1621  1661		       18		      CLC
   1622  1662		       69 30		      ADC	#48
   1623  1664		       85 da		      STA	d
   1624  1666		       a5 90		      LDA	asteroid3Y
   1625  1668		       69 00		      ADC	#0
   1626  166a		       85 90		      STA	asteroid3Y
   1627  166c				   .skipL0150
   1628  166c				   .L0151		;  if asteroid3Y  >  50 then asteroid3Y  =  asteroid3Y  -  0.19
   1629  166c
   1630  166c		       a9 32		      LDA	#50
   1631  166e		       c5 90		      CMP	asteroid3Y
   1632  1670		       b0 0d		      BCS	.skipL0151
   1633  1672				   .condpart93
   1634  1672		       a5 da		      LDA	d
   1635  1674		       38		      SEC
   1636  1675		       e9 30		      SBC	#48
   1637  1677		       85 da		      STA	d
   1638  1679		       a5 90		      LDA	asteroid3Y
   1639  167b		       e9 00		      SBC	#0
   1640  167d		       85 90		      STA	asteroid3Y
   1641  167f				   .skipL0151
   1642  167f				   .
   1643  167f							; 
   1644  167f
   1645  167f				   .L0152		;  if asteroid4Y  <  50 then asteroid4Y  =  asteroid4Y  +  0.13
   1646  167f
   1647  167f		       a5 91		      LDA	asteroid4Y
   1648  1681		       c9 32		      CMP	#50
   1649  1683		       b0 0d		      BCS	.skipL0152
   1650  1685				   .condpart94
   1651  1685		       a5 db		      LDA	e
   1652  1687		       18		      CLC
   1653  1688		       69 21		      ADC	#33
   1654  168a		       85 db		      STA	e
   1655  168c		       a5 91		      LDA	asteroid4Y
   1656  168e		       69 00		      ADC	#0
   1657  1690		       85 91		      STA	asteroid4Y
   1658  1692				   .skipL0152
   1659  1692				   .L0153		;  if asteroid4Y  >  50 then asteroid4Y  =  asteroid4Y  -  0.13
   1660  1692
   1661  1692		       a9 32		      LDA	#50
   1662  1694		       c5 91		      CMP	asteroid4Y
   1663  1696		       b0 0d		      BCS	.skipL0153
   1664  1698				   .condpart95
   1665  1698		       a5 db		      LDA	e
   1666  169a		       38		      SEC
   1667  169b		       e9 21		      SBC	#33
   1668  169d		       85 db		      STA	e
   1669  169f		       a5 91		      LDA	asteroid4Y
   1670  16a1		       e9 00		      SBC	#0
   1671  16a3		       85 91		      STA	asteroid4Y
   1672  16a5				   .skipL0153
   1673  16a5				   .L0154		;  goto resetScreen
   1674  16a5
   1675  16a5		       4c 64 d7 	      jmp	.resetScreen
   1676  16a8
   1677  16a8				   .
   1678  16a8							; 
   1679  16a8
   1680  16a8				   .
   1681  16a8							; 
   1682  16a8
   1683  16a8				   .slow
   1684  16a8							; slow
   1685  16a8
   1686  16a8				   .L0155		;  if asteroidY  <  50 then asteroidY	=  asteroidY  +  0.13
   1687  16a8
   1688  16a8		       a5 8e		      LDA	asteroidY
   1689  16aa		       c9 32		      CMP	#50
   1690  16ac		       b0 0d		      BCS	.skipL0155
   1691  16ae				   .condpart96
   1692  16ae		       a5 d8		      LDA	b
   1693  16b0		       18		      CLC
   1694  16b1		       69 21		      ADC	#33
   1695  16b3		       85 d8		      STA	b
   1696  16b5		       a5 8e		      LDA	asteroidY
   1697  16b7		       69 00		      ADC	#0
   1698  16b9		       85 8e		      STA	asteroidY
   1699  16bb				   .skipL0155
   1700  16bb				   .L0156		;  if asteroidY  >  50 then asteroidY	=  asteroidY  -  0.13
   1701  16bb
   1702  16bb		       a9 32		      LDA	#50
   1703  16bd		       c5 8e		      CMP	asteroidY
   1704  16bf		       b0 0d		      BCS	.skipL0156
   1705  16c1				   .condpart97
   1706  16c1		       a5 d8		      LDA	b
   1707  16c3		       38		      SEC
   1708  16c4		       e9 21		      SBC	#33
   1709  16c6		       85 d8		      STA	b
   1710  16c8		       a5 8e		      LDA	asteroidY
   1711  16ca		       e9 00		      SBC	#0
   1712  16cc		       85 8e		      STA	asteroidY
   1713  16ce				   .skipL0156
   1714  16ce				   .
   1715  16ce							; 
   1716  16ce
   1717  16ce				   .L0157		;  if asteroid2Y  <  50  &&  _sc3  >  $03 then asteroid2Y  =  asteroid2Y  +  0.15
   1718  16ce
   1719  16ce		       a5 8f		      LDA	asteroid2Y
   1720  16d0		       c9 32		      CMP	#50
   1721  16d2		       b0 13		      BCS	.skipL0157
   1722  16d4				   .condpart98
   1723  16d4		       a9 03		      LDA	#$03
   1724  16d6		       c5 d4		      CMP	_sc3
   1725  16d8		       b0 0d		      BCS	.skip98then
   1726  16da				   .condpart99
   1727  16da		       a5 d9		      LDA	c
   1728  16dc		       18		      CLC
   1729  16dd		       69 26		      ADC	#38
   1730  16df		       85 d9		      STA	c
   1731  16e1		       a5 8f		      LDA	asteroid2Y
   1732  16e3		       69 00		      ADC	#0
   1733  16e5		       85 8f		      STA	asteroid2Y
   1734  16e7				   .skip98then
   1735  16e7				   .skipL0157
   1736  16e7				   .L0158		;  if asteroid2Y  >  50  &&  _sc3  >  $03 then asteroid2Y  =  asteroid2Y  -  0.15
   1737  16e7
   1738  16e7		       a9 32		      LDA	#50
   1739  16e9		       c5 8f		      CMP	asteroid2Y
   1740  16eb		       b0 13		      BCS	.skipL0158
   1741  16ed				   .condpart100
   1742  16ed		       a9 03		      LDA	#$03
   1743  16ef		       c5 d4		      CMP	_sc3
   1744  16f1		       b0 0d		      BCS	.skip100then
   1745  16f3				   .condpart101
   1746  16f3		       a5 d9		      LDA	c
   1747  16f5		       38		      SEC
   1748  16f6		       e9 26		      SBC	#38
   1749  16f8		       85 d9		      STA	c
   1750  16fa		       a5 8f		      LDA	asteroid2Y
   1751  16fc		       e9 00		      SBC	#0
   1752  16fe		       85 8f		      STA	asteroid2Y
   1753  1700				   .skip100then
   1754  1700				   .skipL0158
   1755  1700				   .
   1756  1700							; 
   1757  1700
   1758  1700				   .L0159		;  if asteroid3Y  <  50  &&  _sc3  >  $15 then asteroid3Y  =  asteroid3Y  +  0.17
   1759  1700
   1760  1700		       a5 90		      LDA	asteroid3Y
   1761  1702		       c9 32		      CMP	#50
   1762  1704		       b0 13		      BCS	.skipL0159
   1763  1706				   .condpart102
   1764  1706		       a9 15		      LDA	#$15
   1765  1708		       c5 d4		      CMP	_sc3
   1766  170a		       b0 0d		      BCS	.skip102then
   1767  170c				   .condpart103
   1768  170c		       a5 da		      LDA	d
   1769  170e		       18		      CLC
   1770  170f		       69 2b		      ADC	#43
   1771  1711		       85 da		      STA	d
   1772  1713		       a5 90		      LDA	asteroid3Y
   1773  1715		       69 00		      ADC	#0
   1774  1717		       85 90		      STA	asteroid3Y
   1775  1719				   .skip102then
   1776  1719				   .skipL0159
   1777  1719				   .L0160		;  if asteroid3Y  >  50  &&  _sc3  >  $15 then asteroid3Y  =  asteroid3Y  -  0.17
   1778  1719
   1779  1719		       a9 32		      LDA	#50
   1780  171b		       c5 90		      CMP	asteroid3Y
   1781  171d		       b0 13		      BCS	.skipL0160
   1782  171f				   .condpart104
   1783  171f		       a9 15		      LDA	#$15
   1784  1721		       c5 d4		      CMP	_sc3
   1785  1723		       b0 0d		      BCS	.skip104then
   1786  1725				   .condpart105
   1787  1725		       a5 da		      LDA	d
   1788  1727		       38		      SEC
   1789  1728		       e9 2b		      SBC	#43
   1790  172a		       85 da		      STA	d
   1791  172c		       a5 90		      LDA	asteroid3Y
   1792  172e		       e9 00		      SBC	#0
   1793  1730		       85 90		      STA	asteroid3Y
   1794  1732				   .skip104then
   1795  1732				   .skipL0160
   1796  1732				   .
   1797  1732							; 
   1798  1732
   1799  1732				   .L0161		;  if asteroid4Y  <  50  &&  _sc3  >  $20 then asteroid4Y  =  asteroid4Y  +  0.1
   1800  1732
   1801  1732		       a5 91		      LDA	asteroid4Y
   1802  1734		       c9 32		      CMP	#50
   1803  1736		       b0 13		      BCS	.skipL0161
   1804  1738				   .condpart106
   1805  1738		       a9 20		      LDA	#$20
   1806  173a		       c5 d4		      CMP	_sc3
   1807  173c		       b0 0d		      BCS	.skip106then
   1808  173e				   .condpart107
   1809  173e		       a5 db		      LDA	e
   1810  1740		       18		      CLC
   1811  1741		       69 19		      ADC	#25
   1812  1743		       85 db		      STA	e
   1813  1745		       a5 91		      LDA	asteroid4Y
   1814  1747		       69 00		      ADC	#0
   1815  1749		       85 91		      STA	asteroid4Y
   1816  174b				   .skip106then
   1817  174b				   .skipL0161
   1818  174b				   .L0162		;  if asteroid4Y  >  50  &&  _sc3  >  $20 then asteroid4Y  =  asteroid4Y  -  0.1
   1819  174b
   1820  174b		       a9 32		      LDA	#50
   1821  174d		       c5 91		      CMP	asteroid4Y
   1822  174f		       b0 13		      BCS	.skipL0162
   1823  1751				   .condpart108
   1824  1751		       a9 20		      LDA	#$20
   1825  1753		       c5 d4		      CMP	_sc3
   1826  1755		       b0 0d		      BCS	.skip108then
   1827  1757				   .condpart109
   1828  1757		       a5 db		      LDA	e
   1829  1759		       38		      SEC
   1830  175a		       e9 19		      SBC	#25
   1831  175c		       85 db		      STA	e
   1832  175e		       a5 91		      LDA	asteroid4Y
   1833  1760		       e9 00		      SBC	#0
   1834  1762		       85 91		      STA	asteroid4Y
   1835  1764				   .skip108then
   1836  1764				   .skipL0162
   1837  1764				   .
   1838  1764							; 
   1839  1764
   1840  1764				   .
   1841  1764							; 
   1842  1764
   1843  1764				   .resetScreen
   1844  1764							; resetScreen
   1845  1764
   1846  1764				   .
   1847  1764							; 
   1848  1764
   1849  1764				   .L0163		;  COLUPF  =  $40
   1850  1764
   1851  1764		       a9 40		      LDA	#$40
   1852  1766		       85 08		      STA	COLUPF
   1853  1768				   .L0164		;  drawscreen
   1854  1768
   1855  1768		       85 d1		      sta	temp7
   1856  176a		       a9 d7		      lda	#>(ret_point2-1)
   1857  176c		       48		      pha
   1858  176d		       a9 7f		      lda	#<(ret_point2-1)
   1859  176f		       48		      pha
   1860  1770		       a9 f0		      lda	#>(drawscreen-1)
   1861  1772		       48		      pha
   1862  1773		       a9 39		      lda	#<(drawscreen-1)
   1863  1775		       48		      pha
   1864  1776		       a5 d1		      lda	temp7
   1865  1778		       48		      pha
   1866  1779		       8a		      txa
   1867  177a		       48		      pha
   1868  177b		       a2 02		      ldx	#2
   1869  177d		       4c eb ff 	      jmp	BS_jsr
   1870  1780				   ret_point2
   1871  1780				   .
   1872  1780							; 
   1873  1780
   1874  1780				   .
   1875  1780							; 
   1876  1780
   1877  1780				   .L0165		;  goto sprites
   1878  1780
   1879  1780		       4c bc d1 	      jmp	.sprites
   1880  1783
   1881  1783				   .
   1882  1783							; 
   1883  1783
   1884  1783				   .setPlayer1Color
   1885  1783							; setPlayer1Color
   1886  1783
   1887  1783				   .L0166		;  if ticker  =  0 then _COLUP1  =  $22
   1888  1783
   1889  1783		       a5 e2		      LDA	ticker
   1890  1785		       c9 00		      CMP	#0
   1891  1787		       d0 04		      BNE	.skipL0166
   1892  1789				   .condpart110
   1893  1789		       a9 22		      LDA	#$22
   1894  178b		       85 98		      STA	_COLUP1
   1895  178d				   .skipL0166
   1896  178d				   .L0167		;  if ticker  =  1 then _COLUP1  =  $38
   1897  178d
   1898  178d		       a5 e2		      LDA	ticker
   1899  178f		       c9 01		      CMP	#1
   1900  1791		       d0 04		      BNE	.skipL0167
   1901  1793				   .condpart111
   1902  1793		       a9 38		      LDA	#$38
   1903  1795		       85 98		      STA	_COLUP1
   1904  1797				   .skipL0167
   1905  1797				   .L0168		;  if ticker  =  2 then _COLUP1  =  $66
   1906  1797
   1907  1797		       a5 e2		      LDA	ticker
   1908  1799		       c9 02		      CMP	#2
   1909  179b		       d0 04		      BNE	.skipL0168
   1910  179d				   .condpart112
   1911  179d		       a9 66		      LDA	#$66
   1912  179f		       85 98		      STA	_COLUP1
   1913  17a1				   .skipL0168
   1914  17a1				   .L0169		;  if ticker  =  3 then _COLUP1  =  $78
   1915  17a1
   1916  17a1		       a5 e2		      LDA	ticker
   1917  17a3		       c9 03		      CMP	#3
   1918  17a5		       d0 04		      BNE	.skipL0169
   1919  17a7				   .condpart113
   1920  17a7		       a9 78		      LDA	#$78
   1921  17a9		       85 98		      STA	_COLUP1
   1922  17ab				   .skipL0169
   1923  17ab				   .L0170		;  if ticker  =  4 then _COLUP1  =  $CA
   1924  17ab
   1925  17ab		       a5 e2		      LDA	ticker
   1926  17ad		       c9 04		      CMP	#4
   1927  17af		       d0 04		      BNE	.skipL0170
   1928  17b1				   .condpart114
   1929  17b1		       a9 ca		      LDA	#$CA
   1930  17b3		       85 98		      STA	_COLUP1
   1931  17b5				   .skipL0170
   1932  17b5				   .L0171		;  if ticker  =  5 then _COLUP1  =  $D6
   1933  17b5
   1934  17b5		       a5 e2		      LDA	ticker
   1935  17b7		       c9 05		      CMP	#5
   1936  17b9		       d0 04		      BNE	.skipL0171
   1937  17bb				   .condpart115
   1938  17bb		       a9 d6		      LDA	#$D6
   1939  17bd		       85 98		      STA	_COLUP1
   1940  17bf				   .skipL0171
   1941  17bf				   .L0172		;  if ticker  =  6 then _COLUP1  =  $E8
   1942  17bf
   1943  17bf		       a5 e2		      LDA	ticker
   1944  17c1		       c9 06		      CMP	#6
   1945  17c3		       d0 04		      BNE	.skipL0172
   1946  17c5				   .condpart116
   1947  17c5		       a9 e8		      LDA	#$E8
   1948  17c7		       85 98		      STA	_COLUP1
   1949  17c9				   .skipL0172
   1950  17c9				   .
   1951  17c9							; 
   1952  17c9
   1953  17c9				   .
   1954  17c9							; 
   1955  17c9
   1956  17c9				   .
   1957  17c9							; 
   1958  17c9
   1959  17c9				   .L0173		;  goto colorSetComplete
   1960  17c9
   1961  17c9		       4c 10 d2 	      jmp	.colorSetComplete
   1962  17cc
   1963  17cc				   .
   1964  17cc							; 
   1965  17cc
   1966  17cc				   .setPlayer2Color
   1967  17cc							; setPlayer2Color
   1968  17cc
   1969  17cc				   .L0174		;  if ticker  =  0 then COLUP2  =  $22
   1970  17cc
   1971  17cc		       a5 e2		      LDA	ticker
   1972  17ce		       c9 00		      CMP	#0
   1973  17d0		       d0 04		      BNE	.skipL0174
   1974  17d2				   .condpart117
   1975  17d2		       a9 22		      LDA	#$22
   1976  17d4		       85 99		      STA	COLUP2
   1977  17d6				   .skipL0174
   1978  17d6				   .L0175		;  if ticker  =  1 then COLUP2  =  $38
   1979  17d6
   1980  17d6		       a5 e2		      LDA	ticker
   1981  17d8		       c9 01		      CMP	#1
   1982  17da		       d0 04		      BNE	.skipL0175
   1983  17dc				   .condpart118
   1984  17dc		       a9 38		      LDA	#$38
   1985  17de		       85 99		      STA	COLUP2
   1986  17e0				   .skipL0175
   1987  17e0				   .L0176		;  if ticker  =  2 then COLUP2  =  $66
   1988  17e0
   1989  17e0		       a5 e2		      LDA	ticker
   1990  17e2		       c9 02		      CMP	#2
   1991  17e4		       d0 04		      BNE	.skipL0176
   1992  17e6				   .condpart119
   1993  17e6		       a9 66		      LDA	#$66
   1994  17e8		       85 99		      STA	COLUP2
   1995  17ea				   .skipL0176
   1996  17ea				   .L0177		;  if ticker  =  3 then COLUP2  =  $78
   1997  17ea
   1998  17ea		       a5 e2		      LDA	ticker
   1999  17ec		       c9 03		      CMP	#3
   2000  17ee		       d0 04		      BNE	.skipL0177
   2001  17f0				   .condpart120
   2002  17f0		       a9 78		      LDA	#$78
   2003  17f2		       85 99		      STA	COLUP2
   2004  17f4				   .skipL0177
   2005  17f4				   .L0178		;  if ticker  =  4 then COLUP2  =  $CA
   2006  17f4
   2007  17f4		       a5 e2		      LDA	ticker
   2008  17f6		       c9 04		      CMP	#4
   2009  17f8		       d0 04		      BNE	.skipL0178
   2010  17fa				   .condpart121
   2011  17fa		       a9 ca		      LDA	#$CA
   2012  17fc		       85 99		      STA	COLUP2
   2013  17fe				   .skipL0178
   2014  17fe				   .L0179		;  if ticker  =  5 then COLUP2  =  $D6
   2015  17fe
   2016  17fe		       a5 e2		      LDA	ticker
   2017  1800		       c9 05		      CMP	#5
   2018  1802		       d0 04		      BNE	.skipL0179
   2019  1804				   .condpart122
   2020  1804		       a9 d6		      LDA	#$D6
   2021  1806		       85 99		      STA	COLUP2
   2022  1808				   .skipL0179
   2023  1808				   .L0180		;  if ticker  =  6 then COLUP2  =  $E8
   2024  1808
   2025  1808		       a5 e2		      LDA	ticker
   2026  180a		       c9 06		      CMP	#6
   2027  180c		       d0 04		      BNE	.skipL0180
   2028  180e				   .condpart123
   2029  180e		       a9 e8		      LDA	#$E8
   2030  1810		       85 99		      STA	COLUP2
   2031  1812				   .skipL0180
   2032  1812				   .L0181		;  if ticker  =  7 then COLUP2  =  $3E
   2033  1812
   2034  1812		       a5 e2		      LDA	ticker
   2035  1814		       c9 07		      CMP	#7
   2036  1816		       d0 04		      BNE	.skipL0181
   2037  1818				   .condpart124
   2038  1818		       a9 3e		      LDA	#$3E
   2039  181a		       85 99		      STA	COLUP2
   2040  181c				   .skipL0181
   2041  181c				   .L0182		;  if ticker  =  8 then COLUP2  =  $DC
   2042  181c
   2043  181c		       a5 e2		      LDA	ticker
   2044  181e		       c9 08		      CMP	#8
   2045  1820		       d0 04		      BNE	.skipL0182
   2046  1822				   .condpart125
   2047  1822		       a9 dc		      LDA	#$DC
   2048  1824		       85 99		      STA	COLUP2
   2049  1826				   .skipL0182
   2050  1826				   .L0183		;  if ticker  =  9 then COLUP2  =  $48
   2051  1826
   2052  1826		       a5 e2		      LDA	ticker
   2053  1828		       c9 09		      CMP	#9
   2054  182a		       d0 04		      BNE	.skipL0183
   2055  182c				   .condpart126
   2056  182c		       a9 48		      LDA	#$48
   2057  182e		       85 99		      STA	COLUP2
   2058  1830				   .skipL0183
   2059  1830				   .L0184		;  if ticker  =  10 then COLUP2  =  $68
   2060  1830
   2061  1830		       a5 e2		      LDA	ticker
   2062  1832		       c9 0a		      CMP	#10
   2063  1834		       d0 04		      BNE	.skipL0184
   2064  1836				   .condpart127
   2065  1836		       a9 68		      LDA	#$68
   2066  1838		       85 99		      STA	COLUP2
   2067  183a				   .skipL0184
   2068  183a				   .
   2069  183a							; 
   2070  183a
   2071  183a				   .L0185		;  if ticker  <  4 then switchSprite  =  0
   2072  183a
   2073  183a		       a5 e2		      LDA	ticker
   2074  183c		       c9 04		      CMP	#4
   2075  183e		       b0 04		      BCS	.skipL0185
   2076  1840				   .condpart128
   2077  1840		       a9 00		      LDA	#0
   2078  1842		       85 e6		      STA	switchSprite
   2079  1844				   .skipL0185
   2080  1844				   .L0186		;  if ticker  >=  4 then switchSprite	=  1
   2081  1844
   2082  1844		       a5 e2		      LDA	ticker
   2083  1846		       c9 04		      CMP	#4
   2084  1848		       90 04		      BCC	.skipL0186
   2085  184a				   .condpart129
   2086  184a		       a9 01		      LDA	#1
   2087  184c		       85 e6		      STA	switchSprite
   2088  184e				   .skipL0186
   2089  184e				   .
   2090  184e							; 
   2091  184e
   2092  184e				   .
   2093  184e							; 
   2094  184e
   2095  184e				   .L0187		;  goto colorSetComplete
   2096  184e
   2097  184e		       4c 10 d2 	      jmp	.colorSetComplete
   2098  1851
   2099  1851				   .
   2100  1851							; 
   2101  1851
   2102  1851				   .setPlayer3Color
   2103  1851							; setPlayer3Color
   2104  1851
   2105  1851				   .L0188		;  if ticker  =  0 then COLUP3  =  $22
   2106  1851
   2107  1851		       a5 e2		      LDA	ticker
   2108  1853		       c9 00		      CMP	#0
   2109  1855		       d0 04		      BNE	.skipL0188
   2110  1857				   .condpart130
   2111  1857		       a9 22		      LDA	#$22
   2112  1859		       85 9a		      STA	COLUP3
   2113  185b				   .skipL0188
   2114  185b				   .L0189		;  if ticker  =  1 then COLUP3  =  $38
   2115  185b
   2116  185b		       a5 e2		      LDA	ticker
   2117  185d		       c9 01		      CMP	#1
   2118  185f		       d0 04		      BNE	.skipL0189
   2119  1861				   .condpart131
   2120  1861		       a9 38		      LDA	#$38
   2121  1863		       85 9a		      STA	COLUP3
   2122  1865				   .skipL0189
   2123  1865				   .L0190		;  if ticker  =  2 then COLUP3  =  $66
   2124  1865
   2125  1865		       a5 e2		      LDA	ticker
   2126  1867		       c9 02		      CMP	#2
   2127  1869		       d0 04		      BNE	.skipL0190
   2128  186b				   .condpart132
   2129  186b		       a9 66		      LDA	#$66
   2130  186d		       85 9a		      STA	COLUP3
   2131  186f				   .skipL0190
   2132  186f				   .L0191		;  if ticker  =  3 then COLUP3  =  $78
   2133  186f
   2134  186f		       a5 e2		      LDA	ticker
   2135  1871		       c9 03		      CMP	#3
   2136  1873		       d0 04		      BNE	.skipL0191
   2137  1875				   .condpart133
   2138  1875		       a9 78		      LDA	#$78
   2139  1877		       85 9a		      STA	COLUP3
   2140  1879				   .skipL0191
   2141  1879				   .L0192		;  if ticker  =  4 then COLUP3  =  $CA
   2142  1879
   2143  1879		       a5 e2		      LDA	ticker
   2144  187b		       c9 04		      CMP	#4
   2145  187d		       d0 04		      BNE	.skipL0192
   2146  187f				   .condpart134
   2147  187f		       a9 ca		      LDA	#$CA
   2148  1881		       85 9a		      STA	COLUP3
   2149  1883				   .skipL0192
   2150  1883				   .L0193		;  if ticker  =  5 then COLUP3  =  $D6
   2151  1883
   2152  1883		       a5 e2		      LDA	ticker
   2153  1885		       c9 05		      CMP	#5
   2154  1887		       d0 04		      BNE	.skipL0193
   2155  1889				   .condpart135
   2156  1889		       a9 d6		      LDA	#$D6
   2157  188b		       85 9a		      STA	COLUP3
   2158  188d				   .skipL0193
   2159  188d				   .L0194		;  if ticker  =  6 then COLUP3  =  $E8
   2160  188d
   2161  188d		       a5 e2		      LDA	ticker
   2162  188f		       c9 06		      CMP	#6
   2163  1891		       d0 04		      BNE	.skipL0194
   2164  1893				   .condpart136
   2165  1893		       a9 e8		      LDA	#$E8
   2166  1895		       85 9a		      STA	COLUP3
   2167  1897				   .skipL0194
   2168  1897				   .L0195		;  if ticker  =  7 then COLUP3  =  $3E
   2169  1897
   2170  1897		       a5 e2		      LDA	ticker
   2171  1899		       c9 07		      CMP	#7
   2172  189b		       d0 04		      BNE	.skipL0195
   2173  189d				   .condpart137
   2174  189d		       a9 3e		      LDA	#$3E
   2175  189f		       85 9a		      STA	COLUP3
   2176  18a1				   .skipL0195
   2177  18a1				   .L0196		;  if ticker  =  8 then COLUP3  =  $DC
   2178  18a1
   2179  18a1		       a5 e2		      LDA	ticker
   2180  18a3		       c9 08		      CMP	#8
   2181  18a5		       d0 04		      BNE	.skipL0196
   2182  18a7				   .condpart138
   2183  18a7		       a9 dc		      LDA	#$DC
   2184  18a9		       85 9a		      STA	COLUP3
   2185  18ab				   .skipL0196
   2186  18ab				   .L0197		;  if ticker  =  9 then COLUP3  =  $48
   2187  18ab
   2188  18ab		       a5 e2		      LDA	ticker
   2189  18ad		       c9 09		      CMP	#9
   2190  18af		       d0 04		      BNE	.skipL0197
   2191  18b1				   .condpart139
   2192  18b1		       a9 48		      LDA	#$48
   2193  18b3		       85 9a		      STA	COLUP3
   2194  18b5				   .skipL0197
   2195  18b5				   .L0198		;  if ticker  =  10 then COLUP3  =  $68
   2196  18b5
   2197  18b5		       a5 e2		      LDA	ticker
   2198  18b7		       c9 0a		      CMP	#10
   2199  18b9		       d0 04		      BNE	.skipL0198
   2200  18bb				   .condpart140
   2201  18bb		       a9 68		      LDA	#$68
   2202  18bd		       85 9a		      STA	COLUP3
   2203  18bf				   .skipL0198
   2204  18bf				   .L0199		;  goto colorSetComplete
   2205  18bf
   2206  18bf		       4c 10 d2 	      jmp	.colorSetComplete
   2207  18c2
   2208  18c2				   .
   2209  18c2							; 
   2210  18c2
   2211  18c2				   .setPlayer4Color
   2212  18c2							; setPlayer4Color
   2213  18c2
   2214  18c2				   .L0200		;  if ticker  =  0 then COLUP4  =  $22
   2215  18c2
   2216  18c2		       a5 e2		      LDA	ticker
   2217  18c4		       c9 00		      CMP	#0
   2218  18c6		       d0 04		      BNE	.skipL0200
   2219  18c8				   .condpart141
   2220  18c8		       a9 22		      LDA	#$22
   2221  18ca		       85 9b		      STA	COLUP4
   2222  18cc				   .skipL0200
   2223  18cc				   .L0201		;  if ticker  =  1 then COLUP4  =  $38
   2224  18cc
   2225  18cc		       a5 e2		      LDA	ticker
   2226  18ce		       c9 01		      CMP	#1
   2227  18d0		       d0 04		      BNE	.skipL0201
   2228  18d2				   .condpart142
   2229  18d2		       a9 38		      LDA	#$38
   2230  18d4		       85 9b		      STA	COLUP4
   2231  18d6				   .skipL0201
   2232  18d6				   .L0202		;  if ticker  =  2 then COLUP4  =  $66
   2233  18d6
   2234  18d6		       a5 e2		      LDA	ticker
   2235  18d8		       c9 02		      CMP	#2
   2236  18da		       d0 04		      BNE	.skipL0202
   2237  18dc				   .condpart143
   2238  18dc		       a9 66		      LDA	#$66
   2239  18de		       85 9b		      STA	COLUP4
   2240  18e0				   .skipL0202
   2241  18e0				   .L0203		;  if ticker  =  3 then COLUP4  =  $78
   2242  18e0
   2243  18e0		       a5 e2		      LDA	ticker
   2244  18e2		       c9 03		      CMP	#3
   2245  18e4		       d0 04		      BNE	.skipL0203
   2246  18e6				   .condpart144
   2247  18e6		       a9 78		      LDA	#$78
   2248  18e8		       85 9b		      STA	COLUP4
   2249  18ea				   .skipL0203
   2250  18ea				   .L0204		;  if ticker  =  4 then COLUP4  =  $CA
   2251  18ea
   2252  18ea		       a5 e2		      LDA	ticker
   2253  18ec		       c9 04		      CMP	#4
   2254  18ee		       d0 04		      BNE	.skipL0204
   2255  18f0				   .condpart145
   2256  18f0		       a9 ca		      LDA	#$CA
   2257  18f2		       85 9b		      STA	COLUP4
   2258  18f4				   .skipL0204
   2259  18f4				   .L0205		;  if ticker  =  5 then COLUP4  =  $D6
   2260  18f4
   2261  18f4		       a5 e2		      LDA	ticker
   2262  18f6		       c9 05		      CMP	#5
   2263  18f8		       d0 04		      BNE	.skipL0205
   2264  18fa				   .condpart146
   2265  18fa		       a9 d6		      LDA	#$D6
   2266  18fc		       85 9b		      STA	COLUP4
   2267  18fe				   .skipL0205
   2268  18fe				   .L0206		;  if ticker  =  6 then COLUP4  =  $E8
   2269  18fe
   2270  18fe		       a5 e2		      LDA	ticker
   2271  1900		       c9 06		      CMP	#6
   2272  1902		       d0 04		      BNE	.skipL0206
   2273  1904				   .condpart147
   2274  1904		       a9 e8		      LDA	#$E8
   2275  1906		       85 9b		      STA	COLUP4
   2276  1908				   .skipL0206
   2277  1908				   .L0207		;  if ticker  =  7 then COLUP4  =  $3E
   2278  1908
   2279  1908		       a5 e2		      LDA	ticker
   2280  190a		       c9 07		      CMP	#7
   2281  190c		       d0 04		      BNE	.skipL0207
   2282  190e				   .condpart148
   2283  190e		       a9 3e		      LDA	#$3E
   2284  1910		       85 9b		      STA	COLUP4
   2285  1912				   .skipL0207
   2286  1912				   .L0208		;  if ticker  =  8 then COLUP4  =  $DC
   2287  1912
   2288  1912		       a5 e2		      LDA	ticker
   2289  1914		       c9 08		      CMP	#8
   2290  1916		       d0 04		      BNE	.skipL0208
   2291  1918				   .condpart149
   2292  1918		       a9 dc		      LDA	#$DC
   2293  191a		       85 9b		      STA	COLUP4
   2294  191c				   .skipL0208
   2295  191c				   .L0209		;  if ticker  =  9 then COLUP4  =  $48
   2296  191c
   2297  191c		       a5 e2		      LDA	ticker
   2298  191e		       c9 09		      CMP	#9
   2299  1920		       d0 04		      BNE	.skipL0209
   2300  1922				   .condpart150
   2301  1922		       a9 48		      LDA	#$48
   2302  1924		       85 9b		      STA	COLUP4
   2303  1926				   .skipL0209
   2304  1926				   .L0210		;  if ticker  =  10 then COLUP4  =  $68
   2305  1926
   2306  1926		       a5 e2		      LDA	ticker
   2307  1928		       c9 0a		      CMP	#10
   2308  192a		       d0 04		      BNE	.skipL0210
   2309  192c				   .condpart151
   2310  192c		       a9 68		      LDA	#$68
   2311  192e		       85 9b		      STA	COLUP4
   2312  1930				   .skipL0210
   2313  1930				   .
   2314  1930							; 
   2315  1930
   2316  1930				   .L0211		;  goto colorSetComplete
   2317  1930
   2318  1930		       4c 10 d2 	      jmp	.colorSetComplete
   2319  1933
   2320  1933				   .
   2321  1933							; 
   2322  1933
   2323  1933				   .
   2324  1933							; 
   2325  1933
   2326  1933				   .
   2327  1933							; 
   2328  1933
   2329  1933				   .
   2330  1933							; 
   2331  1933
   2332  1933				   .
   2333  1933							; 
   2334  1933
   2335  1933				   .
   2336  1933							; 
   2337  1933
   2338  1933				   .
   2339  1933							; 
   2340  1933
   2341  1933				   .collisions
   2342  1933							; collisions
   2343  1933
   2344  1933				   .
   2345  1933							; 
   2346  1933
   2347  1933				   .L0212		;  AUDV0  =  12  :  AUDC0  =  8  :  AUDF0  =  28
   2348  1933
   2349  1933		       a9 0c		      LDA	#12
   2350  1935		       85 19		      STA	AUDV0
   2351  1937		       a9 08		      LDA	#8
   2352  1939		       85 15		      STA	AUDC0
   2353  193b		       a9 1c		      LDA	#28
   2354  193d		       85 17		      STA	AUDF0
   2355  193f				   .L0213		;  score  =  score  +	1
   2356  193f
   2357  193f		       f8		      SED
   2358  1940		       18		      CLC
   2359  1941		       a5 d4		      LDA	score+2
   2360  1943		       69 01		      ADC	#$01
   2361  1945		       85 d4		      STA	score+2
   2362  1947		       a5 d3		      LDA	score+1
   2363  1949		       69 00		      ADC	#$00
   2364  194b		       85 d3		      STA	score+1
   2365  194d		       a5 d2		      LDA	score
   2366  194f		       69 00		      ADC	#$00
   2367  1951		       85 d2		      STA	score
   2368  1953		       d8		      CLD
   2369  1954				   .
   2370  1954							; 
   2371  1954
   2372  1954				   .
   2373  1954							; 
   2374  1954
   2375  1954				   .
   2376  1954							; 
   2377  1954
   2378  1954				   .
   2379  1954							; 
   2380  1954
   2381  1954				   .
   2382  1954							; 
   2383  1954
   2384  1954				   .L0214		;  player5x  =  missile0x  +  4
   2385  1954
   2386  1954		       a5 80		      LDA	missile0x
   2387  1956		       18		      CLC
   2388  1957		       69 04		      ADC	#4
   2389  1959		       85 89		      STA	player5x
   2390  195b				   .L0215		;  player5y  =  missile0y  +  2
   2391  195b
   2392  195b		       a5 8a		      LDA	missile0y
   2393  195d		       18		      CLC
   2394  195e		       69 02		      ADC	#2
   2395  1960		       85 92		      STA	player5y
   2396  1962				   .
   2397  1962							; 
   2398  1962
   2399  1962				   .L0216		;  missile0y  =  200
   2400  1962
   2401  1962		       a9 c8		      LDA	#200
   2402  1964		       85 8a		      STA	missile0y
   2403  1966				   .
   2404  1966							; 
   2405  1966
   2406  1966				   .L0217		;  if missile0x  >  27  &&  missile0x	<  37 then player1x  =	76 :  player1y	=  100
   2407  1966
   2408  1966		       a9 1b		      LDA	#27
   2409  1968		       c5 80		      CMP	missile0x
   2410  196a		       b0 0e		      BCS	.skipL0217
   2411  196c				   .condpart152
   2412  196c		       a5 80		      LDA	missile0x
   2413  196e		       c9 25		      CMP	#37
   2414  1970		       b0 08		      BCS	.skip152then
   2415  1972				   .condpart153
   2416  1972		       a9 4c		      LDA	#76
   2417  1974		       85 85		      STA	player1x
   2418  1976		       a9 64		      LDA	#100
   2419  1978		       85 8e		      STA	player1y
   2420  197a				   .skip152then
   2421  197a				   .skipL0217
   2422  197a				   .L0218		;  if missile0x  >  37  &&  missile0x	<  47 then player2x  =	86 :  player2y	=  0
   2423  197a
   2424  197a		       a9 25		      LDA	#37
   2425  197c		       c5 80		      CMP	missile0x
   2426  197e		       b0 0e		      BCS	.skipL0218
   2427  1980				   .condpart154
   2428  1980		       a5 80		      LDA	missile0x
   2429  1982		       c9 2f		      CMP	#47
   2430  1984		       b0 08		      BCS	.skip154then
   2431  1986				   .condpart155
   2432  1986		       a9 56		      LDA	#86
   2433  1988		       85 86		      STA	player2x
   2434  198a		       a9 00		      LDA	#0
   2435  198c		       85 8f		      STA	player2y
   2436  198e				   .skip154then
   2437  198e				   .skipL0218
   2438  198e				   .L0219		;  if missile0x  >  47  &&  missile0x	<  57 then player3x  =	96 :  player3y	=  100
   2439  198e
   2440  198e		       a9 2f		      LDA	#47
   2441  1990		       c5 80		      CMP	missile0x
   2442  1992		       b0 0e		      BCS	.skipL0219
   2443  1994				   .condpart156
   2444  1994		       a5 80		      LDA	missile0x
   2445  1996		       c9 39		      CMP	#57
   2446  1998		       b0 08		      BCS	.skip156then
   2447  199a				   .condpart157
   2448  199a		       a9 60		      LDA	#96
   2449  199c		       85 87		      STA	player3x
   2450  199e		       a9 64		      LDA	#100
   2451  19a0		       85 90		      STA	player3y
   2452  19a2				   .skip156then
   2453  19a2				   .skipL0219
   2454  19a2				   .L0220		;  if missile0x  >  57  &&  missile0x	<  67 then player4x  =	106 :  player4y  =  0
   2455  19a2
   2456  19a2		       a9 39		      LDA	#57
   2457  19a4		       c5 80		      CMP	missile0x
   2458  19a6		       b0 0e		      BCS	.skipL0220
   2459  19a8				   .condpart158
   2460  19a8		       a5 80		      LDA	missile0x
   2461  19aa		       c9 43		      CMP	#67
   2462  19ac		       b0 08		      BCS	.skip158then
   2463  19ae				   .condpart159
   2464  19ae		       a9 6a		      LDA	#106
   2465  19b0		       85 88		      STA	player4x
   2466  19b2		       a9 00		      LDA	#0
   2467  19b4		       85 91		      STA	player4y
   2468  19b6				   .skip158then
   2469  19b6				   .skipL0220
   2470  19b6				   .
   2471  19b6							; 
   2472  19b6
   2473  19b6				   .L0221		;  if missile0x  >  67  &&  missile0x	<  77 then player1x  =	116 :  player1y  =  0
   2474  19b6
   2475  19b6		       a9 43		      LDA	#67
   2476  19b8		       c5 80		      CMP	missile0x
   2477  19ba		       b0 0e		      BCS	.skipL0221
   2478  19bc				   .condpart160
   2479  19bc		       a5 80		      LDA	missile0x
   2480  19be		       c9 4d		      CMP	#77
   2481  19c0		       b0 08		      BCS	.skip160then
   2482  19c2				   .condpart161
   2483  19c2		       a9 74		      LDA	#116
   2484  19c4		       85 85		      STA	player1x
   2485  19c6		       a9 00		      LDA	#0
   2486  19c8		       85 8e		      STA	player1y
   2487  19ca				   .skip160then
   2488  19ca				   .skipL0221
   2489  19ca				   .L0222		;  if missile0x  >  77  &&  missile0x	<  87 then player2x  =	126 :  player2y  =  100
   2490  19ca
   2491  19ca		       a9 4d		      LDA	#77
   2492  19cc		       c5 80		      CMP	missile0x
   2493  19ce		       b0 0e		      BCS	.skipL0222
   2494  19d0				   .condpart162
   2495  19d0		       a5 80		      LDA	missile0x
   2496  19d2		       c9 57		      CMP	#87
   2497  19d4		       b0 08		      BCS	.skip162then
   2498  19d6				   .condpart163
   2499  19d6		       a9 7e		      LDA	#126
   2500  19d8		       85 86		      STA	player2x
   2501  19da		       a9 64		      LDA	#100
   2502  19dc		       85 8f		      STA	player2y
   2503  19de				   .skip162then
   2504  19de				   .skipL0222
   2505  19de				   .L0223		;  if missile0x  >  87  &&  missile0x	<  97 then player3x  =	136 :  player3y  =  0
   2506  19de
   2507  19de		       a9 57		      LDA	#87
   2508  19e0		       c5 80		      CMP	missile0x
   2509  19e2		       b0 0e		      BCS	.skipL0223
   2510  19e4				   .condpart164
   2511  19e4		       a5 80		      LDA	missile0x
   2512  19e6		       c9 61		      CMP	#97
   2513  19e8		       b0 08		      BCS	.skip164then
   2514  19ea				   .condpart165
   2515  19ea		       a9 88		      LDA	#136
   2516  19ec		       85 87		      STA	player3x
   2517  19ee		       a9 00		      LDA	#0
   2518  19f0		       85 90		      STA	player3y
   2519  19f2				   .skip164then
   2520  19f2				   .skipL0223
   2521  19f2				   .L0224		;  if missile0x  >  97  &&  missile0x	<  107 then player4x  =  66 :  player4y  =  100
   2522  19f2
   2523  19f2		       a9 61		      LDA	#97
   2524  19f4		       c5 80		      CMP	missile0x
   2525  19f6		       b0 0e		      BCS	.skipL0224
   2526  19f8				   .condpart166
   2527  19f8		       a5 80		      LDA	missile0x
   2528  19fa		       c9 6b		      CMP	#107
   2529  19fc		       b0 08		      BCS	.skip166then
   2530  19fe				   .condpart167
   2531  19fe		       a9 42		      LDA	#66
   2532  1a00		       85 88		      STA	player4x
   2533  1a02		       a9 64		      LDA	#100
   2534  1a04		       85 91		      STA	player4y
   2535  1a06				   .skip166then
   2536  1a06				   .skipL0224
   2537  1a06				   .
   2538  1a06							; 
   2539  1a06
   2540  1a06				   .L0225		;  if missile0x  >  107  &&  missile0x  <  117 then player1x  =  36 :	player1y  =  100
   2541  1a06
   2542  1a06		       a9 6b		      LDA	#107
   2543  1a08		       c5 80		      CMP	missile0x
   2544  1a0a		       b0 0e		      BCS	.skipL0225
   2545  1a0c				   .condpart168
   2546  1a0c		       a5 80		      LDA	missile0x
   2547  1a0e		       c9 75		      CMP	#117
   2548  1a10		       b0 08		      BCS	.skip168then
   2549  1a12				   .condpart169
   2550  1a12		       a9 24		      LDA	#36
   2551  1a14		       85 85		      STA	player1x
   2552  1a16		       a9 64		      LDA	#100
   2553  1a18		       85 8e		      STA	player1y
   2554  1a1a				   .skip168then
   2555  1a1a				   .skipL0225
   2556  1a1a				   .L0226		;  if missile0x  >  117  &&  missile0x  <  127 then player2x  =  46 :	player2y  =  100
   2557  1a1a
   2558  1a1a		       a9 75		      LDA	#117
   2559  1a1c		       c5 80		      CMP	missile0x
   2560  1a1e		       b0 0e		      BCS	.skipL0226
   2561  1a20				   .condpart170
   2562  1a20		       a5 80		      LDA	missile0x
   2563  1a22		       c9 7f		      CMP	#127
   2564  1a24		       b0 08		      BCS	.skip170then
   2565  1a26				   .condpart171
   2566  1a26		       a9 2e		      LDA	#46
   2567  1a28		       85 86		      STA	player2x
   2568  1a2a		       a9 64		      LDA	#100
   2569  1a2c		       85 8f		      STA	player2y
   2570  1a2e				   .skip170then
   2571  1a2e				   .skipL0226
   2572  1a2e				   .L0227		;  if missile0x  >  127  &&  missile0x  <  137 then player3x  =  56 :	player3y  =  0
   2573  1a2e
   2574  1a2e		       a9 7f		      LDA	#127
   2575  1a30		       c5 80		      CMP	missile0x
   2576  1a32		       b0 0e		      BCS	.skipL0227
   2577  1a34				   .condpart172
   2578  1a34		       a5 80		      LDA	missile0x
   2579  1a36		       c9 89		      CMP	#137
   2580  1a38		       b0 08		      BCS	.skip172then
   2581  1a3a				   .condpart173
   2582  1a3a		       a9 38		      LDA	#56
   2583  1a3c		       85 87		      STA	player3x
   2584  1a3e		       a9 00		      LDA	#0
   2585  1a40		       85 90		      STA	player3y
   2586  1a42				   .skip172then
   2587  1a42				   .skipL0227
   2588  1a42				   .L0228		;  if missile0x  >  137  &&  missile0x  <  147 then player4x  =  66 :	player4y  =  0
   2589  1a42
   2590  1a42		       a9 89		      LDA	#137
   2591  1a44		       c5 80		      CMP	missile0x
   2592  1a46		       b0 0e		      BCS	.skipL0228
   2593  1a48				   .condpart174
   2594  1a48		       a5 80		      LDA	missile0x
   2595  1a4a		       c9 93		      CMP	#147
   2596  1a4c		       b0 08		      BCS	.skip174then
   2597  1a4e				   .condpart175
   2598  1a4e		       a9 42		      LDA	#66
   2599  1a50		       85 88		      STA	player4x
   2600  1a52		       a9 00		      LDA	#0
   2601  1a54		       85 91		      STA	player4y
   2602  1a56				   .skip174then
   2603  1a56				   .skipL0228
   2604  1a56				   .
   2605  1a56							; 
   2606  1a56
   2607  1a56				   .L0229		;  goto frameReset
   2608  1a56
   2609  1a56		       4c 5a d5 	      jmp	.frameReset
   2610  1a59
   2611  1a59				   .
   2612  1a59							; 
   2613  1a59
   2614  1a59				   .gameOver
   2615  1a59							; gameOver
   2616  1a59
   2617  1a59				   .L0230		;  if !_Bit6_Sequence_Switch{6} then _P0_Luminosity  =  _P0_Luminosity  +  1  :  if _P0_Luminosity  >=  $20 then _Bit6_Sequence_Switch{6}  =  1 :  _resetTicker  =  _resetTicker  +  1
   2618  1a59
   2619  1a59		       24 ef		      BIT	_Bit6_Sequence_Switch
   2620  1a5b		       70 10		      BVS	.skipL0230
   2621  1a5d				   .condpart176
   2622  1a5d		       e6 d7		      INC	_P0_Luminosity
   2623  1a5f		       a5 d7		      LDA	_P0_Luminosity
   2624  1a61		       c9 20		      CMP	#$20
   2625  1a63		       90 08		      BCC	.skip176then
   2626  1a65				   .condpart177
   2627  1a65		       a5 ef		      LDA	_Bit6_Sequence_Switch
   2628  1a67		       09 40		      ORA	#64
   2629  1a69		       85 ef		      STA	_Bit6_Sequence_Switch
   2630  1a6b		       e6 ee		      INC	_resetTicker
   2631  1a6d				   .skip176then
   2632  1a6d				   .skipL0230
   2633  1a6d				   .L0231		;  if _Bit6_Sequence_Switch{6} then _P0_Luminosity  =	_P0_Luminosity	-  1  :  if _P0_Luminosity  <=	$12 then _P0_Luminosity  =  $10  :  _Bit6_Sequence_Switch{6}  =  0
   2634  1a6d
   2635  1a6d		       24 ef		      BIT	_Bit6_Sequence_Switch
   2636  1a6f		       50 16		      BVC	.skipL0231
   2637  1a71				   .condpart178
   2638  1a71		       c6 d7		      DEC	_P0_Luminosity
   2639  1a73		       a9 12		      LDA	#$12
   2640  1a75		       c5 d7		      CMP	_P0_Luminosity
   2641  1a77		       90 0e		      BCC	.skip178then
   2642  1a79				   .condpart179
   2643  1a79		       a9 00		      LDA	#0
   2644  1a7b		       85 d8		      STA	b
   2645  1a7d		       a9 10		      LDA	#$10
   2646  1a7f		       85 d7		      STA	_P0_Luminosity
   2647  1a81		       a5 ef		      LDA	_Bit6_Sequence_Switch
   2648  1a83		       29 bf		      AND	#191
   2649  1a85		       85 ef		      STA	_Bit6_Sequence_Switch
   2650  1a87				   .skip178then
   2651  1a87				   .skipL0231
   2652  1a87				   .L0232		;  AUDV1  =  10  :  AUDC1  =  8  :  AUDF1  =  25
   2653  1a87
   2654  1a87		       a9 0a		      LDA	#10
   2655  1a89		       85 1a		      STA	AUDV1
   2656  1a8b		       a9 08		      LDA	#8
   2657  1a8d		       85 16		      STA	AUDC1
   2658  1a8f		       a9 19		      LDA	#25
   2659  1a91		       85 18		      STA	AUDF1
   2660  1a93				   .L0233		;  COLUBK  =  _P0_Luminosity
   2661  1a93
   2662  1a93		       a5 d7		      LDA	_P0_Luminosity
   2663  1a95		       85 09		      STA	COLUBK
   2664  1a97				   .
   2665  1a97							; 
   2666  1a97
   2667  1a97				   .L0234		;  if _resetTicker  >	3 then goto resetGame
   2668  1a97
   2669  1a97		       a9 03		      LDA	#3
   2670  1a99		       c5 ee		      CMP	_resetTicker
   2671  1a9b		       b0 03		      BCS	.skipL0234
   2672  1a9d				   .condpart180
   2673  1a9d		       4c a3 da 	      jmp	.resetGame
   2674  1aa0
   2675  1aa0				   .skipL0234
   2676  1aa0				   .
   2677  1aa0							; 
   2678  1aa0
   2679  1aa0				   .L0235		;  goto resetScreen
   2680  1aa0
   2681  1aa0		       4c 64 d7 	      jmp	.resetScreen
   2682  1aa3
   2683  1aa3				   .
   2684  1aa3							; 
   2685  1aa3
   2686  1aa3				   .resetGame
   2687  1aa3							; resetGame
   2688  1aa3
   2689  1aa3				   .L0236		;  player0x = 66
   2690  1aa3
   2691  1aa3		       a9 42		      LDA	#66
   2692  1aa5		       85 84		      STA	player0x
   2693  1aa7				   .L0237		;  player0y = 57
   2694  1aa7
   2695  1aa7		       a9 39		      LDA	#57
   2696  1aa9		       85 8d		      STA	player0y
   2697  1aab				   .
   2698  1aab							; 
   2699  1aab
   2700  1aab				   .L0238		;  player1x = 76
   2701  1aab
   2702  1aab		       a9 4c		      LDA	#76
   2703  1aad		       85 85		      STA	player1x
   2704  1aaf				   .L0239		;  player1y = 0
   2705  1aaf
   2706  1aaf		       a9 00		      LDA	#0
   2707  1ab1		       85 8e		      STA	player1y
   2708  1ab3				   .
   2709  1ab3							; 
   2710  1ab3
   2711  1ab3				   .L0240		;  player2x = 86
   2712  1ab3
   2713  1ab3		       a9 56		      LDA	#86
   2714  1ab5		       85 86		      STA	player2x
   2715  1ab7				   .L0241		;  player2y = 110
   2716  1ab7
   2717  1ab7		       a9 6e		      LDA	#110
   2718  1ab9		       85 8f		      STA	player2y
   2719  1abb				   .
   2720  1abb							; 
   2721  1abb
   2722  1abb				   .L0242		;  player3x = 96
   2723  1abb
   2724  1abb		       a9 60		      LDA	#96
   2725  1abd		       85 87		      STA	player3x
   2726  1abf				   .L0243		;  player3y = 120
   2727  1abf
   2728  1abf		       a9 78		      LDA	#120
   2729  1ac1		       85 90		      STA	player3y
   2730  1ac3				   .
   2731  1ac3							; 
   2732  1ac3
   2733  1ac3				   .L0244		;  player4x = 106
   2734  1ac3
   2735  1ac3		       a9 6a		      LDA	#106
   2736  1ac5		       85 88		      STA	player4x
   2737  1ac7				   .L0245		;  player4y =	100
   2738  1ac7
   2739  1ac7		       a9 64		      LDA	#100
   2740  1ac9		       85 91		      STA	player4y
   2741  1acb				   .
   2742  1acb							; 
   2743  1acb
   2744  1acb				   .L0246		;  missile0y = 255
   2745  1acb
   2746  1acb		       a9 ff		      LDA	#255
   2747  1acd		       85 8a		      STA	missile0y
   2748  1acf				   .L0247		;  missile0y = 255
   2749  1acf
   2750  1acf		       a9 ff		      LDA	#255
   2751  1ad1		       85 8a		      STA	missile0y
   2752  1ad3				   .
   2753  1ad3							; 
   2754  1ad3
   2755  1ad3				   .L0248		;  _resetTicker  =  0
   2756  1ad3
   2757  1ad3		       a9 00		      LDA	#0
   2758  1ad5		       85 ee		      STA	_resetTicker
   2759  1ad7				   .L0249		;  missile1y =  200
   2760  1ad7
   2761  1ad7		       a9 c8		      LDA	#200
   2762  1ad9		       85 8b		      STA	missile1y
   2763  1adb				   .L0250		;  COLUBK  =  $20
   2764  1adb
   2765  1adb		       a9 20		      LDA	#$20
   2766  1add		       85 09		      STA	COLUBK
   2767  1adf				   .L0251		;  AUDV1  =  0  :  AUDC1  =  0  :  AUDF1  =  0
   2768  1adf
   2769  1adf		       a9 00		      LDA	#0
   2770  1ae1		       85 1a		      STA	AUDV1
   2771  1ae3		       85 16		      STA	AUDC1
   2772  1ae5		       85 18		      STA	AUDF1
   2773  1ae7				   .L0252		;  lives  =  lives  -	32
   2774  1ae7
   2775  1ae7		       a5 c2		      LDA	lives
   2776  1ae9		       38		      SEC
   2777  1aea		       e9 20		      SBC	#32
   2778  1aec		       85 c2		      STA	lives
   2779  1aee				   .
   2780  1aee							; 
   2781  1aee
   2782  1aee				   .L0253		;  if lives  <  32 then gameReady  =  0 :  firstFrame	=  0 :	lives  =  lives  +  96
   2783  1aee
   2784  1aee		       a5 c2		      LDA	lives
   2785  1af0		       c9 20		      CMP	#32
   2786  1af2		       b0 0d		      BCS	.skipL0253
   2787  1af4				   .condpart181
   2788  1af4		       a9 00		      LDA	#0
   2789  1af6		       85 f0		      STA	gameReady
   2790  1af8		       85 e8		      STA	firstFrame
   2791  1afa		       a5 c2		      LDA	lives
   2792  1afc		       18		      CLC
   2793  1afd		       69 60		      ADC	#96
   2794  1aff		       85 c2		      STA	lives
   2795  1b01				   .skipL0253
   2796  1b01				   .
   2797  1b01							; 
   2798  1b01
   2799  1b01				   .
   2800  1b01							; 
   2801  1b01
   2802  1b01				   .L0254		;  goto resetScreen
   2803  1b01
   2804  1b01		       4c 64 d7 	      jmp	.resetScreen
   2805  1b04
   2806  1b04				   .
   2807  1b04							; 
   2808  1b04
   2809  1b04				   .
   2810  1b04							; 
   2811  1b04
   2812  1b04				   .L0255		;  bank 2
   2813  1b04
   2814  1b04					      if	ECHO1
      1232 bytes of ROM space left in bank 1
   2815  1b04					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   2816  1b04					      endif
   2817  1b04		       00 01	   ECHO1      =	1
   2818  1fd4					      ORG	$1FF4-bscode_length
   2819  1fd4					      RORG	$DFF4-bscode_length
   2820  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   2821  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   2822  1fd6				  -	      stx	FASTFETCH
   2823  1fd6					      endif
   2824  1fd6		       9a		      txs
   2825  1fd7				  -	      if	bankswitch == 64
   2826  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2827  1fd7					      else
   2828  1fd7		       a9 f3		      lda	#>(start-1)
   2829  1fd9					      endif
   2830  1fd9		       48		      pha
   2831  1fda		       a9 f7		      lda	#<(start-1)
   2832  1fdc		       48		      pha
   2833  1fdd		       48		      pha
   2834  1fde		       8a		      txa
   2835  1fdf		       48		      pha
   2836  1fe0		       ba		      tsx
   2837  1fe1					      if	bankswitch != 64
   2838  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   2839  1fe3		       2a		      rol
   2840  1fe4		       2a		      rol
   2841  1fe5		       2a		      rol
   2842  1fe6		       2a		      rol
   2843  1fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2844  1fe9		       aa		      tax
   2845  1fea		       e8		      inx
   2846  1feb				  -	      else
   2847  1feb				  -	      lda	4,x	; get high byte of return address
   2848  1feb				  -	      tay
   2849  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2850  1feb				  -	      sta	4,x
   2851  1feb				  -	      tya
   2852  1feb				  -	      lsr
   2853  1feb				  -	      lsr
   2854  1feb				  -	      lsr
   2855  1feb				  -	      lsr
   2856  1feb				  -	      tax
   2857  1feb				  -	      inx
   2858  1feb					      endif
   2859  1feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   2860  1fee		       68		      pla
   2861  1fef		       aa		      tax
   2862  1ff0		       68		      pla
   2863  1ff1		       60		      rts
   2864  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2865  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2866  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2867  1ff2					      endif
   2868  1ffc					      ORG	$1FFC
   2869  1ffc					      RORG	$DFFC
   2870  1ffc		       d4 df		      .word.w	start_bank1
   2871  1ffe		       d4 df		      .word.w	start_bank1
   2872  2000					      ORG	$2000
   2873  2000					      RORG	$F000
   2874  2000				   FineAdjustTableBegin
   2875  2000		       60		      .byte.b	%01100000	;left 6
   2876  2001		       50		      .byte.b	%01010000
   2877  2002		       40		      .byte.b	%01000000
   2878  2003		       30		      .byte.b	%00110000
   2879  2004		       20		      .byte.b	%00100000
   2880  2005		       10		      .byte.b	%00010000
   2881  2006		       00		      .byte.b	%00000000	;left 0
   2882  2007		       f0		      .byte.b	%11110000
   2883  2008		       e0		      .byte.b	%11100000
   2884  2009		       d0		      .byte.b	%11010000
   2885  200a		       c0		      .byte.b	%11000000
   2886  200b		       b0		      .byte.b	%10110000
   2887  200c		       a0		      .byte.b	%10100000
   2888  200d		       90		      .byte.b	%10010000
   2889  200e		       80		      .byte.b	%10000000	;right 8
   2890  200e		       ef 0f	   FineAdjustTableEnd =	FineAdjustTableBegin - 241
   2891  200f
   2892  200f				   PFStart
   2893  200f		       57 2b 00 15*	      .byte.b	87,43,0,21,0,0,0,10
   2894  2017				   blank_pf
   2895  2017		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,5
   2896  201f							; .byte 43,21,0,10,0,0,0,5
   2897  201f				  -	      ifconst	screenheight
   2898  201f				  -pfsub
   2899  201f				  -	      .byte	8,4,2,2,1,0,0,1,0
   2900  201f					      endif
   2901  201f							;--set initial P1 positions
   2902  201f				   multisprite_setup
   2903  201f		       a9 0f		      lda	#15
   2904  2021		       85 c4		      sta	pfheight
   2905  2023
   2906  2023		       a2 04		      ldx	#4
   2907  2025							; stx temp3
   2908  2025				   SetCopyHeight
   2909  2025							;	lda #76
   2910  2025							;	sta NewSpriteX,X
   2911  2025							;	lda CopyColorData,X
   2912  2025							;	sta NewCOLUP1,X
   2913  2025							;lda SpriteHeightTable,X
   2914  2025							; sta spriteheight,x
   2915  2025		       8a		      txa
   2916  2026		       95 9d		      sta	SpriteGfxIndex,X
   2917  2028		       95 f1		      sta	spritesort,X
   2918  202a		       ca		      dex
   2919  202b		       10 f8		      bpl	SetCopyHeight
   2920  202d
   2921  202d
   2922  202d
   2923  202d							; since we can't turn off pf, point PF to zeros here
   2924  202d		       a9 f0		      lda	#>blank_pf
   2925  202f		       85 be		      sta	PF2pointer+1
   2926  2031		       85 bc		      sta	PF1pointer+1
   2927  2033		       a9 17		      lda	#<blank_pf
   2928  2035		       85 bd		      sta	PF2pointer
   2929  2037		       85 bb		      sta	PF1pointer
   2930  2039		       60		      rts
   2931  203a
   2932  203a				   drawscreen
   2933  203a				  -	      ifconst	debugscore
   2934  203a				  -	      jsr	debugcycles
   2935  203a					      endif
   2936  203a
   2937  203a				   WaitForOverscanEnd
   2938  203a		       ad 84 02 	      lda	INTIM
   2939  203d		       30 fb		      bmi	WaitForOverscanEnd
   2940  203f
   2941  203f		       a9 02		      lda	#2
   2942  2041		       85 02		      sta	WSYNC
   2943  2043		       85 00		      sta	VSYNC
   2944  2045		       85 02		      sta	WSYNC
   2945  2047		       85 02		      sta	WSYNC
   2946  2049		       4a		      lsr
   2947  204a		       85 27		      sta	VDELBL
   2948  204c		       85 25		      sta	VDELP0
   2949  204e		       85 02		      sta	WSYNC
   2950  2050		       85 00		      sta	VSYNC	;turn off VSYNC
   2951  2052				  -	      ifconst	overscan_time
   2952  2052				  -	      lda	#overscan_time+5+128
   2953  2052					      else
   2954  2052		       a9 aa		      lda	#42+128
   2955  2054					      endif
   2956  2054		       8d 96 02 	      sta	TIM64T
   2957  2057
   2958  2057							; run possible vblank bB code
   2959  2057				  -	      ifconst	vblank_bB_code
   2960  2057				  -	      jsr	vblank_bB_code
   2961  2057					      endif
   2962  2057
   2963  2057		       20 df f1 	      jsr	setscorepointers
   2964  205a		       20 7e f3 	      jsr	SetupP1Subroutine
   2965  205d
   2966  205d							;-------------
   2967  205d
   2968  205d
   2969  205d
   2970  205d
   2971  205d
   2972  205d							;--position P0, M0, M1, BL
   2973  205d
   2974  205d		       20 b5 f0 	      jsr	PrePositionAllObjects
   2975  2060
   2976  2060							;--set up player 0 pointer
   2977  2060
   2978  2060		       c6 8d		      dec	player0y
   2979  2062		       a5 a2		      lda	player0pointer	; player0: must be run every frame!
   2980  2064		       38		      sec
   2981  2065		       e5 8d		      sbc	player0y
   2982  2067		       18		      clc
   2983  2068		       65 b0		      adc	player0height
   2984  206a		       85 a2		      sta	player0pointer
   2985  206c
   2986  206c		       a5 8d		      lda	player0y
   2987  206e		       85 cf		      sta	P0Top
   2988  2070		       38		      sec
   2989  2071		       e5 b0		      sbc	player0height
   2990  2073		       18		      clc
   2991  2074		       69 80		      adc	#$80
   2992  2076		       85 a4		      sta	P0Bottom
   2993  2078
   2994  2078
   2995  2078							;--some final setup
   2996  2078
   2997  2078		       a2 04		      ldx	#4
   2998  207a		       a9 80		      lda	#$80
   2999  207c				   cycle74_HMCLR
   3000  207c		       95 20		      sta	HMP0,X
   3001  207e		       ca		      dex
   3002  207f		       10 fb		      bpl	cycle74_HMCLR
   3003  2081							;	sta HMCLR
   3004  2081
   3005  2081
   3006  2081		       a9 00		      lda	#0
   3007  2083		       85 0e		      sta	PF1
   3008  2085		       85 0f		      sta	PF2
   3009  2087		       85 1b		      sta	GRP0
   3010  2089		       85 1c		      sta	GRP1
   3011  208b
   3012  208b
   3013  208b		       20 d0 f0 	      jsr	KernelSetupSubroutine
   3014  208e
   3015  208e				   WaitForVblankEnd
   3016  208e		       ad 84 02 	      lda	INTIM
   3017  2091		       30 fb		      bmi	WaitForVblankEnd
   3018  2093		       a9 00		      lda	#0
   3019  2095		       85 02		      sta	WSYNC
   3020  2097		       85 01		      sta	VBLANK	;turn off VBLANK - it was turned on by overscan
   3021  2099		       85 2c		      sta	CXCLR
   3022  209b
   3023  209b
   3024  209b		       4c 60 f1 	      jmp	KernelRoutine
   3025  209e
   3026  209e
   3027  209e				   PositionASpriteSubroutine		;call this function with A == horizontal position (0-159)
   3028  209e							;and X == the object to be positioned (0=P0, 1=P1, 2=M0, etc.)
   3029  209e							;if you do not wish to write to P1 during this function, make
   3030  209e							;sure Y==0 before you call it.  This function will change Y, and A
   3031  209e							;will be the value put into HMxx when returned.
   3032  209e							;Call this function with at least 11 cycles left in the scanline 
   3033  209e							;(jsr + sec + sta WSYNC = 11); it will return 9 cycles
   3034  209e							;into the second scanline
   3035  209e		       38		      sec
   3036  209f		       85 02		      sta	WSYNC	;begin line 1
   3037  20a1		       8d 2b 00 	      sta.w	HMCLR	;+4	 4
   3038  20a4				   DivideBy15Loop
   3039  20a4		       e9 0f		      sbc	#15
   3040  20a6		       b0 fc		      bcs	DivideBy15Loop	;+4/5	8/13.../58
   3041  20a8
   3042  20a8		       a8		      tay		;+2	10/15/...60
   3043  20a9		       b9 0f ef 	      lda	FineAdjustTableEnd,Y	;+5	15/20/...65
   3044  20ac
   3045  20ac							;	15
   3046  20ac		       95 20		      sta	HMP0,X	;+4	19/24/...69
   3047  20ae		       95 10		      sta	RESP0,X	;+4	23/28/33/38/43/48/53/58/63/68/73
   3048  20b0		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   3049  20b2		       85 2a		      sta	HMOVE	;+3
   3050  20b4		       60		      rts		;+6	 9
   3051  20b5
   3052  20b5							;-------------------------------------------------------------------------
   3053  20b5
   3054  20b5				   PrePositionAllObjects
   3055  20b5
   3056  20b5		       a2 04		      ldx	#4
   3057  20b7		       a5 82		      lda	ballx
   3058  20b9		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3059  20bc
   3060  20bc		       ca		      dex
   3061  20bd		       a5 81		      lda	missile1x
   3062  20bf		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3063  20c2
   3064  20c2		       ca		      dex
   3065  20c3		       a5 80		      lda	missile0x
   3066  20c5		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3067  20c8
   3068  20c8		       ca		      dex
   3069  20c9		       ca		      dex
   3070  20ca		       a5 84		      lda	player0x
   3071  20cc		       20 9e f0 	      jsr	PositionASpriteSubroutine
   3072  20cf
   3073  20cf		       60		      rts
   3074  20d0
   3075  20d0
   3076  20d0							;-------------------------------------------------------------------------
   3077  20d0
   3078  20d0
   3079  20d0
   3080  20d0
   3081  20d0
   3082  20d0
   3083  20d0
   3084  20d0
   3085  20d0							;-------------------------------------------------------------------------
   3086  20d0
   3087  20d0
   3088  20d0				   KernelSetupSubroutine
   3089  20d0
   3090  20d0		       a2 04		      ldx	#4
   3091  20d2				   AdjustYValuesUpLoop
   3092  20d2		       b5 8e		      lda	NewSpriteY,X
   3093  20d4		       18		      clc
   3094  20d5		       69 02		      adc	#2
   3095  20d7		       95 8e		      sta	NewSpriteY,X
   3096  20d9		       ca		      dex
   3097  20da		       10 f6		      bpl	AdjustYValuesUpLoop
   3098  20dc
   3099  20dc
   3100  20dc		       a6 cd		      ldx	temp3	; first sprite displayed
   3101  20de
   3102  20de		       b5 9d		      lda	SpriteGfxIndex,x
   3103  20e0		       a8		      tay
   3104  20e1		       b9 8e 00 	      lda	NewSpriteY,y
   3105  20e4		       85 ce		      sta	RepoLine
   3106  20e6
   3107  20e6		       b5 9c		      lda	SpriteGfxIndex-1,x
   3108  20e8		       a8		      tay
   3109  20e9		       b9 8e 00 	      lda	NewSpriteY,y
   3110  20ec		       85 d0		      sta	temp6
   3111  20ee
   3112  20ee		       86 83		      stx	SpriteIndex
   3113  20f0
   3114  20f0
   3115  20f0
   3116  20f0		       a9 ff		      lda	#255
   3117  20f2		       85 a5		      sta	P1Bottom
   3118  20f4
   3119  20f4		       a5 8d		      lda	player0y
   3120  20f6				  -	      ifconst	screenheight
   3121  20f6				  -	      cmp	#screenheight+1
   3122  20f6					      else
   3123  20f6		       c9 59		      cmp	#$59
   3124  20f8					      endif
   3125  20f8		       90 04		      bcc	nottoohigh
   3126  20fa		       a5 a4		      lda	P0Bottom
   3127  20fc		       85 cf		      sta	P0Top
   3128  20fe
   3129  20fe
   3130  20fe
   3131  20fe				   nottoohigh
   3132  20fe		       60		      rts
   3133  20ff
   3134  20ff							;-------------------------------------------------------------------------
   3135  20ff
   3136  20ff
   3137  20ff
   3138  20ff
   3139  20ff
   3140  20ff							;*************************************************************************
   3141  20ff
   3142  20ff							;-------------------------------------------------------------------------
   3143  20ff							;-------------------------Data Below--------------------------------------
   3144  20ff							;-------------------------------------------------------------------------
   3145  20ff
   3146  20ff				   MaskTable
   3147  20ff		       01 03 07 0f*	      .byte.b	1,3,7,15,31
   3148  2104
   3149  2104							; shove 6-digit score routine here
   3150  2104
   3151  2104				   sixdigscore
   3152  2104		       a9 00		      lda	#0
   3153  2106							;	sta COLUBK
   3154  2106		       85 0d		      sta	PF0
   3155  2108		       85 0e		      sta	PF1
   3156  210a		       85 0f		      sta	PF2
   3157  210c		       85 1f		      sta	ENABL
   3158  210e		       85 1d		      sta	ENAM0
   3159  2110		       85 1e		      sta	ENAM1
   3160  2112							;end of kernel here
   3161  2112
   3162  2112
   3163  2112							; 6 digit score routine
   3164  2112							; lda #0
   3165  2112							; sta PF1
   3166  2112							; sta PF2
   3167  2112							; tax
   3168  2112
   3169  2112		       85 02		      sta	WSYNC	;,x
   3170  2114
   3171  2114							;		  STA WSYNC ;first one, need one more
   3172  2114		       85 0b		      sta	REFP0
   3173  2116		       85 0c		      sta	REFP1
   3174  2118		       85 1b		      STA	GRP0
   3175  211a		       85 1c		      STA	GRP1
   3176  211c		       85 2b		      sta	HMCLR
   3177  211e
   3178  211e							; restore P0pointer
   3179  211e
   3180  211e		       a5 a2		      lda	player0pointer
   3181  2120		       18		      clc
   3182  2121		       65 8d		      adc	player0y
   3183  2123		       38		      sec
   3184  2124		       e5 b0		      sbc	player0height
   3185  2126		       85 a2		      sta	player0pointer
   3186  2128		       e6 8d		      inc	player0y
   3187  212a
   3188  212a				  -	      ifconst	vblank_time
   3189  212a				  -	      ifconst	screenheight
   3190  212a				  -	      if	screenheight == 84
   3191  212a				  -	      lda	#vblank_time+9+128+10
   3192  212a				  -	      else
   3193  212a				  -	      lda	#vblank_time+9+128+19
   3194  212a				  -	      endif
   3195  212a				  -	      else
   3196  212a				  -	      lda	#vblank_time+9+128
   3197  212a				  -	      endif
   3198  212a					      else
   3199  212a				  -	      ifconst	screenheight
   3200  212a				  -	      if	screenheight == 84
   3201  212a				  -	      lda	#52+128+10
   3202  212a				  -	      else
   3203  212a				  -	      lda	#52+128+19
   3204  212a				  -	      endif
   3205  212a					      else
   3206  212a		       a9 b4		      lda	#52+128
   3207  212c					      endif
   3208  212c					      endif
   3209  212c
   3210  212c		       8d 96 02 	      sta	TIM64T
   3211  212f					      ifconst	minikernel
   3212  212f		       20 50 fd 	      jsr	minikernel
   3213  2132					      endif
   3214  2132				  -	      ifconst	noscore
   3215  2132				  -	      jmp	skipscore
   3216  2132					      endif
   3217  2132
   3218  2132							; score pointers contain:
   3219  2132							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   3220  2132							; swap lo2->temp1
   3221  2132							; swap lo4->temp3
   3222  2132							; swap lo6->temp5
   3223  2132
   3224  2132		       a5 ca		      lda	scorepointers+5
   3225  2134		       85 cf		      sta	temp5
   3226  2136		       a5 c6		      lda	scorepointers+1
   3227  2138		       85 cb		      sta	temp1
   3228  213a		       a5 c8		      lda	scorepointers+3
   3229  213c		       85 cd		      sta	temp3
   3230  213e
   3231  213e		       a9 ff		      lda	#>scoretable
   3232  2140		       85 c6		      sta	scorepointers+1
   3233  2142		       85 c8		      sta	scorepointers+3
   3234  2144		       85 ca		      sta	scorepointers+5
   3235  2146		       85 cc		      sta	temp2
   3236  2148		       85 ce		      sta	temp4
   3237  214a		       85 d0		      sta	temp6
   3238  214c
   3239  214c		       60		      rts
   3240  214d
   3241  214d
   3242  214d
   3243  214d							;-------------------------------------------------------------------------
   3244  214d							;----------------------Kernel Routine-------------------------------------
   3245  214d							;-------------------------------------------------------------------------
   3246  214d
   3247  214d
   3248  214d							;-------------------------------------------------------------------------
   3249  214d							; repeat $f147-*
   3250  214d							; brk
   3251  214d							; repend
   3252  214d							;	org $F240
   3253  214d
   3254  214d				   SwitchDrawP0K1		;	72
   3255  214d		       a5 a4		      lda	P0Bottom
   3256  214f		       85 cf		      sta	P0Top	;+6	 2
   3257  2151		       4c 8b f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   3258  2154
   3259  2154				   WaitDrawP0K1 		;	74
      0  2154					      SLEEP	4	;+4	 2
      1  2154				   .CYCLES    SET	4
      2  2154
      3  2154				  -	      IF	.CYCLES < 2
      4  2154				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2154				  -	      ERR
      6  2154					      ENDIF
      7  2154
      8  2154				  -	      IF	.CYCLES & 1
      9  2154				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2154				  -	      nop	0
     11  2154				  -	      ELSE
     12  2154				  -	      bit	VSYNC
     13  2154				  -	      ENDIF
     14  2154				  -.CYCLES    SET	.CYCLES - 3
     15  2154					      ENDIF
     16  2154
     17  2154					      REPEAT	.CYCLES / 2
     18  2154		       ea		      nop
     17  2154					      REPEND
     18  2155		       ea		      nop
     19  2156					      REPEND
   3261  2156		       4c 8b f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
   3262  2159
   3263  2159				   SkipDrawP1K1 		;	11
   3264  2159		       a9 00		      lda	#0
   3265  215b		       85 1c		      sta	GRP1	;+5	16	so Ball gets drawn
   3266  215d		       4c 94 f1 	      jmp	BackFromSkipDrawP1	;+3	19
   3267  2160
   3268  2160							;-------------------------------------------------------------------------
   3269  2160
   3270  2160				   KernelRoutine
   3271  2160					      ifnconst	screenheight
      0  2160					      sleep	12
      1  2160				   .CYCLES    SET	12
      2  2160
      3  2160				  -	      IF	.CYCLES < 2
      4  2160				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2160				  -	      ERR
      6  2160					      ENDIF
      7  2160
      8  2160				  -	      IF	.CYCLES & 1
      9  2160				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2160				  -	      nop	0
     11  2160				  -	      ELSE
     12  2160				  -	      bit	VSYNC
     13  2160				  -	      ENDIF
     14  2160				  -.CYCLES    SET	.CYCLES - 3
     15  2160					      ENDIF
     16  2160
     17  2160					      REPEAT	.CYCLES / 2
     18  2160		       ea		      nop
     17  2160					      REPEND
     18  2161		       ea		      nop
     17  2161					      REPEND
     18  2162		       ea		      nop
     17  2162					      REPEND
     18  2163		       ea		      nop
     17  2163					      REPEND
     18  2164		       ea		      nop
     17  2164					      REPEND
     18  2165		       ea		      nop
     19  2166					      REPEND
   3273  2166							; jsr wastetime ; waste 12 cycles
   3274  2166				  -	      else
   3275  2166				  -	      sleep	6
   3276  2166					      endif
   3277  2166		       ba		      tsx
   3278  2167		       86 f6		      stx	stack1
   3279  2169		       a2 1f		      ldx	#ENABL
   3280  216b		       9a		      txs		;+9	 9
   3281  216c
   3282  216c		       a2 00		      ldx	#0
   3283  216e		       a5 c4		      lda	pfheight
   3284  2170		       10 01		      bpl	asdhj
   3285  2172		       24		      .byte.b	$24
   3286  2173				   asdhj
   3287  2173		       aa		      tax
   3288  2174
   3289  2174							; ldx pfheight
   3290  2174		       bd 0f f0 	      lda	PFStart,x	; get pf pixel resolution for heights 15,7,3,1,0
   3291  2177
   3292  2177				  -	      ifconst	screenheight
   3293  2177				  -	      sec
   3294  2177				  -	      if	screenheight == 84
   3295  2177				  -	      sbc	pfsub+1,x
   3296  2177				  -	      else
   3297  2177				  -	      sbc	pfsub,x
   3298  2177				  -	      endif
   3299  2177					      endif
   3300  2177
   3301  2177		       85 ba		      sta	pfpixelheight
   3302  2179
   3303  2179				  -	      ifconst	screenheight
   3304  2179				  -	      ldy	#screenheight
   3305  2179					      else
   3306  2179		       a0 58		      ldy	#88
   3307  217b					      endif
   3308  217b
   3309  217b							;	lda #$02
   3310  217b							;	sta COLUBK		;+5	18
   3311  217b
   3312  217b							; sleep 25
      0  217b					      sleep	2
      1  217b				   .CYCLES    SET	2
      2  217b
      3  217b				  -	      IF	.CYCLES < 2
      4  217b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217b				  -	      ERR
      6  217b					      ENDIF
      7  217b
      8  217b				  -	      IF	.CYCLES & 1
      9  217b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  217b				  -	      nop	0
     11  217b				  -	      ELSE
     12  217b				  -	      bit	VSYNC
     13  217b				  -	      ENDIF
     14  217b				  -.CYCLES    SET	.CYCLES - 3
     15  217b					      ENDIF
     16  217b
     17  217b					      REPEAT	.CYCLES / 2
     18  217b		       ea		      nop
     19  217c					      REPEND
   3314  217c				   KernelLoopa		;	50
      0  217c					      SLEEP	7	;+4	54
      1  217c				   .CYCLES    SET	7
      2  217c
      3  217c				  -	      IF	.CYCLES < 2
      4  217c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  217c				  -	      ERR
      6  217c					      ENDIF
      7  217c
      8  217c					      IF	.CYCLES & 1
      9  217c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  217c		       04 00		      nop	0
     11  217e				  -	      ELSE
     12  217e				  -	      bit	VSYNC
     13  217e					      ENDIF
     14  217e				   .CYCLES    SET	.CYCLES - 3
     15  217e					      ENDIF
     16  217e
     17  217e					      REPEAT	.CYCLES / 2
     18  217e		       ea		      nop
     17  217e					      REPEND
     18  217f		       ea		      nop
     19  2180					      REPEND
   3316  2180				   KernelLoopb		;	54
      0  2180					      SLEEP	2	;+12	66
      1  2180				   .CYCLES    SET	2
      2  2180
      3  2180				  -	      IF	.CYCLES < 2
      4  2180				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2180				  -	      ERR
      6  2180					      ENDIF
      7  2180
      8  2180				  -	      IF	.CYCLES & 1
      9  2180				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2180				  -	      nop	0
     11  2180				  -	      ELSE
     12  2180				  -	      bit	VSYNC
     13  2180				  -	      ENDIF
     14  2180				  -.CYCLES    SET	.CYCLES - 3
     15  2180					      ENDIF
     16  2180
     17  2180					      REPEAT	.CYCLES / 2
     18  2180		       ea		      nop
     19  2181					      REPEND
   3318  2181		       c4 cf		      cpy	P0Top	;+3	69
   3319  2183		       f0 c8		      beq	SwitchDrawP0K1	;+2	71
   3320  2185		       10 cd		      bpl	WaitDrawP0K1	;+2	73
   3321  2187		       b1 a2		      lda	(player0pointer),Y	;+5	 2
   3322  2189		       85 1b		      sta	GRP0	;+3	 5	VDEL because of repokernel
   3323  218b				   BackFromSwitchDrawP0K1
   3324  218b
   3325  218b		       c4 a5		      cpy	P1Bottom	;+3	 8	unless we mean to draw immediately, this should be set
   3326  218d							;		to a value greater than maximum Y value initially
   3327  218d		       90 ca		      bcc	SkipDrawP1K1	;+2	10
   3328  218f		       b1 cc		      lda	(P1display),Y	;+5	15
   3329  2191		       8d 1c 00 	      sta.w	GRP1	;+4	19
   3330  2194				   BackFromSkipDrawP1
   3331  2194
   3332  2194							;fuck	
   3333  2194		       84 cb		      sty	temp1
   3334  2196		       a4 ba		      ldy	pfpixelheight
   3335  2198		       b3 bb		      lax	(PF1pointer),y
   3336  219a		       86 0e		      stx	PF1	;+7	26
   3337  219c		       b1 bd		      lda	(PF2pointer),y
   3338  219e		       85 0f		      sta	PF2	;+7	33
   3339  21a0							;sleep 6
   3340  21a0		       86 b7		      stx	PF1temp2
   3341  21a2		       85 b9		      sta	PF2temp2
   3342  21a4		       88		      dey
   3343  21a5		       30 35		      bmi	pagewraphandler
   3344  21a7		       b1 bb		      lda	(PF1pointer),y
   3345  21a9				   cyclebalance
   3346  21a9		       85 b6		      sta	PF1temp1
   3347  21ab		       b1 bd		      lda	(PF2pointer),y
   3348  21ad		       85 b8		      sta	PF2temp1
   3349  21af		       a4 cb		      ldy	temp1
   3350  21b1
   3351  21b1		       a2 1f		      ldx	#ENABL
   3352  21b3		       9a		      txs
   3353  21b4		       c4 8c		      cpy	bally
   3354  21b6		       08		      php		;+6	39	VDEL ball
   3355  21b7
   3356  21b7
   3357  21b7		       c4 8b		      cpy	missile1y
   3358  21b9		       08		      php		;+6	71
   3359  21ba
   3360  21ba		       c4 8a		      cpy	missile0y
   3361  21bc		       08		      php		;+6	 1
   3362  21bd
   3363  21bd
   3364  21bd		       88		      dey		;+2	15
   3365  21be
   3366  21be		       c4 ce		      cpy	RepoLine	;+3	18
   3367  21c0		       f0 62		      beq	RepoKernel	;+2	20
   3368  21c2							;	SLEEP 20		;+23	43
      0  21c2					      sleep	6
      1  21c2				   .CYCLES    SET	6
      2  21c2
      3  21c2				  -	      IF	.CYCLES < 2
      4  21c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21c2				  -	      ERR
      6  21c2					      ENDIF
      7  21c2
      8  21c2				  -	      IF	.CYCLES & 1
      9  21c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21c2				  -	      nop	0
     11  21c2				  -	      ELSE
     12  21c2				  -	      bit	VSYNC
     13  21c2				  -	      ENDIF
     14  21c2				  -.CYCLES    SET	.CYCLES - 3
     15  21c2					      ENDIF
     16  21c2
     17  21c2					      REPEAT	.CYCLES / 2
     18  21c2		       ea		      nop
     17  21c2					      REPEND
     18  21c3		       ea		      nop
     17  21c3					      REPEND
     18  21c4		       ea		      nop
     19  21c5					      REPEND
   3370  21c5
   3371  21c5				   newrepo		; since we have time here, store next repoline
   3372  21c5		       a6 83		      ldx	SpriteIndex
   3373  21c7		       b5 9c		      lda	SpriteGfxIndex-1,x
   3374  21c9		       aa		      tax
   3375  21ca		       b5 8e		      lda	NewSpriteY,x
   3376  21cc		       85 d0		      sta	temp6
      0  21ce					      sleep	4
      1  21ce				   .CYCLES    SET	4
      2  21ce
      3  21ce				  -	      IF	.CYCLES < 2
      4  21ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21ce				  -	      ERR
      6  21ce					      ENDIF
      7  21ce
      8  21ce				  -	      IF	.CYCLES & 1
      9  21ce				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21ce				  -	      nop	0
     11  21ce				  -	      ELSE
     12  21ce				  -	      bit	VSYNC
     13  21ce				  -	      ENDIF
     14  21ce				  -.CYCLES    SET	.CYCLES - 3
     15  21ce					      ENDIF
     16  21ce
     17  21ce					      REPEAT	.CYCLES / 2
     18  21ce		       ea		      nop
     17  21ce					      REPEND
     18  21cf		       ea		      nop
     19  21d0					      REPEND
   3378  21d0
   3379  21d0				   BackFromRepoKernel
   3380  21d0		       98		      tya		;+2	45
   3381  21d1		       25 c4		      and	pfheight	;+2	47
   3382  21d3		       d0 a7		      bne	KernelLoopa	;+2	49
   3383  21d5		       c6 ba		      dec	pfpixelheight
   3384  21d7		       10 a7		      bpl	KernelLoopb	;+3	54
   3385  21d9							;	bmi donewkernel		;+3	54
   3386  21d9							;	bne KernelLoopb+1		;+3	54
   3387  21d9
   3388  21d9				   donewkernel
   3389  21d9		       4c e3 f2 	      jmp	DoneWithKernel	;+3	56
   3390  21dc
   3391  21dc				   pagewraphandler
   3392  21dc		       4c a9 f1 	      jmp	cyclebalance
   3393  21df
   3394  21df							;-------------------------------------------------------------------------
   3395  21df
   3396  21df							; room here for score?
   3397  21df
   3398  21df				   setscorepointers
   3399  21df		       a7 d4		      lax	score+2
   3400  21e1		       20 fb f1 	      jsr	scorepointerset
   3401  21e4		       84 ca		      sty	scorepointers+5
   3402  21e6		       86 c7		      stx	scorepointers+2
   3403  21e8		       a7 d3		      lax	score+1
   3404  21ea		       20 fb f1 	      jsr	scorepointerset
   3405  21ed		       84 c9		      sty	scorepointers+4
   3406  21ef		       86 c6		      stx	scorepointers+1
   3407  21f1		       a7 d2		      lax	score
   3408  21f3		       20 fb f1 	      jsr	scorepointerset
   3409  21f6		       84 c8		      sty	scorepointers+3
   3410  21f8		       86 c5		      stx	scorepointers
   3411  21fa				   wastetime
   3412  21fa		       60		      rts
   3413  21fb
   3414  21fb				   scorepointerset
   3415  21fb		       29 0f		      and	#$0F
   3416  21fd		       0a		      asl
   3417  21fe		       0a		      asl
   3418  21ff		       0a		      asl
   3419  2200		       69 74		      adc	#<scoretable
   3420  2202		       a8		      tay
   3421  2203		       8a		      txa
   3422  2204		       29 f0		      and	#$F0
   3423  2206		       4a		      lsr
   3424  2207		       69 74		      adc	#<scoretable
   3425  2209		       aa		      tax
   3426  220a		       60		      rts
   3427  220b							;	align 256
   3428  220b
   3429  220b				   SwitchDrawP0KR		;	45
   3430  220b		       a5 a4		      lda	P0Bottom
   3431  220d		       85 cf		      sta	P0Top	;+6	51
   3432  220f		       4c 36 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   3433  2212
   3434  2212				   WaitDrawP0KR 		;	47
      0  2212					      SLEEP	4	;+4	51
      1  2212				   .CYCLES    SET	4
      2  2212
      3  2212				  -	      IF	.CYCLES < 2
      4  2212				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2212				  -	      ERR
      6  2212					      ENDIF
      7  2212
      8  2212				  -	      IF	.CYCLES & 1
      9  2212				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2212				  -	      nop	0
     11  2212				  -	      ELSE
     12  2212				  -	      bit	VSYNC
     13  2212				  -	      ENDIF
     14  2212				  -.CYCLES    SET	.CYCLES - 3
     15  2212					      ENDIF
     16  2212
     17  2212					      REPEAT	.CYCLES / 2
     18  2212		       ea		      nop
     17  2212					      REPEND
     18  2213		       ea		      nop
     19  2214					      REPEND
   3436  2214		       4c 36 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
   3437  2217
   3438  2217							;-----------------------------------------------------------
   3439  2217
   3440  2217				   noUpdateXKR
   3441  2217		       a2 01		      ldx	#1
   3442  2219		       cc cf 00 	      cpy.w	P0Top
   3443  221c		       4c 2e f2 	      JMP	retXKR
   3444  221f
   3445  221f				   skipthis
   3446  221f		       a2 01		      ldx	#1
   3447  2221		       4c 70 f2 	      jmp	goback
   3448  2224
   3449  2224				   RepoKernel		;	22	crosses page boundary
   3450  2224		       98		      tya
   3451  2225		       25 c4		      and	pfheight	;+2	26
   3452  2227		       d0 ee		      bne	noUpdateXKR	;+2	28
   3453  2229		       aa		      tax
   3454  222a							;	dex			;+2	30
   3455  222a		       c6 ba		      dec	pfpixelheight
   3456  222c							;	stx Temp		;+3	35
   3457  222c							;	SLEEP 3
   3458  222c
   3459  222c		       c4 cf		      cpy	P0Top	;+3	42
   3460  222e				   retXKR
   3461  222e		       f0 db		      beq	SwitchDrawP0KR	;+2	44
   3462  2230		       10 e0		      bpl	WaitDrawP0KR	;+2	46
   3463  2232		       b1 a2		      lda	(player0pointer),Y	;+5	51
   3464  2234		       85 1b		      sta	GRP0	;+3	54	VDEL
   3465  2236				   BackFromSwitchDrawP0KR
   3466  2236		       38		      sec		;+2	56
   3467  2237
   3468  2237
   3469  2237
   3470  2237		       b5 b8		      lda	PF2temp1,X
   3471  2239		       b4 b6		      ldy	PF1temp1,X
   3472  223b
   3473  223b		       a6 83		      ldx	SpriteIndex	;+3	 2
   3474  223d
   3475  223d		       85 0f		      sta	PF2	;+7	63
   3476  223f
   3477  223f		       b5 9d		      lda	SpriteGfxIndex,x
   3478  2241		       84 0e		      sty	PF1	;+7	70	too early?
   3479  2243		       aa		      tax
   3480  2244		       a9 00		      lda	#0
   3481  2246		       85 1c		      sta	GRP1	;+5	75	to display player 0
   3482  2248		       b5 85		      lda	NewSpriteX,X	;+4	 6
   3483  224a
   3484  224a				   DivideBy15LoopK		;	 6	(carry set above)
   3485  224a		       e9 0f		      sbc	#15
   3486  224c		       b0 fc		      bcs	DivideBy15LoopK	;+4/5	10/15.../60
   3487  224e
   3488  224e		       aa		      tax		;+2	12/17/...62
   3489  224f		       bd 0f ef 	      lda	FineAdjustTableEnd,X	;+5	17/22/...67
   3490  2252
   3491  2252		       85 21		      sta	HMP1	;+3	20/25/...70
   3492  2254		       85 11		      sta	RESP1	;+3	23/28/33/38/43/48/53/58/63/68/73
   3493  2256		       85 02		      sta	WSYNC	;+3	 0	begin line 2
   3494  2258							;sta HMOVE			;+3	 3
   3495  2258
   3496  2258		       a2 1f		      ldx	#ENABL
   3497  225a		       9a		      txs		;+4	25
   3498  225b		       a4 ce		      ldy	RepoLine	; restore y
   3499  225d		       c4 8c		      cpy	bally
   3500  225f		       08		      php		;+6	 9	VDEL ball
   3501  2260
   3502  2260		       c4 8b		      cpy	missile1y
   3503  2262		       08		      php		;+6	15
   3504  2263
   3505  2263		       c4 8a		      cpy	missile0y
   3506  2265		       08		      php		;+6	21
   3507  2266
   3508  2266
   3509  2266
   3510  2266
   3511  2266
   3512  2266							;15 cycles
   3513  2266		       98		      tya
   3514  2267		       25 c4		      and	pfheight
   3515  2269							;eor #1
   3516  2269		       29 fe		      and	#$FE
   3517  226b		       d0 b2		      bne	skipthis
   3518  226d		       aa		      tax
      0  226e					      sleep	4
      1  226e				   .CYCLES    SET	4
      2  226e
      3  226e				  -	      IF	.CYCLES < 2
      4  226e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  226e				  -	      ERR
      6  226e					      ENDIF
      7  226e
      8  226e				  -	      IF	.CYCLES & 1
      9  226e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  226e				  -	      nop	0
     11  226e				  -	      ELSE
     12  226e				  -	      bit	VSYNC
     13  226e				  -	      ENDIF
     14  226e				  -.CYCLES    SET	.CYCLES - 3
     15  226e					      ENDIF
     16  226e
     17  226e					      REPEAT	.CYCLES / 2
     18  226e		       ea		      nop
     17  226e					      REPEND
     18  226f		       ea		      nop
     19  2270					      REPEND
   3520  2270							;	sleep 2
   3521  2270				   goback
   3522  2270
   3523  2270		       88		      dey
   3524  2271		       c4 cf		      cpy	P0Top	;+3	52
   3525  2273		       f0 62		      beq	SwitchDrawP0KV	;+2	54
   3526  2275		       10 67		      bpl	WaitDrawP0KV	;+2	56
   3527  2277		       b1 a2		      lda	(player0pointer),Y	;+5	61
   3528  2279		       85 1b		      sta	GRP0	;+3	64	VDEL
   3529  227b				   BackFromSwitchDrawP0KV
   3530  227b
   3531  227b							; sleep 3
   3532  227b
   3533  227b		       b5 b8		      lda	PF2temp1,X
   3534  227d		       85 0f		      sta	PF2	;+7	 5
   3535  227f		       b5 b6		      lda	PF1temp1,X
   3536  2281		       85 0e		      sta	PF1	;+7	74 
   3537  2283		       85 2a		      sta	HMOVE
   3538  2285
   3539  2285		       a9 00		      lda	#0
   3540  2287		       85 1c		      sta	GRP1	;+5	10	to display GRP0
   3541  2289
   3542  2289		       a2 1f		      ldx	#ENABL
   3543  228b		       9a		      txs		;+4	 8
   3544  228c
   3545  228c		       a6 83		      ldx	SpriteIndex	;+3	13	restore index into new sprite vars
   3546  228e							;--now, set all new variables and return to main kernel loop
   3547  228e
   3548  228e
   3549  228e							;
   3550  228e		       b5 9d		      lda	SpriteGfxIndex,X	;+4	31
   3551  2290		       aa		      tax		;+2	33
   3552  2291							;
   3553  2291
   3554  2291
   3555  2291
   3556  2291		       b5 93		      lda	NewNUSIZ,X
   3557  2293		       85 05		      sta	NUSIZ1	;+7	20
   3558  2295		       85 0c		      sta	REFP1
   3559  2297		       b5 98		      lda	NewCOLUP1,X
   3560  2299		       85 07		      sta	COLUP1	;+7	27
   3561  229b
   3562  229b							;	lda SpriteGfxIndex,X	;+4	31
   3563  229b							;	tax				;+2	33
   3564  229b							;fuck2
   3565  229b		       b5 8e		      lda	NewSpriteY,X	;+4	46
   3566  229d		       38		      sec		;+2	38
   3567  229e		       f5 b1		      sbc	spriteheight,X	;+4	42
   3568  22a0		       85 a5		      sta	P1Bottom	;+3	45
   3569  22a2
      0  22a2					      sleep	6
      1  22a2				   .CYCLES    SET	6
      2  22a2
      3  22a2				  -	      IF	.CYCLES < 2
      4  22a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22a2				  -	      ERR
      6  22a2					      ENDIF
      7  22a2
      8  22a2				  -	      IF	.CYCLES & 1
      9  22a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22a2				  -	      nop	0
     11  22a2				  -	      ELSE
     12  22a2				  -	      bit	VSYNC
     13  22a2				  -	      ENDIF
     14  22a2				  -.CYCLES    SET	.CYCLES - 3
     15  22a2					      ENDIF
     16  22a2
     17  22a2					      REPEAT	.CYCLES / 2
     18  22a2		       ea		      nop
     17  22a2					      REPEND
     18  22a3		       ea		      nop
     17  22a3					      REPEND
     18  22a4		       ea		      nop
     19  22a5					      REPEND
   3571  22a5		       b5 a6		      lda	player1pointerlo,X	;+4	49
   3572  22a7		       e5 a5		      sbc	P1Bottom	;+3	52	carry should still be set
   3573  22a9		       85 cc		      sta	P1display	;+3	55
   3574  22ab		       b5 ab		      lda	player1pointerhi,X
   3575  22ad		       85 cd		      sta	P1display+1	;+7	62
   3576  22af
   3577  22af
   3578  22af		       c4 8c		      cpy	bally
   3579  22b1		       08		      php		;+6	68	VDELed
   3580  22b2
   3581  22b2		       c4 8b		      cpy	missile1y
   3582  22b4		       08		      php		;+6	74
   3583  22b5
   3584  22b5		       c4 8a		      cpy	missile0y
   3585  22b7		       08		      php		;+6	 4
   3586  22b8
   3587  22b8
   3588  22b8
   3589  22b8							; lda SpriteGfxIndex-1,x
   3590  22b8							; sleep 3
   3591  22b8		       c6 83		      dec	SpriteIndex	;+5	13
   3592  22ba							; tax
   3593  22ba							; lda NewSpriteY,x
   3594  22ba							; sta RepoLine
   3595  22ba
   3596  22ba							; 10 cycles below...
   3597  22ba		       10 05		      bpl	SetNextLine
   3598  22bc		       a9 ff		      lda	#255
   3599  22be		       4c c4 f2 	      jmp	SetLastLine
   3600  22c1				   SetNextLine
   3601  22c1							;	lda NewSpriteY-1,x
   3602  22c1		       ad d0 00 	      lda.w	temp6
   3603  22c4				   SetLastLine
   3604  22c4		       85 ce		      sta	RepoLine
   3605  22c6
   3606  22c6		       98		      tya
   3607  22c7		       25 c4		      and	pfheight
   3608  22c9		       d0 06		      bne	nodec
   3609  22cb		       c6 ba		      dec	pfpixelheight
   3610  22cd		       88		      dey		;+2	30
   3611  22ce
   3612  22ce							; 10 cycles 
   3613  22ce
   3614  22ce
   3615  22ce		       4c d0 f1 	      jmp	BackFromRepoKernel	;+3	43
   3616  22d1
   3617  22d1				   nodec
      0  22d1					      sleep	4
      1  22d1				   .CYCLES    SET	4
      2  22d1
      3  22d1				  -	      IF	.CYCLES < 2
      4  22d1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22d1				  -	      ERR
      6  22d1					      ENDIF
      7  22d1
      8  22d1				  -	      IF	.CYCLES & 1
      9  22d1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22d1				  -	      nop	0
     11  22d1				  -	      ELSE
     12  22d1				  -	      bit	VSYNC
     13  22d1				  -	      ENDIF
     14  22d1				  -.CYCLES    SET	.CYCLES - 3
     15  22d1					      ENDIF
     16  22d1
     17  22d1					      REPEAT	.CYCLES / 2
     18  22d1		       ea		      nop
     17  22d1					      REPEND
     18  22d2		       ea		      nop
     19  22d3					      REPEND
   3619  22d3		       88		      dey
   3620  22d4		       4c d0 f1 	      jmp	BackFromRepoKernel
   3621  22d7
   3622  22d7							;-------------------------------------------------------------------------
   3623  22d7
   3624  22d7
   3625  22d7				   SwitchDrawP0KV		;	69
   3626  22d7		       a5 a4		      lda	P0Bottom
   3627  22d9		       85 cf		      sta	P0Top	;+6	75
   3628  22db		       4c 7b f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   3629  22de
   3630  22de				   WaitDrawP0KV 		;	71
      0  22de					      SLEEP	4	;+4	75
      1  22de				   .CYCLES    SET	4
      2  22de
      3  22de				  -	      IF	.CYCLES < 2
      4  22de				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22de				  -	      ERR
      6  22de					      ENDIF
      7  22de
      8  22de				  -	      IF	.CYCLES & 1
      9  22de				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22de				  -	      nop	0
     11  22de				  -	      ELSE
     12  22de				  -	      bit	VSYNC
     13  22de				  -	      ENDIF
     14  22de				  -.CYCLES    SET	.CYCLES - 3
     15  22de					      ENDIF
     16  22de
     17  22de					      REPEAT	.CYCLES / 2
     18  22de		       ea		      nop
     17  22de					      REPEND
     18  22df		       ea		      nop
     19  22e0					      REPEND
   3632  22e0		       4c 7b f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
   3633  22e3
   3634  22e3							;-------------------------------------------------------------------------
   3635  22e3
   3636  22e3				   DoneWithKernel
   3637  22e3
   3638  22e3				   BottomOfKernelLoop
   3639  22e3
   3640  22e3		       85 02		      sta	WSYNC
   3641  22e5		       a6 f6		      ldx	stack1
   3642  22e7		       9a		      txs
   3643  22e8		       20 04 f1 	      jsr	sixdigscore	; set up score
   3644  22eb
   3645  22eb
   3646  22eb		       85 02		      sta	WSYNC
   3647  22ed		       a2 00		      ldx	#0
   3648  22ef		       85 2b		      sta	HMCLR
   3649  22f1		       86 1b		      STx	GRP0
   3650  22f3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   3651  22f5
   3652  22f5		       a0 07		      LDY	#7
   3653  22f7		       84 25		      STy	VDELP0
   3654  22f9		       84 26		      STy	VDELP1
   3655  22fb		       a9 10		      LDA	#$10
   3656  22fd		       85 21		      STA	HMP1
   3657  22ff		       a5 d5		      LDA	scorecolor
   3658  2301		       85 06		      STA	COLUP0
   3659  2303		       85 07		      STA	COLUP1
   3660  2305
   3661  2305		       a9 03		      LDA	#$03
   3662  2307		       85 04		      STA	NUSIZ0
   3663  2309		       85 05		      STA	NUSIZ1
   3664  230b
   3665  230b		       85 10		      STA	RESP0
   3666  230d		       85 11		      STA	RESP1
   3667  230f
      0  230f					      sleep	9
      1  230f				   .CYCLES    SET	9
      2  230f
      3  230f				  -	      IF	.CYCLES < 2
      4  230f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  230f				  -	      ERR
      6  230f					      ENDIF
      7  230f
      8  230f					      IF	.CYCLES & 1
      9  230f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  230f		       04 00		      nop	0
     11  2311				  -	      ELSE
     12  2311				  -	      bit	VSYNC
     13  2311					      ENDIF
     14  2311				   .CYCLES    SET	.CYCLES - 3
     15  2311					      ENDIF
     16  2311
     17  2311					      REPEAT	.CYCLES / 2
     18  2311		       ea		      nop
     17  2311					      REPEND
     18  2312		       ea		      nop
     17  2312					      REPEND
     18  2313		       ea		      nop
     19  2314					      REPEND
   3669  2314		       b1 c5		      lda	(scorepointers),y
   3670  2316		       85 1b		      sta	GRP0
   3671  2318				  -	      ifconst	pfscore
   3672  2318				  -	      lda	pfscorecolor
   3673  2318				  -	      sta	COLUPF
   3674  2318					      else
      0  2318					      sleep	6
      1  2318				   .CYCLES    SET	6
      2  2318
      3  2318				  -	      IF	.CYCLES < 2
      4  2318				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2318				  -	      ERR
      6  2318					      ENDIF
      7  2318
      8  2318				  -	      IF	.CYCLES & 1
      9  2318				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2318				  -	      nop	0
     11  2318				  -	      ELSE
     12  2318				  -	      bit	VSYNC
     13  2318				  -	      ENDIF
     14  2318				  -.CYCLES    SET	.CYCLES - 3
     15  2318					      ENDIF
     16  2318
     17  2318					      REPEAT	.CYCLES / 2
     18  2318		       ea		      nop
     17  2318					      REPEND
     18  2319		       ea		      nop
     17  2319					      REPEND
     18  231a		       ea		      nop
     19  231b					      REPEND
   3676  231b					      endif
   3677  231b
   3678  231b		       85 2a		      STA	HMOVE
   3679  231d		       b1 cd		      lda	(scorepointers+8),y
   3680  231f							; sta WSYNC
   3681  231f							;sleep 2
   3682  231f		       4c 2c f3 	      jmp	beginscore
   3683  2322
   3684  2322
   3685  2322				   loop2
   3686  2322		       b1 c5		      lda	(scorepointers),y	;+5  68  204
   3687  2324		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
   3688  2326				  -	      ifconst	pfscore
   3689  2326				  -	      lda.w	pfscore1
   3690  2326				  -	      sta	PF1
   3691  2326					      else
      0  2326					      sleep	7
      1  2326				   .CYCLES    SET	7
      2  2326
      3  2326				  -	      IF	.CYCLES < 2
      4  2326				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2326				  -	      ERR
      6  2326					      ENDIF
      7  2326
      8  2326					      IF	.CYCLES & 1
      9  2326					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2326		       04 00		      nop	0
     11  2328				  -	      ELSE
     12  2328				  -	      bit	VSYNC
     13  2328					      ENDIF
     14  2328				   .CYCLES    SET	.CYCLES - 3
     15  2328					      ENDIF
     16  2328
     17  2328					      REPEAT	.CYCLES / 2
     18  2328		       ea		      nop
     17  2328					      REPEND
     18  2329		       ea		      nop
     19  232a					      REPEND
   3693  232a					      endif
   3694  232a							; cycle 0
   3695  232a		       b1 cd		      lda	(scorepointers+$8),y	;+5   5   15
   3696  232c				   beginscore
   3697  232c		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
   3698  232e		       b1 cb		      lda	(scorepointers+$6),y	;+5  13   39
   3699  2330		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
   3700  2332		       b3 c7		      lax	(scorepointers+$2),y	;+5  29   87
   3701  2334		       9a		      txs
   3702  2335		       b3 c9		      lax	(scorepointers+$4),y	;+5  36  108
      0  2337					      sleep	3
      1  2337				   .CYCLES    SET	3
      2  2337
      3  2337				  -	      IF	.CYCLES < 2
      4  2337				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2337				  -	      ERR
      6  2337					      ENDIF
      7  2337
      8  2337					      IF	.CYCLES & 1
      9  2337					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2337		       04 00		      nop	0
     11  2339				  -	      ELSE
     12  2339				  -	      bit	VSYNC
     13  2339					      ENDIF
     14  2339				   .CYCLES    SET	.CYCLES - 3
     15  2339					      ENDIF
     16  2339
     17  2339				  -	      REPEAT	.CYCLES / 2
     18  2339				  -	      nop
     19  2339					      REPEND
   3704  2339				  -	      ifconst	pfscore
   3705  2339				  -	      lda	pfscore2
   3706  2339				  -	      sta	PF1
   3707  2339					      else
      0  2339					      sleep	6
      1  2339				   .CYCLES    SET	6
      2  2339
      3  2339				  -	      IF	.CYCLES < 2
      4  2339				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2339				  -	      ERR
      6  2339					      ENDIF
      7  2339
      8  2339				  -	      IF	.CYCLES & 1
      9  2339				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2339				  -	      nop	0
     11  2339				  -	      ELSE
     12  2339				  -	      bit	VSYNC
     13  2339				  -	      ENDIF
     14  2339				  -.CYCLES    SET	.CYCLES - 3
     15  2339					      ENDIF
     16  2339
     17  2339					      REPEAT	.CYCLES / 2
     18  2339		       ea		      nop
     17  2339					      REPEND
     18  233a		       ea		      nop
     17  233a					      REPEND
     18  233b		       ea		      nop
     19  233c					      REPEND
   3709  233c					      endif
   3710  233c		       b1 cf		      lda	(scorepointers+$A),y	;+5  21   63
   3711  233e		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
   3712  2340		       ba		      tsx
   3713  2341		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
   3714  2343		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
   3715  2345		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
   3716  2347		       88		      dey
   3717  2348		       10 d8		      bpl	loop2	;+2  60  180
   3718  234a		       a6 f6		      ldx	stack1
   3719  234c		       9a		      txs
   3720  234d
   3721  234d
   3722  234d							; lda scorepointers+1
   3723  234d		       a4 cb		      ldy	temp1
   3724  234f							; sta temp1
   3725  234f		       84 c6		      sty	scorepointers+1
   3726  2351
   3727  2351		       a9 00		      LDA	#0
   3728  2353		       85 1b		      STA	GRP0
   3729  2355		       85 1c		      STA	GRP1
   3730  2357		       85 0e		      sta	PF1
   3731  2359		       85 25		      STA	VDELP0
   3732  235b		       85 26		      STA	VDELP1	;do we need these
   3733  235d		       85 04		      STA	NUSIZ0
   3734  235f		       85 05		      STA	NUSIZ1
   3735  2361
   3736  2361							; lda scorepointers+3
   3737  2361		       a4 cd		      ldy	temp3
   3738  2363							; sta temp3
   3739  2363		       84 c8		      sty	scorepointers+3
   3740  2365
   3741  2365							; lda scorepointers+5
   3742  2365		       a4 cf		      ldy	temp5
   3743  2367							; sta temp5
   3744  2367		       84 ca		      sty	scorepointers+5
   3745  2369
   3746  2369
   3747  2369							;-------------------------------------------------------------------------
   3748  2369							;------------------------Overscan Routine---------------------------------
   3749  2369							;-------------------------------------------------------------------------
   3750  2369
   3751  2369				   OverscanRoutine
   3752  2369
   3753  2369
   3754  2369
   3755  2369				   skipscore
   3756  2369		       a9 02		      lda	#2
   3757  236b		       85 02		      sta	WSYNC
   3758  236d		       85 01		      sta	VBLANK	;turn on VBLANK
   3759  236f
   3760  236f
   3761  236f
   3762  236f
   3763  236f
   3764  236f							;-------------------------------------------------------------------------
   3765  236f							;----------------------------End Main Routines----------------------------
   3766  236f							;-------------------------------------------------------------------------
   3767  236f
   3768  236f
   3769  236f							;*************************************************************************
   3770  236f
   3771  236f							;-------------------------------------------------------------------------
   3772  236f							;----------------------Begin Subroutines----------------------------------
   3773  236f							;-------------------------------------------------------------------------
   3774  236f
   3775  236f
   3776  236f
   3777  236f
   3778  236f				   KernelCleanupSubroutine
   3779  236f
   3780  236f		       a2 04		      ldx	#4
   3781  2371				   AdjustYValuesDownLoop
   3782  2371		       b5 8e		      lda	NewSpriteY,X
   3783  2373		       38		      sec
   3784  2374		       e9 02		      sbc	#2
   3785  2376		       95 8e		      sta	NewSpriteY,X
   3786  2378		       ca		      dex
   3787  2379		       10 f6		      bpl	AdjustYValuesDownLoop
   3788  237b
   3789  237b
      0  237b					      RETURN
      1  237b				  -	      ifnconst	bankswitch
      2  237b				  -	      rts
      3  237b					      else
      4  237b		       4c dd ff 	      jmp	BS_return
      5  237e					      endif
   3791  237e							;rts
   3792  237e
   3793  237e				   SetupP1Subroutine
   3794  237e							; flickersort algorithm
   3795  237e							; count 4-0
   3796  237e							; table2=table1 (?)
   3797  237e							; detect overlap of sprites in table 2
   3798  237e							; if overlap, do regular sort in table2, then place one sprite at top of table 1, decrement # displayed
   3799  237e							; if no overlap, do regular sort in table 2 and table 1
   3800  237e				   fsstart
   3801  237e		       a2 ff		      ldx	#255
   3802  2380				   copytable
   3803  2380		       e8		      inx
   3804  2381		       b5 f1		      lda	spritesort,x
   3805  2383		       95 9d		      sta	SpriteGfxIndex,x
   3806  2385		       e0 04		      cpx	#4
   3807  2387		       d0 f7		      bne	copytable
   3808  2389
   3809  2389		       86 cd		      stx	temp3	; highest displayed sprite
   3810  238b		       ca		      dex
   3811  238c		       86 cc		      stx	temp2
   3812  238e				   sortloop
   3813  238e		       a6 cc		      ldx	temp2
   3814  2390		       b5 f1		      lda	spritesort,x
   3815  2392		       aa		      tax
   3816  2393		       b5 8e		      lda	NewSpriteY,x
   3817  2395		       85 cb		      sta	temp1
   3818  2397
   3819  2397		       a6 cc		      ldx	temp2
   3820  2399		       b5 f2		      lda	spritesort+1,x
   3821  239b		       aa		      tax
   3822  239c		       b5 8e		      lda	NewSpriteY,x
   3823  239e		       38		      sec
   3824  239f		       18		      clc
   3825  23a0		       e5 cb		      sbc	temp1
   3826  23a2		       90 0e		      bcc	largerXislower
   3827  23a4
   3828  23a4							; larger x is higher (A>=temp1)
   3829  23a4		       d5 b1		      cmp	spriteheight,x
   3830  23a6		       b0 2f		      bcs	countdown
   3831  23a8							; overlap with x+1>x
   3832  23a8							; 
   3833  23a8							; stick x at end of gfxtable, dec counter
   3834  23a8				   overlapping
   3835  23a8		       c6 cd		      dec	temp3
   3836  23aa		       a6 cc		      ldx	temp2
   3837  23ac							; inx
   3838  23ac		       20 eb f3 	      jsr	shiftnumbers
   3839  23af		       4c cd f3 	      jmp	skipswapGfxtable
   3840  23b2
   3841  23b2				   largerXislower		; (temp1>A)
   3842  23b2		       a8		      tay
   3843  23b3		       a6 cc		      ldx	temp2
   3844  23b5		       b5 f1		      lda	spritesort,x
   3845  23b7		       aa		      tax
   3846  23b8		       98		      tya
   3847  23b9		       49 ff		      eor	#$FF
   3848  23bb		       e9 01		      sbc	#1
   3849  23bd		       90 e9		      bcc	overlapping
   3850  23bf		       d5 b1		      cmp	spriteheight,x
   3851  23c1		       b0 0a		      bcs	notoverlapping
   3852  23c3
   3853  23c3		       c6 cd		      dec	temp3
   3854  23c5		       a6 cc		      ldx	temp2
   3855  23c7							; inx
   3856  23c7		       20 eb f3 	      jsr	shiftnumbers
   3857  23ca		       4c cd f3 	      jmp	skipswapGfxtable
   3858  23cd				   notoverlapping
   3859  23cd							; ldx temp2 ; swap display table
   3860  23cd							; ldy SpriteGfxIndex+1,x
   3861  23cd							; lda SpriteGfxIndex,x
   3862  23cd							; sty SpriteGfxIndex,x
   3863  23cd							; sta SpriteGfxIndex+1,x 
   3864  23cd
   3865  23cd				   skipswapGfxtable
   3866  23cd		       a6 cc		      ldx	temp2	; swap sort table
   3867  23cf		       b4 f2		      ldy	spritesort+1,x
   3868  23d1		       b5 f1		      lda	spritesort,x
   3869  23d3		       94 f1		      sty	spritesort,x
   3870  23d5		       95 f2		      sta	spritesort+1,x
   3871  23d7
   3872  23d7				   countdown
   3873  23d7		       c6 cc		      dec	temp2
   3874  23d9		       10 b3		      bpl	sortloop
   3875  23db
   3876  23db				   checktoohigh
   3877  23db		       a6 cd		      ldx	temp3
   3878  23dd		       b5 9d		      lda	SpriteGfxIndex,x
   3879  23df		       aa		      tax
   3880  23e0		       b5 8e		      lda	NewSpriteY,x
   3881  23e2				  -	      ifconst	screenheight
   3882  23e2				  -	      cmp	#screenheight-3
   3883  23e2					      else
   3884  23e2		       c9 55		      cmp	#$55
   3885  23e4					      endif
   3886  23e4		       90 04		      bcc	nonetoohigh
   3887  23e6		       c6 cd		      dec	temp3
   3888  23e8		       d0 f1		      bne	checktoohigh
   3889  23ea
   3890  23ea				   nonetoohigh
   3891  23ea		       60		      rts
   3892  23eb
   3893  23eb
   3894  23eb				   shiftnumbers
   3895  23eb							; stick current x at end, shift others down
   3896  23eb							; if x=4: don't do anything
   3897  23eb							; if x=3: swap 3 and 4
   3898  23eb							; if x=2: 2=3, 3=4, 4=2
   3899  23eb							; if x=1: 1=2, 2=3, 3=4, 4=1
   3900  23eb							; if x=0: 0=1, 1=2, 2=3, 3=4, 4=0
   3901  23eb							; ldy SpriteGfxIndex,x
   3902  23eb				   swaploop
   3903  23eb		       e0 04		      cpx	#4
   3904  23ed		       f0 08		      beq	shiftdone
   3905  23ef		       b5 9e		      lda	SpriteGfxIndex+1,x
   3906  23f1		       95 9d		      sta	SpriteGfxIndex,x
   3907  23f3		       e8		      inx
   3908  23f4		       4c eb f3 	      jmp	swaploop
   3909  23f7				   shiftdone
   3910  23f7							; sty SpriteGfxIndex,x
   3911  23f7		       60		      rts
   3912  23f8
   3913  23f8				  -	      ifconst	debugscore
   3914  23f8				  -debugcycles
   3915  23f8				  -	      ldx	#14
   3916  23f8				  -	      lda	INTIM	; display # cycles left in the score
   3917  23f8				  -
   3918  23f8				  -	      ifconst	mincycles
   3919  23f8				  -	      lda	mincycles
   3920  23f8				  -	      cmp	INTIM
   3921  23f8				  -	      lda	mincycles
   3922  23f8				  -	      bcc	nochange
   3923  23f8				  -	      lda	INTIM
   3924  23f8				  -	      sta	mincycles
   3925  23f8				  -nochange
   3926  23f8				  -	      endif
   3927  23f8				  -
   3928  23f8				  -			;   cmp #$2B
   3929  23f8				  -			;   bcs no_cycles_left
   3930  23f8				  -	      bmi	cycles_left
   3931  23f8				  -	      ldx	#64
   3932  23f8				  -	      eor	#$ff	;make negative
   3933  23f8				  -cycles_left
   3934  23f8				  -	      stx	scorecolor
   3935  23f8				  -	      and	#$7f	; clear sign bit
   3936  23f8				  -	      tax
   3937  23f8				  -	      lda	scorebcd,x
   3938  23f8				  -	      sta	score+2
   3939  23f8				  -	      lda	scorebcd1,x
   3940  23f8				  -	      sta	score+1
   3941  23f8				  -	      rts
   3942  23f8				  -scorebcd
   3943  23f8				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   3944  23f8				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   3945  23f8				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   3946  23f8				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   3947  23f8				  -scorebcd1
   3948  23f8				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   3949  23f8				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   3950  23f8				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   3951  23f8				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   3952  23f8					      endif
   3953  23f8				   start
   3954  23f8		       78		      sei
   3955  23f9		       d8		      cld
   3956  23fa		       a0 00		      ldy	#0
   3957  23fc		       a5 d0		      lda	$D0
   3958  23fe		       c9 2c		      cmp	#$2C	;check RAM location #1
   3959  2400		       d0 07		      bne	MachineIs2600
   3960  2402		       a5 d1		      lda	$D1
   3961  2404		       c9 a9		      cmp	#$A9	;check RAM location #2
   3962  2406		       d0 01		      bne	MachineIs2600
   3963  2408		       88		      dey
   3964  2409				   MachineIs2600
   3965  2409		       a2 00		      ldx	#0
   3966  240b		       8a		      txa
   3967  240c				   clearmem
   3968  240c		       e8		      inx
   3969  240d		       9a		      txs
   3970  240e		       48		      pha
   3971  240f		       d0 fb		      bne	clearmem
   3972  2411		       84 cb		      sty	temp1
   3973  2413				  -	      ifnconst	multisprite
   3974  2413				  -	      ifconst	pfrowheight
   3975  2413				  -	      lda	#pfrowheight
   3976  2413				  -	      else
   3977  2413				  -	      ifconst	pfres
   3978  2413				  -	      lda	#(96/pfres)
   3979  2413				  -	      else
   3980  2413				  -	      lda	#8
   3981  2413				  -	      endif
   3982  2413				  -	      endif
   3983  2413				  -	      sta	playfieldpos
   3984  2413					      endif
   3985  2413		       a2 05		      ldx	#5
   3986  2415				   initscore
   3987  2415		       a9 74		      lda	#<scoretable
   3988  2417		       95 c5		      sta	scorepointers,x
   3989  2419		       ca		      dex
   3990  241a		       10 f9		      bpl	initscore
   3991  241c		       a9 01		      lda	#1
   3992  241e		       85 0a		      sta	CTRLPF
   3993  2420		       0d 84 02 	      ora	INTIM
   3994  2423		       85 d6		      sta	rand
   3995  2425
   3996  2425					      ifconst	multisprite
   3997  2425		       20 1f f0 	      jsr	multisprite_setup
   3998  2428					      endif
   3999  2428
   4000  2428				  -	      ifnconst	bankswitch
   4001  2428				  -	      jmp	game
   4002  2428					      else
   4003  2428		       a9 d0		      lda	#>(game-1)
   4004  242a		       48		      pha
   4005  242b		       a9 ff		      lda	#<(game-1)
   4006  242d		       48		      pha
   4007  242e		       48		      pha
   4008  242f		       48		      pha
   4009  2430		       a2 01		      ldx	#1
   4010  2432		       4c eb ff 	      jmp	BS_jsr
   4011  2435					      endif
   4012  2435							;standard routines needed for pretty much all games
   4013  2435							; just the random number generator is left - maybe we should remove this asm file altogether?
   4014  2435							; repositioning code and score pointer setup moved to overscan
   4015  2435							; read switches, joysticks now compiler generated (more efficient)
   4016  2435
   4017  2435				   randomize
   4018  2435		       a5 d6		      lda	rand
   4019  2437		       4a		      lsr
   4020  2438				  -	      ifconst	rand16
   4021  2438				  -	      rol	rand16
   4022  2438					      endif
   4023  2438		       90 02		      bcc	noeor
   4024  243a		       49 b4		      eor	#$B4
   4025  243c				   noeor
   4026  243c		       85 d6		      sta	rand
   4027  243e				  -	      ifconst	rand16
   4028  243e				  -	      eor	rand16
   4029  243e					      endif
      0  243e					      RETURN
      1  243e				  -	      ifnconst	bankswitch
      2  243e				  -	      rts
      3  243e					      else
      4  243e		       4c dd ff 	      jmp	BS_return
      5  2441					      endif
   4031  2441							;bB.asm
   4032  2441							; bB.asm file is split here
   4033  2441				   .
   4034  2441							; 
   4035  2441
   4036  2441				   .L0256		;  asm
   4037  2441
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  2441					      include	"titlescreen/asm/titlescreen.asm"
      1  2441
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  2441					      include	"titlescreen/asm/layoutmacros.asm"
      1  2441
      2  2441							; the macro's used in the "titlescreen_layout.asm" file
      3  2441
      4  2441					      MAC	draw_96x2_1
      5  2441				   mk_96x2_1_on =	1
      6  2441					      jsr	draw_bmp_96x2_1
      7  2441					      ENDM
      8  2441
      9  2441					      MAC	draw_96x2_2
     10  2441				   mk_96x2_2_on =	1
     11  2441					      jsr	draw_bmp_96x2_2
     12  2441					      ENDM
     13  2441
     14  2441					      MAC	draw_96x2_3
     15  2441				   mk_96x2_3_on =	1
     16  2441					      jsr	draw_bmp_96x2_3
     17  2441					      ENDM
     18  2441
     19  2441					      MAC	draw_48x1_1
     20  2441				   mk_48x1_on =	1
     21  2441				   mk_48x1_1_on =	1
     22  2441					      jsr	draw_bmp_48x1_1
     23  2441					      ENDM
     24  2441
     25  2441					      MAC	draw_48x1_2
     26  2441				   mk_48x1_on =	1
     27  2441				   mk_48x1_2_on =	1
     28  2441					      jsr	draw_bmp_48x1_2
     29  2441					      ENDM
     30  2441
     31  2441					      MAC	draw_48x1_3
     32  2441				   mk_48x1_on =	1
     33  2441				   mk_48x1_3_on =	1
     34  2441					      jsr	draw_bmp_48x1_3
     35  2441					      ENDM
     36  2441
     37  2441					      MAC	draw_48x2_1
     38  2441				   mk_48x1_on =	1
     39  2441				   mk_48x2_1_on =	1
     40  2441					      jsr	draw_bmp_48x2_1
     41  2441					      ENDM
     42  2441
     43  2441					      MAC	draw_48x2_2
     44  2441				   mk_48x1_on =	1
     45  2441				   mk_48x2_2_on =	1
     46  2441					      jsr	draw_bmp_48x2_2
     47  2441					      ENDM
     48  2441
     49  2441					      MAC	draw_48x2_3
     50  2441				   mk_48x1_on =	1
     51  2441				   mk_48x2_3_on =	1
     52  2441					      jsr	draw_bmp_48x2_3
     53  2441					      ENDM
     54  2441
     55  2441					      MAC	draw_score
     56  2441				   mk_score_on =	1
     57  2441					      jsr	draw_score_display
     58  2441					      ENDM
     59  2441
     60  2441					      MAC	draw_gameselect
     61  2441				   mk_gameselect_on =	1
     62  2441					      jsr	draw_gameselect_display
     63  2441					      ENDM
     64  2441
     65  2441					      MAC	draw_space
     66  2441					      ldy	#{1}
     67  2441				   .loop
     68  2441					      sta	WSYNC
     69  2441					      dey
     70  2441					      bne	.loop
     71  2441					      ENDM
     72  2441
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  2441					      include	"titlescreen/titlescreen_layout.asm"
      1  2441
      2  2441							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2441							; in the order they were listed.
      4  2441							;
      5  2441							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2441							; it won't use any rom space.
      7  2441
      8  2441					      MAC	titlescreenlayout
      9  2441					      draw_96x2_1
     10  2441					      draw_48x1_1
     11  2441					      draw_score
     12  2441					      ENDM
     13  2441
     14  2441							; minikernel choices are:
     15  2441							; 
     16  2441							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     17  2441							;	The first, second, and third 48-wide single-line bitmap minikernels
     18  2441							;
     19  2441							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     20  2441							;	The first, second, and third 48-wide double-line bitmap minikernels
     21  2441							;
     22  2441							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     23  2441							;	The first, second, and third 96-wide double-line bitmap minikernels
     24  2441							;
     25  2441							; draw_gameselect
     26  2441							;	The game selection display minikernel
     27  2441							;
     28  2441							; draw_score
     29  2441							;	A minikernel that draws the score
     30  2441							;
     31  2441							; draw_space 10
     32  2441							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      4  2441
      5  2441				   .titledrawscreen
      6  2441				   title_eat_overscan
      7  2441							;bB runs in overscan. Wait for the overscan to run out...
      8  2441		       18		      clc
      9  2442		       ad 84 02 	      lda	INTIM
     10  2445		       30 fa		      bmi	title_eat_overscan
     11  2447		       4c 4a f4 	      jmp	title_do_vertical_sync
     12  244a
     13  244a				   title_do_vertical_sync
     14  244a		       a9 02		      lda	#2
     15  244c		       85 02		      sta	WSYNC	;one line with VSYNC
     16  244e		       85 00		      sta	VSYNC	;enable VSYNC
     17  2450		       85 02		      sta	WSYNC	;one line with VSYNC
     18  2452		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2454		       a9 00		      lda	#0
     20  2456		       85 02		      sta	WSYNC	;one line with VSYNC
     21  2458		       85 00		      sta	VSYNC	;turn off VSYNC
     22  245a
     23  245a							;lda #42+128
     24  245a					      ifnconst	vblank_time
     25  245a		       a9 aa		      lda	#42+128
     26  245c				  -	      else
     27  245c				  -	      lda	#vblank_time+128
     28  245c					      endif
     29  245c
     30  245c		       8d 96 02 	      sta	TIM64T
     31  245f
     32  245f		       00 80	   titleframe =	missile0x
     33  245f		       e6 80		      inc	titleframe	; increment the frame counter
     34  2461
     35  2461				  -	      ifconst	.title_vblank
     36  2461				  -	      jsr	.title_vblank
     37  2461					      endif
     38  2461
     39  2461				   title_vblank_loop
     40  2461		       ad 84 02 	      lda	INTIM
     41  2464		       30 fb		      bmi	title_vblank_loop
     42  2466		       a9 00		      lda	#0
     43  2468		       85 02		      sta	WSYNC
     44  246a		       85 01		      sta	VBLANK
     45  246c		       85 1d		      sta	ENAM0
     46  246e		       85 1f		      sta	ENABL
     47  2470
     48  2470				   title_playfield
     49  2470
     50  2470							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     51  2470
     52  2470		       a9 e6		      lda	#230
     53  2472		       8d 96 02 	      sta	TIM64T
     54  2475
     55  2475		       a9 01		      lda	#1
     56  2477		       85 0a		      sta	CTRLPF
     57  2479		       18		      clc
     58  247a
     59  247a		       a9 00		      lda	#0
     60  247c		       85 02		      sta	WSYNC
     61  247e		       a5 f0		      lda	titlescreencolor
     62  2480		       85 09		      sta	COLUBK
     63  2482
      0  2482					      titlescreenlayout
      0  2482					      draw_96x2_1
      1  2482		       00 01	   mk_96x2_1_on =	1
      2  2482		       20 f8 f5 	      jsr	draw_bmp_96x2_1
      0  2485					      draw_48x1_1
      1  2485		       00 01	   mk_48x1_on =	1
      2  2485		       00 01	   mk_48x1_1_on =	1
      3  2485		       20 9e f5 	      jsr	draw_bmp_48x1_1
      0  2488					      draw_score
      1  2488		       00 01	   mk_score_on =	1
      2  2488		       20 71 f7 	      jsr	draw_score_display
     65  248b
     66  248b		       4c 58 f8 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     67  248e
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  248e					      include	"titlescreen/titlescreen_color.asm"
      1  248e
      2  248e							; This is where the titlescreen background color gets set.
      3  248e							; You can also do a 'dim titlescreencolor=[letter]' in bB
      4  248e							; if you want to change the color on the fly.
      5  248e
      6  248e				  -	      ifnconst	titlescreencolor
      7  248e				  -titlescreencolor
      8  248e					      endif
      9  248e		       00		      .byte.b	$00
------- FILE titlescreen/asm/titlescreen.asm
     69  248f
     70  248f					      ifconst	mk_48x1_on
------- FILE titlescreen/asm/48x1_kernel.asm LEVEL 3 PASS 3
      0  248f					      include	"titlescreen/asm/48x1_kernel.asm"
      1  248f							; 48x1_kernel.asm
      2  248f							;	this is jumped to by any used 48x1adv minikernel, after the sprite
      3  248f							;	pointers have been setup and y has been set to the height of the image 
      4  248f
      5  248f				   draw_bmp_48x1adv
      6  248f
      7  248f		       a9 03		      lda	#3
      8  2491		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      9  2493		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     10  2495		       a2 00		      ldx	#0
     11  2497		       86 1b		      stx	GRP0
     12  2499		       86 1c		      stx	GRP1
     13  249b		       18		      clc
     14  249c
     15  249c		       a5 f0		      lda	titlescreencolor
     16  249e		       85 08		      sta	COLUPF
     17  24a0		       a9 ff		      lda	#%11111111
     18  24a2		       85 0e		      sta	PF1
     19  24a4		       a9 01		      lda	#1
     20  24a6		       85 0a		      sta	CTRLPF
     21  24a8
     22  24a8		       ba		      tsx
     23  24a9		       86 f6		      stx	stack1	;save the stack pointer
     24  24ab
     25  24ab							;postion P0 and P1, Ball and Missile0
     26  24ab		       85 02		      sta	WSYNC
     27  24ad		       a9 20		      lda	#%00100000
     28  24af		       85 20		      sta	HMP0
     29  24b1		       a9 30		      lda	#%00110000
     30  24b3		       85 21		      sta	HMP1
     31  24b5		       a9 00		      lda	#0
     32  24b7		       85 24		      sta	HMBL
     33  24b9		       a9 20		      lda	#%00100000
     34  24bb		       85 22		      sta	HMM0
     35  24bd
     36  24bd		       85 02		      sta	WSYNC
      0  24bf					      sleep	37
      1  24bf				   .CYCLES    SET	37
      2  24bf
      3  24bf				  -	      IF	.CYCLES < 2
      4  24bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24bf				  -	      ERR
      6  24bf					      ENDIF
      7  24bf
      8  24bf					      IF	.CYCLES & 1
      9  24bf					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24bf		       04 00		      nop	0
     11  24c1				  -	      ELSE
     12  24c1				  -	      bit	VSYNC
     13  24c1					      ENDIF
     14  24c1				   .CYCLES    SET	.CYCLES - 3
     15  24c1					      ENDIF
     16  24c1
     17  24c1					      REPEAT	.CYCLES / 2
     18  24c1		       ea		      nop
     17  24c1					      REPEND
     18  24c2		       ea		      nop
     17  24c2					      REPEND
     18  24c3		       ea		      nop
     17  24c3					      REPEND
     18  24c4		       ea		      nop
     17  24c4					      REPEND
     18  24c5		       ea		      nop
     17  24c5					      REPEND
     18  24c6		       ea		      nop
     17  24c6					      REPEND
     18  24c7		       ea		      nop
     17  24c7					      REPEND
     18  24c8		       ea		      nop
     17  24c8					      REPEND
     18  24c9		       ea		      nop
     17  24c9					      REPEND
     18  24ca		       ea		      nop
     17  24ca					      REPEND
     18  24cb		       ea		      nop
     17  24cb					      REPEND
     18  24cc		       ea		      nop
     17  24cc					      REPEND
     18  24cd		       ea		      nop
     17  24cd					      REPEND
     18  24ce		       ea		      nop
     17  24ce					      REPEND
     18  24cf		       ea		      nop
     17  24cf					      REPEND
     18  24d0		       ea		      nop
     17  24d0					      REPEND
     18  24d1		       ea		      nop
     19  24d2					      REPEND
     38  24d2		       85 10		      sta	RESP0
     39  24d4		       85 11		      sta	RESP1
     40  24d6		       85 02		      sta	WSYNC
      0  24d8					      sleep	29
      1  24d8				   .CYCLES    SET	29
      2  24d8
      3  24d8				  -	      IF	.CYCLES < 2
      4  24d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24d8				  -	      ERR
      6  24d8					      ENDIF
      7  24d8
      8  24d8					      IF	.CYCLES & 1
      9  24d8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24d8		       04 00		      nop	0
     11  24da				  -	      ELSE
     12  24da				  -	      bit	VSYNC
     13  24da					      ENDIF
     14  24da				   .CYCLES    SET	.CYCLES - 3
     15  24da					      ENDIF
     16  24da
     17  24da					      REPEAT	.CYCLES / 2
     18  24da		       ea		      nop
     17  24da					      REPEND
     18  24db		       ea		      nop
     17  24db					      REPEND
     18  24dc		       ea		      nop
     17  24dc					      REPEND
     18  24dd		       ea		      nop
     17  24dd					      REPEND
     18  24de		       ea		      nop
     17  24de					      REPEND
     18  24df		       ea		      nop
     17  24df					      REPEND
     18  24e0		       ea		      nop
     17  24e0					      REPEND
     18  24e1		       ea		      nop
     17  24e1					      REPEND
     18  24e2		       ea		      nop
     17  24e2					      REPEND
     18  24e3		       ea		      nop
     17  24e3					      REPEND
     18  24e4		       ea		      nop
     17  24e4					      REPEND
     18  24e5		       ea		      nop
     17  24e5					      REPEND
     18  24e6		       ea		      nop
     19  24e7					      REPEND
     42  24e7		       85 12		      sta	RESM0
      0  24e9					      sleep	7
      1  24e9				   .CYCLES    SET	7
      2  24e9
      3  24e9				  -	      IF	.CYCLES < 2
      4  24e9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24e9				  -	      ERR
      6  24e9					      ENDIF
      7  24e9
      8  24e9					      IF	.CYCLES & 1
      9  24e9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24e9		       04 00		      nop	0
     11  24eb				  -	      ELSE
     12  24eb				  -	      bit	VSYNC
     13  24eb					      ENDIF
     14  24eb				   .CYCLES    SET	.CYCLES - 3
     15  24eb					      ENDIF
     16  24eb
     17  24eb					      REPEAT	.CYCLES / 2
     18  24eb		       ea		      nop
     17  24eb					      REPEND
     18  24ec		       ea		      nop
     19  24ed					      REPEND
     44  24ed		       85 14		      sta	RESBL
     45  24ef		       85 02		      sta	WSYNC
     46  24f1
     47  24f1		       85 2a		      sta	HMOVE	;3
     48  24f3
     49  24f3		       a9 03		      lda	#3	;2
     50  24f5		       85 25		      sta	VDELP0	;3
     51  24f7		       85 26		      sta	VDELP1	;3
     52  24f9
     53  24f9							;lda #2		;2
     54  24f9							;sta ENAM0	;3
     55  24f9							;sta ENABL	;3
     56  24f9		       a9 05		      lda	#5	;2
     57  24fb		       85 0a		      sta	CTRLPF	;3
     58  24fd		       a9 00		      lda	#0	;2
     59  24ff		       85 27		      sta	VDELBL	;3
     60  2501
     61  2501							;enough cycles have passed for the HMOV, so we can clear HMCLR
     62  2501		       85 2b		      sta	HMCLR
     63  2503		       85 02		      sta	WSYNC
     64  2505
      0  2505					      sleep	(59-8)	;59
      1  2505				   .CYCLES    SET	(59-8)
      2  2505
      3  2505				  -	      IF	.CYCLES < 2
      4  2505				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2505				  -	      ERR
      6  2505					      ENDIF
      7  2505
      8  2505					      IF	.CYCLES & 1
      9  2505					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2505		       04 00		      nop	0
     11  2507				  -	      ELSE
     12  2507				  -	      bit	VSYNC
     13  2507					      ENDIF
     14  2507				   .CYCLES    SET	.CYCLES - 3
     15  2507					      ENDIF
     16  2507
     17  2507					      REPEAT	.CYCLES / 2
     18  2507		       ea		      nop
     17  2507					      REPEND
     18  2508		       ea		      nop
     17  2508					      REPEND
     18  2509		       ea		      nop
     17  2509					      REPEND
     18  250a		       ea		      nop
     17  250a					      REPEND
     18  250b		       ea		      nop
     17  250b					      REPEND
     18  250c		       ea		      nop
     17  250c					      REPEND
     18  250d		       ea		      nop
     17  250d					      REPEND
     18  250e		       ea		      nop
     17  250e					      REPEND
     18  250f		       ea		      nop
     17  250f					      REPEND
     18  2510		       ea		      nop
     17  2510					      REPEND
     18  2511		       ea		      nop
     17  2511					      REPEND
     18  2512		       ea		      nop
     17  2512					      REPEND
     18  2513		       ea		      nop
     17  2513					      REPEND
     18  2514		       ea		      nop
     17  2514					      REPEND
     18  2515		       ea		      nop
     17  2515					      REPEND
     18  2516		       ea		      nop
     17  2516					      REPEND
     18  2517		       ea		      nop
     17  2517					      REPEND
     18  2518		       ea		      nop
     17  2518					      REPEND
     18  2519		       ea		      nop
     17  2519					      REPEND
     18  251a		       ea		      nop
     17  251a					      REPEND
     18  251b		       ea		      nop
     17  251b					      REPEND
     18  251c		       ea		      nop
     17  251c					      REPEND
     18  251d		       ea		      nop
     17  251d					      REPEND
     18  251e		       ea		      nop
     19  251f					      REPEND
     66  251f
     67  251f		       a9 02		      lda	#2
     68  2521		       85 1f		      sta	ENABL
     69  2523		       85 1d		      sta	ENAM0
     70  2525
     71  2525		       4c 28 f5 	      jmp	pf48x1_loop	;3
     72  2528
     73  2528				  -	      if	>. != >[.+$5e]
     74  2528				  -	      align	256
     75  2528					      endif
     76  2528
     77  2528				   pf48x1_loop
      0  2528					      sleep	6
      1  2528				   .CYCLES    SET	6
      2  2528
      3  2528				  -	      IF	.CYCLES < 2
      4  2528				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2528				  -	      ERR
      6  2528					      ENDIF
      7  2528
      8  2528				  -	      IF	.CYCLES & 1
      9  2528				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2528				  -	      nop	0
     11  2528				  -	      ELSE
     12  2528				  -	      bit	VSYNC
     13  2528				  -	      ENDIF
     14  2528				  -.CYCLES    SET	.CYCLES - 3
     15  2528					      ENDIF
     16  2528
     17  2528					      REPEAT	.CYCLES / 2
     18  2528		       ea		      nop
     17  2528					      REPEND
     18  2529		       ea		      nop
     17  2529					      REPEND
     18  252a		       ea		      nop
     19  252b					      REPEND
     79  252b				   pf48x1_loop_line1
     80  252b
     81  252b		       b1 c5		      lda	(scorepointers+0),y	;5
     82  252d		       85 1b		      sta	GRP0	;3
     83  252f
     84  252f							;fix the lost bit0 in the first character
     85  252f		       2a		      rol		;2
     86  2530		       49 02		      eor	#2	;2
     87  2532		       85 1f		      sta	ENABL	;3
     88  2534
     89  2534		       b1 c7		      lda	(scorepointers+2),y	;5
     90  2536		       85 1c		      sta	GRP1	; 3
     91  2538
     92  2538		       b3 cf		      lax	(scorepointers+10),y	; 5
     93  253a		       9a		      txs		; 2	
     94  253b		       b3 cd		      lax	(scorepointers+8),y	; 5
     95  253d
     96  253d		       b1 c9		      lda	(scorepointers+4),y	; 5
     97  253f		       85 1b		      sta	GRP0
     98  2541		       b1 cb		      lda	(scorepointers+6),y	; 5
     99  2543		       85 1c		      sta	GRP1
    100  2545
    101  2545		       86 1b		      stx	GRP0
    102  2547		       ba		      tsx
    103  2548		       86 1c		      stx	GRP1
    104  254a		       84 1b		      sty	GRP0
    105  254c
    106  254c		       a5 bf		      lda	aux3	;3
    107  254e		       f0 09		      beq	pf48x1_loop_line2	;2/3
      0  2550					      sleep	2
      1  2550				   .CYCLES    SET	2
      2  2550
      3  2550				  -	      IF	.CYCLES < 2
      4  2550				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2550				  -	      ERR
      6  2550					      ENDIF
      7  2550
      8  2550				  -	      IF	.CYCLES & 1
      9  2550				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2550				  -	      nop	0
     11  2550				  -	      ELSE
     12  2550				  -	      bit	VSYNC
     13  2550				  -	      ENDIF
     14  2550				  -.CYCLES    SET	.CYCLES - 3
     15  2550					      ENDIF
     16  2550
     17  2550					      REPEAT	.CYCLES / 2
     18  2550		       ea		      nop
     19  2551					      REPEND
    109  2551
    110  2551		       88		      dey
    111  2552		       c0 ff		      cpy	#255
    112  2554		       d0 d5		      bne	pf48x1_loop_line1	;2/3
    113  2556
    114  2556		       4c 86 f5 	      jmp	pf48x1_codeend
    115  2559
    116  2559				   pf48x1_loop_line2
    117  2559
    118  2559		       b1 c5		      lda	(scorepointers+0),y	;5
    119  255b		       85 1b		      sta	GRP0	;3
    120  255d
    121  255d		       b1 c1		      lda	(aux5),y	;5
    122  255f		       85 8a		      sta	missile0y	;3
    123  2561
      0  2561					      sleep	7
      1  2561				   .CYCLES    SET	7
      2  2561
      3  2561				  -	      IF	.CYCLES < 2
      4  2561				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2561				  -	      ERR
      6  2561					      ENDIF
      7  2561
      8  2561					      IF	.CYCLES & 1
      9  2561					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2561		       04 00		      nop	0
     11  2563				  -	      ELSE
     12  2563				  -	      bit	VSYNC
     13  2563					      ENDIF
     14  2563				   .CYCLES    SET	.CYCLES - 3
     15  2563					      ENDIF
     16  2563
     17  2563					      REPEAT	.CYCLES / 2
     18  2563		       ea		      nop
     17  2563					      REPEND
     18  2564		       ea		      nop
     19  2565					      REPEND
    125  2565
    126  2565		       b1 c7		      lda	(scorepointers+2),y	;5
    127  2567		       85 1c		      sta	GRP1	; 3
    128  2569
    129  2569		       b3 cf		      lax	(scorepointers+10),y	; 5
    130  256b		       9a		      txs		; 2	
    131  256c		       b3 cd		      lax	(scorepointers+8),y	; 5
    132  256e
    133  256e		       b1 c9		      lda	(scorepointers+4),y	; 5
    134  2570		       85 1b		      sta	GRP0
    135  2572		       b1 cb		      lda	(scorepointers+6),y	; 5
    136  2574		       85 1c		      sta	GRP1
    137  2576		       86 1b		      stx	GRP0
    138  2578		       ba		      tsx
    139  2579		       86 1c		      stx	GRP1
    140  257b		       84 1b		      sty	GRP0
    141  257d
    142  257d		       a5 8a		      lda	missile0y
    143  257f		       85 06		      sta	COLUP0
    144  2581		       85 07		      sta	COLUP1
    145  2583
    146  2583							;sleep 6
    147  2583		       88		      dey
    148  2584							;cmp #255
    149  2584		       10 a5		      bpl	pf48x1_loop_line1	;2/3
    150  2586
    151  2586				   pf48x1_codeend
    152  2586							;echo "critical code in 48x1 is ",(pf48x1_codeend-pf48x1_loop), " bytes long."
    153  2586
    154  2586		       a9 00		      lda	#0
    155  2588		       85 1b		      sta	GRP0
    156  258a		       85 1c		      sta	GRP1
    157  258c		       85 1f		      sta	ENABL
    158  258e		       85 1d		      sta	ENAM0
    159  2590		       85 25		      sta	VDELP0
    160  2592		       85 26		      sta	VDELP1
    161  2594		       85 0d		      sta	PF0
    162  2596		       85 0e		      sta	PF1
    163  2598		       85 0f		      sta	PF2
    164  259a
    165  259a		       a6 f6		      ldx	stack1	;restore the stack pointer
    166  259c		       9a		      txs
    167  259d		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
     72  259e					      endif		;mk_48x1_on
     73  259e
     74  259e					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 3
      0  259e					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  259e
      2  259e				   draw_bmp_48x1_1
      3  259e
      4  259e		       a9 00		      lda	#0
      5  25a0		       85 1b		      sta	GRP0
      6  25a2		       85 1c		      sta	GRP1
      7  25a4
      8  25a4		       a0 59		      ldy	#(bmp_48x1_1_window-1)
      9  25a6
     10  25a6							;setup score pointers to point at my bitmap slices instead
     11  25a6		       a9 6c		      lda	#<bmp_48x1_1_00
     12  25a8		       18		      clc
     13  25a9		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     14  25ab				  -	      ifconst	bmp_48x1_1_index
     15  25ab				  -	      sec
     16  25ab				  -	      sbc	bmp_48x1_1_index
     17  25ab					      endif
     18  25ab		       85 c5		      sta	scorepointers+0
     19  25ad		       a9 f8		      lda	#>bmp_48x1_1_00
     20  25af		       85 c6		      sta	scorepointers+1
     21  25b1
     22  25b1
     23  25b1		       a9 00		      lda	#<bmp_48x1_1_01
     24  25b3		       18		      clc
     25  25b4		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     26  25b6				  -	      ifconst	bmp_48x1_1_index
     27  25b6				  -	      sec
     28  25b6				  -	      sbc	bmp_48x1_1_index
     29  25b6					      endif
     30  25b6		       85 c7		      sta	scorepointers+2
     31  25b8		       a9 f9		      lda	#>bmp_48x1_1_01
     32  25ba		       85 c8		      sta	scorepointers+3
     33  25bc
     34  25bc
     35  25bc		       a9 63		      lda	#<bmp_48x1_1_02
     36  25be		       18		      clc
     37  25bf		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     38  25c1				  -	      ifconst	bmp_48x1_1_index
     39  25c1				  -	      sec
     40  25c1				  -	      sbc	bmp_48x1_1_index
     41  25c1					      endif
     42  25c1		       85 c9		      sta	scorepointers+4
     43  25c3		       a9 f9		      lda	#>bmp_48x1_1_02
     44  25c5		       85 ca		      sta	scorepointers+5
     45  25c7
     46  25c7
     47  25c7		       a9 00		      lda	#<bmp_48x1_1_03
     48  25c9		       18		      clc
     49  25ca		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     50  25cc				  -	      ifconst	bmp_48x1_1_index
     51  25cc				  -	      sec
     52  25cc				  -	      sbc	bmp_48x1_1_index
     53  25cc					      endif
     54  25cc		       85 cb		      sta	scorepointers+6
     55  25ce		       a9 fa		      lda	#>bmp_48x1_1_03
     56  25d0		       85 cc		      sta	scorepointers+7
     57  25d2
     58  25d2
     59  25d2		       a9 63		      lda	#<bmp_48x1_1_04
     60  25d4		       18		      clc
     61  25d5		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  25d7				  -	      ifconst	bmp_48x1_1_index
     63  25d7				  -	      sec
     64  25d7				  -	      sbc	bmp_48x1_1_index
     65  25d7					      endif
     66  25d7		       85 cd		      sta	scorepointers+8
     67  25d9		       a9 fa		      lda	#>bmp_48x1_1_04
     68  25db		       85 ce		      sta	scorepointers+9
     69  25dd
     70  25dd
     71  25dd		       a9 00		      lda	#<bmp_48x1_1_05
     72  25df		       18		      clc
     73  25e0		       69 08		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     74  25e2				  -	      ifconst	bmp_48x1_1_index
     75  25e2				  -	      sec
     76  25e2				  -	      sbc	bmp_48x1_1_index
     77  25e2					      endif
     78  25e2		       85 cf		      sta	scorepointers+10
     79  25e4		       a9 fb		      lda	#>bmp_48x1_1_05
     80  25e6		       85 d0		      sta	scorepointers+11
     81  25e8
     82  25e8		       a9 01		      lda	#1	;single line kernel
     83  25ea		       85 bf		      sta	aux3
     84  25ec
     85  25ec		       ad 6b f8 	      lda	bmp_48x1_1_color
     86  25ef		       85 06		      sta	COLUP0	;3
     87  25f1		       85 07		      sta	COLUP1	;3
     88  25f3		       85 2b		      sta	HMCLR	;3
     89  25f5
     90  25f5
     91  25f5		       4c 8f f4 	      jmp	draw_bmp_48x1adv
     92  25f8
------- FILE titlescreen/asm/titlescreen.asm
     76  25f8					      endif		;mk_48x1_1_on
     77  25f8
     78  25f8				  -	      ifconst	mk_48x1_2_on
     79  25f8				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  25f8					      endif		;mk_48x1_2_on
     81  25f8
     82  25f8				  -	      ifconst	mk_48x1_3_on
     83  25f8				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  25f8					      endif		;mk_48x1_3_on
     85  25f8
     86  25f8				  -	      ifconst	mk_48x2_1_on
     87  25f8				  -	      include	"titlescreen/asm/48x2_1_kernel.asm"
     88  25f8					      endif		;mk_48x2_1_on
     89  25f8
     90  25f8				  -	      ifconst	mk_48x2_2_on
     91  25f8				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
     92  25f8					      endif		;mk_48x2_2_on
     93  25f8
     94  25f8				  -	      ifconst	mk_48x2_3_on
     95  25f8				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
     96  25f8					      endif		;mk_48x2_3_on
     97  25f8
     98  25f8					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 3
      0  25f8					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  25f8				   draw_bmp_96x2_1
      2  25f8
      3  25f8				  -	      ifconst	bmp_96x2_1_index
      4  25f8				  -	      lda	#(bmp_96x2_1_height-1)
      5  25f8				  -	      sec
      6  25f8				  -	      sbc	bmp_96x2_1_index
      7  25f8				  -	      tay
      8  25f8				  -	      sbc	#bmp_96x2_1_window
      9  25f8				  -	      sta	temp1
     10  25f8					      else
     11  25f8		       a0 1b		      ldy	#(bmp_96x2_1_window-1)
     12  25fa		       a9 ff		      lda	#255
     13  25fc		       85 cb		      sta	temp1
     14  25fe					      endif
     15  25fe
     16  25fe		       a9 03		      lda	#3
     17  2600		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
     18  2602		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     19  2604		       a9 00		      lda	#0
     20  2606
     21  2606		       b9 64 fb 	      lda	bmp_96x2_1_colors,y	;4
     22  2609				  -	      ifconst	bmp_96x2_1_fade
     23  2609				  -	      and	bmp_96x2_1_fade
     24  2609					      endif
     25  2609		       85 06		      sta	COLUP0	;3
     26  260b		       85 07		      sta	COLUP1	;3
     27  260d		       85 2b		      sta	HMCLR	;3
     28  260f
     29  260f		       a5 80		      lda	titleframe
     30  2611		       29 01		      and	#1
     31  2613		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  2615		       4c bf f6 	      jmp	pf96x2_1_frame1
     33  2618				   jmp_pf96x2_1_frame0
     34  2618		       4c 1b f6 	      jmp	pf96x2_1_frame0
     35  261b
     36  261b				   pf96x2_1_frame0
     37  261b							;postion P0 and P1
     38  261b		       85 02		      sta	WSYNC
     39  261d		       a9 e0		      lda	#%11100000
     40  261f		       85 20		      sta	HMP0
     41  2621		       a9 10		      lda	#%00010000
     42  2623		       85 21		      sta	HMP1
     43  2625		       85 02		      sta	WSYNC
      0  2627					      sleep	28
      1  2627				   .CYCLES    SET	28
      2  2627
      3  2627				  -	      IF	.CYCLES < 2
      4  2627				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2627				  -	      ERR
      6  2627					      ENDIF
      7  2627
      8  2627				  -	      IF	.CYCLES & 1
      9  2627				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2627				  -	      nop	0
     11  2627				  -	      ELSE
     12  2627				  -	      bit	VSYNC
     13  2627				  -	      ENDIF
     14  2627				  -.CYCLES    SET	.CYCLES - 3
     15  2627					      ENDIF
     16  2627
     17  2627					      REPEAT	.CYCLES / 2
     18  2627		       ea		      nop
     17  2627					      REPEND
     18  2628		       ea		      nop
     17  2628					      REPEND
     18  2629		       ea		      nop
     17  2629					      REPEND
     18  262a		       ea		      nop
     17  262a					      REPEND
     18  262b		       ea		      nop
     17  262b					      REPEND
     18  262c		       ea		      nop
     17  262c					      REPEND
     18  262d		       ea		      nop
     17  262d					      REPEND
     18  262e		       ea		      nop
     17  262e					      REPEND
     18  262f		       ea		      nop
     17  262f					      REPEND
     18  2630		       ea		      nop
     17  2630					      REPEND
     18  2631		       ea		      nop
     17  2631					      REPEND
     18  2632		       ea		      nop
     17  2632					      REPEND
     18  2633		       ea		      nop
     17  2633					      REPEND
     18  2634		       ea		      nop
     19  2635					      REPEND
     45  2635		       85 10		      sta	RESP0
      0  2637					      sleep	14
      1  2637				   .CYCLES    SET	14
      2  2637
      3  2637				  -	      IF	.CYCLES < 2
      4  2637				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2637				  -	      ERR
      6  2637					      ENDIF
      7  2637
      8  2637				  -	      IF	.CYCLES & 1
      9  2637				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2637				  -	      nop	0
     11  2637				  -	      ELSE
     12  2637				  -	      bit	VSYNC
     13  2637				  -	      ENDIF
     14  2637				  -.CYCLES    SET	.CYCLES - 3
     15  2637					      ENDIF
     16  2637
     17  2637					      REPEAT	.CYCLES / 2
     18  2637		       ea		      nop
     17  2637					      REPEND
     18  2638		       ea		      nop
     17  2638					      REPEND
     18  2639		       ea		      nop
     17  2639					      REPEND
     18  263a		       ea		      nop
     17  263a					      REPEND
     18  263b		       ea		      nop
     17  263b					      REPEND
     18  263c		       ea		      nop
     17  263c					      REPEND
     18  263d		       ea		      nop
     19  263e					      REPEND
     47  263e		       85 11		      sta	RESP1
     48  2640		       85 02		      sta	WSYNC
     49  2642		       85 2a		      sta	HMOVE
     50  2644
     51  2644		       85 02		      sta	WSYNC
     52  2646		       85 2b		      sta	HMCLR
     53  2648		       85 02		      sta	WSYNC
     54  264a
      0  264a					      sleep	4
      1  264a				   .CYCLES    SET	4
      2  264a
      3  264a				  -	      IF	.CYCLES < 2
      4  264a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  264a				  -	      ERR
      6  264a					      ENDIF
      7  264a
      8  264a				  -	      IF	.CYCLES & 1
      9  264a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  264a				  -	      nop	0
     11  264a				  -	      ELSE
     12  264a				  -	      bit	VSYNC
     13  264a				  -	      ENDIF
     14  264a				  -.CYCLES    SET	.CYCLES - 3
     15  264a					      ENDIF
     16  264a
     17  264a					      REPEAT	.CYCLES / 2
     18  264a		       ea		      nop
     17  264a					      REPEND
     18  264b		       ea		      nop
     19  264c					      REPEND
     56  264c		       4c 4f f6 	      jmp	pfline_96x2_1_frame0
     57  264f							;align so our branch doesn't unexpectedly cross a page...
     58  264f				  -	      if	>. != >[.+$70]
     59  264f				  -	      align	256
     60  264f					      endif
     61  264f
     62  264f				   pfline_96x2_1_frame0
     63  264f		       a9 80		      lda	#$80	;2
     64  2651		       85 20		      sta	HMP0	;3
     65  2653		       85 21		      sta	HMP1	;3
     66  2655
     67  2655		       b9 3c fc 	      lda	bmp_96x2_1_06,y	;4
     68  2658		       85 1c		      sta	GRP1	;3
     69  265a
     70  265a		       b9 82 fb 	      lda	bmp_96x2_1_00,y
     71  265d		       85 1b		      sta	GRP0
     72  265f		       b9 be fb 	      lda	bmp_96x2_1_02,y
     73  2662		       85 1b		      sta	GRP0
     74  2664		       b9 00 fc 	      lda	bmp_96x2_1_04,y
     75  2667		       85 1b		      sta	GRP0
     76  2669
      0  2669					      sleep	2
      1  2669				   .CYCLES    SET	2
      2  2669
      3  2669				  -	      IF	.CYCLES < 2
      4  2669				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2669				  -	      ERR
      6  2669					      ENDIF
      7  2669
      8  2669				  -	      IF	.CYCLES & 1
      9  2669				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2669				  -	      nop	0
     11  2669				  -	      ELSE
     12  2669				  -	      bit	VSYNC
     13  2669				  -	      ENDIF
     14  2669				  -.CYCLES    SET	.CYCLES - 3
     15  2669					      ENDIF
     16  2669
     17  2669					      REPEAT	.CYCLES / 2
     18  2669		       ea		      nop
     19  266a					      REPEND
     78  266a
     79  266a		       b9 78 fc 	      lda	bmp_96x2_1_08,y
     80  266d		       85 1c		      sta	GRP1
     81  266f		       b9 b4 fc 	      lda	bmp_96x2_1_10,y
     82  2672		       85 1c		      sta	GRP1
     83  2674
     84  2674		       b9 a0 fb 	      lda	bmp_96x2_1_01,y
     85  2677		       85 1b		      sta	GRP0
     86  2679
      0  2679					      sleep	8
      1  2679				   .CYCLES    SET	8
      2  2679
      3  2679				  -	      IF	.CYCLES < 2
      4  2679				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2679				  -	      ERR
      6  2679					      ENDIF
      7  2679
      8  2679				  -	      IF	.CYCLES & 1
      9  2679				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2679				  -	      nop	0
     11  2679				  -	      ELSE
     12  2679				  -	      bit	VSYNC
     13  2679				  -	      ENDIF
     14  2679				  -.CYCLES    SET	.CYCLES - 3
     15  2679					      ENDIF
     16  2679
     17  2679					      REPEAT	.CYCLES / 2
     18  2679		       ea		      nop
     17  2679					      REPEND
     18  267a		       ea		      nop
     17  267a					      REPEND
     18  267b		       ea		      nop
     17  267b					      REPEND
     18  267c		       ea		      nop
     19  267d					      REPEND
     88  267d
     89  267d							;sta WSYNC	;=0
     90  267d		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  267f
     92  267f		       b9 63 fb 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  2682				  -	      ifconst	bmp_96x2_1_fade
     94  2682				  -	      and	bmp_96x2_1_fade
     95  2682					      else
      0  2682					      sleep	3
      1  2682				   .CYCLES    SET	3
      2  2682
      3  2682				  -	      IF	.CYCLES < 2
      4  2682				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2682				  -	      ERR
      6  2682					      ENDIF
      7  2682
      8  2682					      IF	.CYCLES & 1
      9  2682					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2682		       04 00		      nop	0
     11  2684				  -	      ELSE
     12  2684				  -	      bit	VSYNC
     13  2684					      ENDIF
     14  2684				   .CYCLES    SET	.CYCLES - 3
     15  2684					      ENDIF
     16  2684
     17  2684				  -	      REPEAT	.CYCLES / 2
     18  2684				  -	      nop
     19  2684					      REPEND
     97  2684					      endif
     98  2684		       aa		      tax
     99  2685
    100  2685		       a9 00		      lda	#0	;2
    101  2687		       85 20		      sta	HMP0	;3
    102  2689		       85 21		      sta	HMP1	;3
    103  268b
      0  268b					      sleep	7
      1  268b				   .CYCLES    SET	7
      2  268b
      3  268b				  -	      IF	.CYCLES < 2
      4  268b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  268b				  -	      ERR
      6  268b					      ENDIF
      7  268b
      8  268b					      IF	.CYCLES & 1
      9  268b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  268b		       04 00		      nop	0
     11  268d				  -	      ELSE
     12  268d				  -	      bit	VSYNC
     13  268d					      ENDIF
     14  268d				   .CYCLES    SET	.CYCLES - 3
     15  268d					      ENDIF
     16  268d
     17  268d					      REPEAT	.CYCLES / 2
     18  268d		       ea		      nop
     17  268d					      REPEND
     18  268e		       ea		      nop
     19  268f					      REPEND
    105  268f
    106  268f		       b9 5a fc 	      lda	bmp_96x2_1_07,y
    107  2692		       85 1c		      sta	GRP1
    108  2694
    109  2694		       b9 dc fb 	      lda	bmp_96x2_1_03,y	;5
    110  2697		       85 1b		      sta	GRP0	;3 =  8
    111  2699		       b9 1e fc 	      lda	bmp_96x2_1_05,y	;5
    112  269c		       85 1b		      sta	GRP0	;3 =  8
    113  269e
      0  269e					      sleep	2
      1  269e				   .CYCLES    SET	2
      2  269e
      3  269e				  -	      IF	.CYCLES < 2
      4  269e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  269e				  -	      ERR
      6  269e					      ENDIF
      7  269e
      8  269e				  -	      IF	.CYCLES & 1
      9  269e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  269e				  -	      nop	0
     11  269e				  -	      ELSE
     12  269e				  -	      bit	VSYNC
     13  269e				  -	      ENDIF
     14  269e				  -.CYCLES    SET	.CYCLES - 3
     15  269e					      ENDIF
     16  269e
     17  269e					      REPEAT	.CYCLES / 2
     18  269e		       ea		      nop
     19  269f					      REPEND
    115  269f
    116  269f		       b9 96 fc 	      lda	bmp_96x2_1_09,y	;5
    117  26a2		       85 1c		      sta	GRP1	;3 =  8
    118  26a4		       b9 d2 fc 	      lda	bmp_96x2_1_11,y	;5
    119  26a7		       85 1c		      sta	GRP1	;3 =  8
    120  26a9
      0  26a9					      sleep	2
      1  26a9				   .CYCLES    SET	2
      2  26a9
      3  26a9				  -	      IF	.CYCLES < 2
      4  26a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26a9				  -	      ERR
      6  26a9					      ENDIF
      7  26a9
      8  26a9				  -	      IF	.CYCLES & 1
      9  26a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26a9				  -	      nop	0
     11  26a9				  -	      ELSE
     12  26a9				  -	      bit	VSYNC
     13  26a9				  -	      ENDIF
     14  26a9				  -.CYCLES    SET	.CYCLES - 3
     15  26a9					      ENDIF
     16  26a9
     17  26a9					      REPEAT	.CYCLES / 2
     18  26a9		       ea		      nop
     19  26aa					      REPEND
    122  26aa		       86 07		      stx	COLUP1
    123  26ac		       86 06		      stx	COLUP0
    124  26ae
    125  26ae
    126  26ae		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE 
      0  26b0					      sleep	2
      1  26b0				   .CYCLES    SET	2
      2  26b0
      3  26b0				  -	      IF	.CYCLES < 2
      4  26b0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26b0				  -	      ERR
      6  26b0					      ENDIF
      7  26b0
      8  26b0				  -	      IF	.CYCLES & 1
      9  26b0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26b0				  -	      nop	0
     11  26b0				  -	      ELSE
     12  26b0				  -	      bit	VSYNC
     13  26b0				  -	      ENDIF
     14  26b0				  -.CYCLES    SET	.CYCLES - 3
     15  26b0					      ENDIF
     16  26b0
     17  26b0					      REPEAT	.CYCLES / 2
     18  26b0		       ea		      nop
     19  26b1					      REPEND
    128  26b1		       88		      dey
    129  26b2
    130  26b2		       c4 cb		      cpy	temp1	;3
    131  26b4		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    132  26b6
    133  26b6				   pf96x2_1_0codeend
    134  26b6							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    135  26b6
    136  26b6		       a9 00		      lda	#0
    137  26b8		       85 1b		      sta	GRP0
    138  26ba		       85 1c		      sta	GRP1
    139  26bc		       4c 6e f7 	      jmp	pfdone_96x2_1
    140  26bf
    141  26bf
    142  26bf				   pf96x2_1_frame1
    143  26bf
    144  26bf							;postion P0 and P1
    145  26bf		       85 02		      sta	WSYNC
    146  26c1		       a9 20		      lda	#%00100000
    147  26c3		       85 20		      sta	HMP0
    148  26c5		       a9 00		      lda	#0
    149  26c7		       a9 f0		      lda	#%11110000
    150  26c9		       85 21		      sta	HMP1
    151  26cb		       85 02		      sta	WSYNC
      0  26cd					      sleep	32
      1  26cd				   .CYCLES    SET	32
      2  26cd
      3  26cd				  -	      IF	.CYCLES < 2
      4  26cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26cd				  -	      ERR
      6  26cd					      ENDIF
      7  26cd
      8  26cd				  -	      IF	.CYCLES & 1
      9  26cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26cd				  -	      nop	0
     11  26cd				  -	      ELSE
     12  26cd				  -	      bit	VSYNC
     13  26cd				  -	      ENDIF
     14  26cd				  -.CYCLES    SET	.CYCLES - 3
     15  26cd					      ENDIF
     16  26cd
     17  26cd					      REPEAT	.CYCLES / 2
     18  26cd		       ea		      nop
     17  26cd					      REPEND
     18  26ce		       ea		      nop
     17  26ce					      REPEND
     18  26cf		       ea		      nop
     17  26cf					      REPEND
     18  26d0		       ea		      nop
     17  26d0					      REPEND
     18  26d1		       ea		      nop
     17  26d1					      REPEND
     18  26d2		       ea		      nop
     17  26d2					      REPEND
     18  26d3		       ea		      nop
     17  26d3					      REPEND
     18  26d4		       ea		      nop
     17  26d4					      REPEND
     18  26d5		       ea		      nop
     17  26d5					      REPEND
     18  26d6		       ea		      nop
     17  26d6					      REPEND
     18  26d7		       ea		      nop
     17  26d7					      REPEND
     18  26d8		       ea		      nop
     17  26d8					      REPEND
     18  26d9		       ea		      nop
     17  26d9					      REPEND
     18  26da		       ea		      nop
     17  26da					      REPEND
     18  26db		       ea		      nop
     17  26db					      REPEND
     18  26dc		       ea		      nop
     19  26dd					      REPEND
    153  26dd		       85 10		      sta	RESP0
      0  26df					      sleep	12
      1  26df				   .CYCLES    SET	12
      2  26df
      3  26df				  -	      IF	.CYCLES < 2
      4  26df				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26df				  -	      ERR
      6  26df					      ENDIF
      7  26df
      8  26df				  -	      IF	.CYCLES & 1
      9  26df				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26df				  -	      nop	0
     11  26df				  -	      ELSE
     12  26df				  -	      bit	VSYNC
     13  26df				  -	      ENDIF
     14  26df				  -.CYCLES    SET	.CYCLES - 3
     15  26df					      ENDIF
     16  26df
     17  26df					      REPEAT	.CYCLES / 2
     18  26df		       ea		      nop
     17  26df					      REPEND
     18  26e0		       ea		      nop
     17  26e0					      REPEND
     18  26e1		       ea		      nop
     17  26e1					      REPEND
     18  26e2		       ea		      nop
     17  26e2					      REPEND
     18  26e3		       ea		      nop
     17  26e3					      REPEND
     18  26e4		       ea		      nop
     19  26e5					      REPEND
    155  26e5		       85 11		      sta	RESP1
    156  26e7		       85 02		      sta	WSYNC
    157  26e9		       85 2a		      sta	HMOVE
    158  26eb
    159  26eb		       85 02		      sta	WSYNC
    160  26ed		       85 2b		      sta	HMCLR
    161  26ef
    162  26ef
    163  26ef
    164  26ef		       85 02		      sta	WSYNC
      0  26f1					      sleep	3
      1  26f1				   .CYCLES    SET	3
      2  26f1
      3  26f1				  -	      IF	.CYCLES < 2
      4  26f1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26f1				  -	      ERR
      6  26f1					      ENDIF
      7  26f1
      8  26f1					      IF	.CYCLES & 1
      9  26f1					      IFNCONST	NO_ILLEGAL_OPCODES
     10  26f1		       04 00		      nop	0
     11  26f3				  -	      ELSE
     12  26f3				  -	      bit	VSYNC
     13  26f3					      ENDIF
     14  26f3				   .CYCLES    SET	.CYCLES - 3
     15  26f3					      ENDIF
     16  26f3
     17  26f3				  -	      REPEAT	.CYCLES / 2
     18  26f3				  -	      nop
     19  26f3					      REPEND
    166  26f3		       4c 00 f7 	      jmp	pfline_96x2_1_frame1
    167  26f6
    168  26f6							;align so our branch doesn't unexpectedly cross a page...
    169  26f6					      if	>. != >[.+$70]
    170  2700		       00 00 00 00*	      align	256
    171  2700					      endif
    172  2700
    173  2700				   pfline_96x2_1_frame1
    174  2700
    175  2700		       85 2a		      sta	HMOVE
    176  2702
    177  2702		       b9 5a fc 	      lda	bmp_96x2_1_07,y	;4
    178  2705		       85 1c		      sta	GRP1	;3
    179  2707
    180  2707		       a9 00		      lda	#$0	;2
    181  2709		       85 20		      sta	HMP0	;3
    182  270b		       85 21		      sta	HMP1	;3
    183  270d
    184  270d		       b9 a0 fb 	      lda	bmp_96x2_1_01,y
    185  2710		       8d 1b 00 	      sta.w	GRP0
    186  2713		       b9 dc fb 	      lda	bmp_96x2_1_03,y
    187  2716		       85 1b		      sta	GRP0
    188  2718		       b9 1e fc 	      lda	bmp_96x2_1_05,y
    189  271b		       85 1b		      sta	GRP0
    190  271d
      0  271d					      sleep	2
      1  271d				   .CYCLES    SET	2
      2  271d
      3  271d				  -	      IF	.CYCLES < 2
      4  271d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  271d				  -	      ERR
      6  271d					      ENDIF
      7  271d
      8  271d				  -	      IF	.CYCLES & 1
      9  271d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  271d				  -	      nop	0
     11  271d				  -	      ELSE
     12  271d				  -	      bit	VSYNC
     13  271d				  -	      ENDIF
     14  271d				  -.CYCLES    SET	.CYCLES - 3
     15  271d					      ENDIF
     16  271d
     17  271d					      REPEAT	.CYCLES / 2
     18  271d		       ea		      nop
     19  271e					      REPEND
    192  271e
    193  271e		       b9 96 fc 	      lda	bmp_96x2_1_09,y
    194  2721		       85 1c		      sta	GRP1
    195  2723		       b9 d2 fc 	      lda	bmp_96x2_1_11,y
    196  2726		       85 1c		      sta	GRP1
    197  2728
    198  2728		       b9 82 fb 	      lda	bmp_96x2_1_00,y
    199  272b		       85 1b		      sta	GRP0
    200  272d
    201  272d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    202  2730
    203  2730							;sta WSYNC	;=0 -----------------------------------------
    204  2730
    205  2730		       b9 3c fc 	      lda	bmp_96x2_1_06,y
    206  2733		       85 1c		      sta	GRP1
    207  2735
      0  2735					      sleep	8
      1  2735				   .CYCLES    SET	8
      2  2735
      3  2735				  -	      IF	.CYCLES < 2
      4  2735				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2735				  -	      ERR
      6  2735					      ENDIF
      7  2735
      8  2735				  -	      IF	.CYCLES & 1
      9  2735				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2735				  -	      nop	0
     11  2735				  -	      ELSE
     12  2735				  -	      bit	VSYNC
     13  2735				  -	      ENDIF
     14  2735				  -.CYCLES    SET	.CYCLES - 3
     15  2735					      ENDIF
     16  2735
     17  2735					      REPEAT	.CYCLES / 2
     18  2735		       ea		      nop
     17  2735					      REPEND
     18  2736		       ea		      nop
     17  2736					      REPEND
     18  2737		       ea		      nop
     17  2737					      REPEND
     18  2738		       ea		      nop
     19  2739					      REPEND
    209  2739
    210  2739		       b9 63 fb 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    211  273c		       aa		      tax		;2
    212  273d
      0  273d					      sleep	3
      1  273d				   .CYCLES    SET	3
      2  273d
      3  273d				  -	      IF	.CYCLES < 2
      4  273d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  273d				  -	      ERR
      6  273d					      ENDIF
      7  273d
      8  273d					      IF	.CYCLES & 1
      9  273d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  273d		       04 00		      nop	0
     11  273f				  -	      ELSE
     12  273f				  -	      bit	VSYNC
     13  273f					      ENDIF
     14  273f				   .CYCLES    SET	.CYCLES - 3
     15  273f					      ENDIF
     16  273f
     17  273f				  -	      REPEAT	.CYCLES / 2
     18  273f				  -	      nop
     19  273f					      REPEND
    214  273f
    215  273f		       a9 80		      lda	#$80	;2
    216  2741		       85 20		      sta	HMP0	;3
    217  2743		       85 21		      sta	HMP1	;3
    218  2745
    219  2745
    220  2745		       b9 be fb 	      lda	bmp_96x2_1_02,y	;5
    221  2748		       85 1b		      sta	GRP0	;3 =  8
    222  274a
    223  274a		       b9 00 fc 	      lda	bmp_96x2_1_04,y	;5
    224  274d		       85 1b		      sta	GRP0	;3 =  8
    225  274f
      0  274f					      sleep	2
      1  274f				   .CYCLES    SET	2
      2  274f
      3  274f				  -	      IF	.CYCLES < 2
      4  274f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  274f				  -	      ERR
      6  274f					      ENDIF
      7  274f
      8  274f				  -	      IF	.CYCLES & 1
      9  274f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  274f				  -	      nop	0
     11  274f				  -	      ELSE
     12  274f				  -	      bit	VSYNC
     13  274f				  -	      ENDIF
     14  274f				  -.CYCLES    SET	.CYCLES - 3
     15  274f					      ENDIF
     16  274f
     17  274f					      REPEAT	.CYCLES / 2
     18  274f		       ea		      nop
     19  2750					      REPEND
    227  2750
    228  2750		       b9 78 fc 	      lda	bmp_96x2_1_08,y	;5
    229  2753		       85 1c		      sta	GRP1	;3 =  8
    230  2755
    231  2755		       b9 b4 fc 	      lda	bmp_96x2_1_10,y	;5
    232  2758		       85 1c		      sta	GRP1	;3 =  8
    233  275a
      0  275a					      sleep	4
      1  275a				   .CYCLES    SET	4
      2  275a
      3  275a				  -	      IF	.CYCLES < 2
      4  275a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  275a				  -	      ERR
      6  275a					      ENDIF
      7  275a
      8  275a				  -	      IF	.CYCLES & 1
      9  275a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  275a				  -	      nop	0
     11  275a				  -	      ELSE
     12  275a				  -	      bit	VSYNC
     13  275a				  -	      ENDIF
     14  275a				  -.CYCLES    SET	.CYCLES - 3
     15  275a					      ENDIF
     16  275a
     17  275a					      REPEAT	.CYCLES / 2
     18  275a		       ea		      nop
     17  275a					      REPEND
     18  275b		       ea		      nop
     19  275c					      REPEND
    235  275c
    236  275c		       88		      dey
    237  275d
    238  275d		       8a		      txa
    239  275e				  -	      ifconst	bmp_96x2_1_fade
    240  275e				  -	      and	bmp_96x2_1_fade
    241  275e					      else
      0  275e					      sleep	3
      1  275e				   .CYCLES    SET	3
      2  275e
      3  275e				  -	      IF	.CYCLES < 2
      4  275e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  275e				  -	      ERR
      6  275e					      ENDIF
      7  275e
      8  275e					      IF	.CYCLES & 1
      9  275e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  275e		       04 00		      nop	0
     11  2760				  -	      ELSE
     12  2760				  -	      bit	VSYNC
     13  2760					      ENDIF
     14  2760				   .CYCLES    SET	.CYCLES - 3
     15  2760					      ENDIF
     16  2760
     17  2760				  -	      REPEAT	.CYCLES / 2
     18  2760				  -	      nop
     19  2760					      REPEND
    243  2760					      endif
    244  2760		       85 07		      sta	COLUP1	;3
    245  2762		       85 06		      sta	COLUP0	;3
    246  2764
    247  2764		       c4 cb		      cpy	temp1	;2
    248  2766		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    249  2768
    250  2768				   pf96x2_1_1codeend
    251  2768							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    252  2768
    253  2768		       a9 00		      lda	#0
    254  276a		       85 1b		      sta	GRP0
    255  276c		       85 1c		      sta	GRP1
    256  276e
    257  276e				   pfdone_96x2_1
    258  276e		       85 02		      sta	WSYNC	; debug
    259  2770
    260  2770		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    100  2771					      endif		;mk_96x2_1_on
    101  2771
    102  2771				  -	      ifconst	mk_96x2_2_on
    103  2771				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    104  2771					      endif		;mk_96x2_2_on
    105  2771
    106  2771				  -	      ifconst	mk_96x2_3_on
    107  2771				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    108  2771					      endif		;mk_96x2_3_on
    109  2771
    110  2771					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  2771					      include	"titlescreen/asm/score_kernel.asm"
      1  2771							; The batari Basic score kernel
      2  2771							; This minikernel is not under the same license as the rest of the 
      3  2771							; titlescreen code. Refer to the bB license before you use this in
      4  2771							; a non-bB program.
      5  2771
      6  2771				   draw_score_display
      7  2771
      8  2771		       a7 d4		      lax	score+2
      9  2773		       20 48 f8 	      jsr	miniscorepointerset
     10  2776		       84 ca		      sty	scorepointers+5
     11  2778		       86 c7		      stx	scorepointers+2
     12  277a		       a7 d3		      lax	score+1
     13  277c		       20 48 f8 	      jsr	miniscorepointerset
     14  277f		       84 c9		      sty	scorepointers+4
     15  2781		       86 c6		      stx	scorepointers+1
     16  2783		       a7 d2		      lax	score
     17  2785		       20 48 f8 	      jsr	miniscorepointerset
     18  2788		       84 c8		      sty	scorepointers+3
     19  278a		       86 c5		      stx	scorepointers
     20  278c
     21  278c		       a5 c6		      lda	scorepointers+1
     22  278e		       85 cb		      sta	temp1
     23  2790
     24  2790		       a5 c8		      lda	scorepointers+3
     25  2792		       85 cd		      sta	temp3
     26  2794
     27  2794
     28  2794		       85 2b		      sta	HMCLR
     29  2796		       ba		      tsx
     30  2797		       86 f6		      stx	stack1
     31  2799							;ldx #$10
     32  2799		       a2 20		      ldx	#$20
     33  279b		       86 20		      stx	HMP0
     34  279d
     35  279d		       a2 00		      ldx	#0
     36  279f		       85 02		      sta	WSYNC
     37  27a1		       86 1b		      STx	GRP0
     38  27a3		       86 1c		      STx	GRP1	; seems to be needed because of vdel
     39  27a5
     40  27a5		       a5 ca		      lda	scorepointers+5
     41  27a7		       95 cf		      sta	temp5,x
     42  27a9		       a9 fd		      lda	#>miniscoretable
     43  27ab		       85 c6		      sta	scorepointers+1
     44  27ad		       85 c8		      sta	scorepointers+3
     45  27af		       95 ca		      sta	scorepointers+5,x
     46  27b1		       95 cc		      sta	temp2,x
     47  27b3		       95 ce		      sta	temp4,x
     48  27b5		       95 d0		      sta	temp6,x
     49  27b7
     50  27b7
     51  27b7		       a0 07		      LDY	#7
     52  27b9		       85 10		      STA	RESP0
     53  27bb		       85 11		      STA	RESP1
     54  27bd
     55  27bd
     56  27bd		       a9 03		      LDA	#$03
     57  27bf		       85 04		      STA	NUSIZ0
     58  27c1		       95 05		      STA	NUSIZ1,x
     59  27c3		       85 25		      STA	VDELP0
     60  27c5		       85 26		      STA	VDELP1
     61  27c7							;LDA #$20
     62  27c7		       a9 30		      LDA	#$30
     63  27c9		       85 21		      STA	HMP1
     64  27cb		       a5 d5		      LDA	scorecolor
     65  27cd		       85 2a		      STA	HMOVE	; cycle 73 ?
     66  27cf				  -	      ifconst	score_kernel_fade
     67  27cf				  -	      and	score_kernel_fade
     68  27cf					      endif
     69  27cf
     70  27cf		       85 06		      STA	COLUP0
     71  27d1		       85 07		      STA	COLUP1
     72  27d3				  -	      ifconst	scorefade
     73  27d3				  -	      STA	stack2	; scorefade
     74  27d3					      endif
     75  27d3		       b1 c5		      lda	(scorepointers),y
     76  27d5		       85 1b		      sta	GRP0
     77  27d7		       b1 cd		      lda	(scorepointers+8),y
     78  27d9		       85 02		      sta	WSYNC
      0  27db					      sleep	2
      1  27db				   .CYCLES    SET	2
      2  27db
      3  27db				  -	      IF	.CYCLES < 2
      4  27db				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  27db				  -	      ERR
      6  27db					      ENDIF
      7  27db
      8  27db				  -	      IF	.CYCLES & 1
      9  27db				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  27db				  -	      nop	0
     11  27db				  -	      ELSE
     12  27db				  -	      bit	VSYNC
     13  27db				  -	      ENDIF
     14  27db				  -.CYCLES    SET	.CYCLES - 3
     15  27db					      ENDIF
     16  27db
     17  27db					      REPEAT	.CYCLES / 2
     18  27db		       ea		      nop
     19  27dc					      REPEND
     80  27dc		       4c 0b f8 	      jmp	beginscoreloop
     81  27df
     82  27df					      if	((<*)>$d4)
     83  2800		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     84  2800					      endif
     85  2800
     86  2800				   scoreloop2
     87  2800				  -	      ifconst	scorefade
     88  2800				  -	      lda	stack2
     89  2800				  -	      sta	COLUP0
     90  2800				  -	      sta	COLUP1
     91  2800					      else
      0  2800					      sleep	9
      1  2800				   .CYCLES    SET	9
      2  2800
      3  2800				  -	      IF	.CYCLES < 2
      4  2800				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2800				  -	      ERR
      6  2800					      ENDIF
      7  2800
      8  2800					      IF	.CYCLES & 1
      9  2800					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2800		       04 00		      nop	0
     11  2802				  -	      ELSE
     12  2802				  -	      bit	VSYNC
     13  2802					      ENDIF
     14  2802				   .CYCLES    SET	.CYCLES - 3
     15  2802					      ENDIF
     16  2802
     17  2802					      REPEAT	.CYCLES / 2
     18  2802		       ea		      nop
     17  2802					      REPEND
     18  2803		       ea		      nop
     17  2803					      REPEND
     18  2804		       ea		      nop
     19  2805					      REPEND
     93  2805					      endif
     94  2805		       b1 c5		      lda	(scorepointers),y	;+5  68  204
     95  2807		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     96  2809		       b1 cd		      lda	(scorepointers+$8),y	;+5   5   15
     97  280b							; cycle 0
     98  280b				   beginscoreloop
     99  280b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
    100  280d		       b1 cb		      lda	(scorepointers+$6),y	;+5  13   39
    101  280f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
    102  2811		       b3 c7		      lax	(scorepointers+$2),y	;+5  29   87
    103  2813		       9a		      txs
    104  2814		       b3 c9		      lax	(scorepointers+$4),y	;+5  36  108
    105  2816
    106  2816				  -	      ifconst	scorefade
    107  2816				  -	      dec	stack2
    108  2816					      else
      0  2816					      sleep	5
      1  2816				   .CYCLES    SET	5
      2  2816
      3  2816				  -	      IF	.CYCLES < 2
      4  2816				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2816				  -	      ERR
      6  2816					      ENDIF
      7  2816
      8  2816					      IF	.CYCLES & 1
      9  2816					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2816		       04 00		      nop	0
     11  2818				  -	      ELSE
     12  2818				  -	      bit	VSYNC
     13  2818					      ENDIF
     14  2818				   .CYCLES    SET	.CYCLES - 3
     15  2818					      ENDIF
     16  2818
     17  2818					      REPEAT	.CYCLES / 2
     18  2818		       ea		      nop
     19  2819					      REPEND
    110  2819					      endif
      0  2819					      sleep	2
      1  2819				   .CYCLES    SET	2
      2  2819
      3  2819				  -	      IF	.CYCLES < 2
      4  2819				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2819				  -	      ERR
      6  2819					      ENDIF
      7  2819
      8  2819				  -	      IF	.CYCLES & 1
      9  2819				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2819				  -	      nop	0
     11  2819				  -	      ELSE
     12  2819				  -	      bit	VSYNC
     13  2819				  -	      ENDIF
     14  2819				  -.CYCLES    SET	.CYCLES - 3
     15  2819					      ENDIF
     16  2819
     17  2819					      REPEAT	.CYCLES / 2
     18  2819		       ea		      nop
     19  281a					      REPEND
    112  281a
    113  281a		       b1 cf		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    114  281c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    115  281e		       ba		      tsx
    116  281f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    117  2821		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    118  2823
    119  2823		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    120  2825		       88		      dey
    121  2826		       10 d8		      bpl	scoreloop2	;+2  60  180
    122  2828
    123  2828
    124  2828		       a6 f6		      ldx	stack1
    125  282a		       9a		      txs
    126  282b		       a4 cb		      ldy	temp1
    127  282d		       84 c6		      sty	scorepointers+1
    128  282f
    129  282f		       a9 00		      LDA	#0
    130  2831		       85 0e		      sta	PF1
    131  2833		       85 1b		      STA	GRP0
    132  2835		       85 1c		      STA	GRP1
    133  2837		       85 25		      STA	VDELP0
    134  2839		       85 26		      STA	VDELP1
    135  283b		       85 04		      STA	NUSIZ0
    136  283d		       85 05		      STA	NUSIZ1
    137  283f
    138  283f		       a4 cd		      ldy	temp3
    139  2841		       84 c8		      sty	scorepointers+3
    140  2843
    141  2843		       a4 cf		      ldy	temp5
    142  2845		       84 ca		      sty	scorepointers+5
    143  2847		       60		      rts
    144  2848
    145  2848				   miniscorepointerset
    146  2848		       29 0f		      and	#$0F
    147  284a		       0a		      asl
    148  284b		       0a		      asl
    149  284c		       0a		      asl
    150  284d		       69 00		      adc	#<miniscoretable
    151  284f		       a8		      tay
    152  2850		       8a		      txa
    153  2851		       29 f0		      and	#$F0
    154  2853		       4a		      lsr
    155  2854		       69 00		      adc	#<miniscoretable
    156  2856		       aa		      tax
    157  2857		       60		      rts
    158  2858
------- FILE titlescreen/asm/titlescreen.asm
    112  2858					      endif		;mk_score_on
    113  2858
    114  2858				  -	      ifconst	mk_gameselect_on
    115  2858				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    116  2858					      endif		;mk_gameselect_on
    117  2858
    118  2858				   PFWAIT
    119  2858		       ad 84 02 	      lda	INTIM
    120  285b		       d0 fb		      bne	PFWAIT
    121  285d
    122  285d				   OVERSCAN
    123  285d							;lda #35+128 
    124  285d
    125  285d					      ifnconst	overscan_time
    126  285d		       a9 a3		      lda	#35+128
    127  285f				  -	      else
    128  285f				  -	      lda	#overscan_time+128-3-1
    129  285f					      endif
    130  285f
    131  285f
    132  285f		       8d 96 02 	      sta	TIM64T
    133  2862		       a9 c2		      lda	#%11000010
    134  2864		       85 02		      sta	WSYNC
    135  2866		       85 01		      sta	VBLANK
      0  2868					      RETURN
      1  2868				  -	      ifnconst	bankswitch
      2  2868				  -	      rts
      3  2868					      else
      4  2868		       4c dd ff 	      jmp	BS_return
      5  286b					      endif
    137  286b
    138  286b					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 3
      0  286b					      include	"titlescreen/48x1_1_image.asm"
      1  286b
      2  286b							; *** if you want to modify the bitmap color on the fly, just dim a
      3  286b							; *** variable in bB called 'bmp_48x1_1_color' , and use it to set the
      4  286b							; *** color.
      5  286b
      6  286b							;*** The height of the displayed data...
      7  286b		       00 5a	   bmp_48x1_1_window =	90
      8  286b
      9  286b							;*** The height of the bitmap data. This can be larger than
     10  286b							;*** the displayed data height, if you are scrolling or animating
     11  286b							;*** the data...
     12  286b		       00 62	   bmp_48x1_1_height =	98
     13  286b
     14  286b				  -	      ifnconst	bmp_48x1_1_color
     15  286b				  -bmp_48x1_1_color
     16  286b					      endif
     17  286b							; *** this is the bitmap color. If you want to change it in a 
     18  286b							; *** variable instead, dim one in bB called bmp_48x1_1_color
     19  286b		       42		      .byte.b	$42
     20  286c
     21  286c
     22  286c				  -	      if	>. != >[.+bmp_48x1_1_height]
     23  286c				  -	      align	256
     24  286c					      endif
     25  286c
     26  286c				   bmp_48x1_1_00
     27  286c
     28  286c		       00		      BYTE.b	%00000000
     29  286d		       00		      BYTE.b	%00000000
     30  286e		       00		      BYTE.b	%00000000
     31  286f		       00		      BYTE.b	%00000000
     32  2870		       0f		      BYTE.b	%00001111
     33  2871		       38		      BYTE.b	%00111000
     34  2872		       60		      BYTE.b	%01100000
     35  2873		       87		      BYTE.b	%10000111
     36  2874		       1f		      BYTE.b	%00011111
     37  2875		       7f		      BYTE.b	%01111111
     38  2876		       fe		      BYTE.b	%11111110
     39  2877		       ff		      BYTE.b	%11111111
     40  2878		       ff		      BYTE.b	%11111111
     41  2879		       ff		      BYTE.b	%11111111
     42  287a		       ff		      BYTE.b	%11111111
     43  287b		       ff		      BYTE.b	%11111111
     44  287c		       ff		      BYTE.b	%11111111
     45  287d		       ff		      BYTE.b	%11111111
     46  287e		       ff		      BYTE.b	%11111111
     47  287f		       ff		      BYTE.b	%11111111
     48  2880		       ff		      BYTE.b	%11111111
     49  2881		       ff		      BYTE.b	%11111111
     50  2882		       ff		      BYTE.b	%11111111
     51  2883		       ff		      BYTE.b	%11111111
     52  2884		       ff		      BYTE.b	%11111111
     53  2885		       fe		      BYTE.b	%11111110
     54  2886		       7c		      BYTE.b	%01111100
     55  2887		       00		      BYTE.b	%00000000
     56  2888		       00		      BYTE.b	%00000000
     57  2889		       80		      BYTE.b	%10000000
     58  288a		       00		      BYTE.b	%00000000
     59  288b		       00		      BYTE.b	%00000000
     60  288c		       00		      BYTE.b	%00000000
     61  288d		       00		      BYTE.b	%00000000
     62  288e		       10		      BYTE.b	%00010000
     63  288f		       80		      BYTE.b	%10000000
     64  2890		       c0		      BYTE.b	%11000000
     65  2891		       e4		      BYTE.b	%11100100
     66  2892		       e0		      BYTE.b	%11100000
     67  2893		       ff		      BYTE.b	%11111111
     68  2894		       f1		      BYTE.b	%11110001
     69  2895		       f1		      BYTE.b	%11110001
     70  2896		       f1		      BYTE.b	%11110001
     71  2897		       f1		      BYTE.b	%11110001
     72  2898		       f1		      BYTE.b	%11110001
     73  2899		       f8		      BYTE.b	%11111000
     74  289a		       f8		      BYTE.b	%11111000
     75  289b		       fe		      BYTE.b	%11111110
     76  289c		       f3		      BYTE.b	%11110011
     77  289d		       f3		      BYTE.b	%11110011
     78  289e		       f3		      BYTE.b	%11110011
     79  289f		       f3		      BYTE.b	%11110011
     80  28a0		       f2		      BYTE.b	%11110010
     81  28a1		       f8		      BYTE.b	%11111000
     82  28a2		       f8		      BYTE.b	%11111000
     83  28a3		       fc		      BYTE.b	%11111100
     84  28a4		       9e		      BYTE.b	%10011110
     85  28a5		       0e		      BYTE.b	%00001110
     86  28a6		       8e		      BYTE.b	%10001110
     87  28a7		       84		      BYTE.b	%10000100
     88  28a8		       80		      BYTE.b	%10000000
     89  28a9		       c0		      BYTE.b	%11000000
     90  28aa		       c0		      BYTE.b	%11000000
     91  28ab		       81		      BYTE.b	%10000001
     92  28ac		       80		      BYTE.b	%10000000
     93  28ad		       00		      BYTE.b	%00000000
     94  28ae		       00		      BYTE.b	%00000000
     95  28af		       00		      BYTE.b	%00000000
     96  28b0		       00		      BYTE.b	%00000000
     97  28b1		       00		      BYTE.b	%00000000
     98  28b2		       00		      BYTE.b	%00000000
     99  28b3		       03		      BYTE.b	%00000011
    100  28b4		       07		      BYTE.b	%00000111
    101  28b5		       0f		      BYTE.b	%00001111
    102  28b6		       c3		      BYTE.b	%11000011
    103  28b7		       c3		      BYTE.b	%11000011
    104  28b8		       83		      BYTE.b	%10000011
    105  28b9		       0f		      BYTE.b	%00001111
    106  28ba		       2f		      BYTE.b	%00101111
    107  28bb		       2f		      BYTE.b	%00101111
    108  28bc		       1f		      BYTE.b	%00011111
    109  28bd		       33		      BYTE.b	%00110011
    110  28be		       63		      BYTE.b	%01100011
    111  28bf		       8f		      BYTE.b	%10001111
    112  28c0		       0f		      BYTE.b	%00001111
    113  28c1		       0f		      BYTE.b	%00001111
    114  28c2		       06		      BYTE.b	%00000110
    115  28c3		       0e		      BYTE.b	%00001110
    116  28c4		       0e		      BYTE.b	%00001110
    117  28c5		       06		      BYTE.b	%00000110
    118  28c6		       02		      BYTE.b	%00000010
    119  28c7		       00		      BYTE.b	%00000000
    120  28c8		       00		      BYTE.b	%00000000
    121  28c9		       00		      BYTE.b	%00000000
    122  28ca		       00		      BYTE.b	%00000000
    123  28cb		       00		      BYTE.b	%00000000
    124  28cc		       00		      BYTE.b	%00000000
    125  28cd		       00		      BYTE.b	%00000000
    126  28ce		       00		      BYTE.b	%00000000
    127  28cf
    128  28cf					      if	>. != >[.+(bmp_48x1_1_height)]
    129  2900		       00 00 00 00*	      align	256
    130  2900					      endif
    131  2900
    132  2900				   bmp_48x1_1_01
    133  2900
    134  2900		       00		      BYTE.b	%00000000
    135  2901		       00		      BYTE.b	%00000000
    136  2902		       00		      BYTE.b	%00000000
    137  2903		       00		      BYTE.b	%00000000
    138  2904		       80		      BYTE.b	%10000000
    139  2905		       60		      BYTE.b	%01100000
    140  2906		       10		      BYTE.b	%00010000
    141  2907		       08		      BYTE.b	%00001000
    142  2908		       c4		      BYTE.b	%11000100
    143  2909		       ec		      BYTE.b	%11101100
    144  290a		       1a		      BYTE.b	%00011010
    145  290b		       92		      BYTE.b	%10010010
    146  290c		       d4		      BYTE.b	%11010100
    147  290d		       dc		      BYTE.b	%11011100
    148  290e		       fc		      BYTE.b	%11111100
    149  290f		       f0		      BYTE.b	%11110000
    150  2910		       f3		      BYTE.b	%11110011
    151  2911		       f7		      BYTE.b	%11110111
    152  2912		       ff		      BYTE.b	%11111111
    153  2913		       ff		      BYTE.b	%11111111
    154  2914		       ff		      BYTE.b	%11111111
    155  2915		       ff		      BYTE.b	%11111111
    156  2916		       8f		      BYTE.b	%10001111
    157  2917		       8f		      BYTE.b	%10001111
    158  2918		       07		      BYTE.b	%00000111
    159  2919		       04		      BYTE.b	%00000100
    160  291a		       03		      BYTE.b	%00000011
    161  291b		       0f		      BYTE.b	%00001111
    162  291c		       0f		      BYTE.b	%00001111
    163  291d		       0f		      BYTE.b	%00001111
    164  291e		       07		      BYTE.b	%00000111
    165  291f		       07		      BYTE.b	%00000111
    166  2920		       07		      BYTE.b	%00000111
    167  2921		       07		      BYTE.b	%00000111
    168  2922		       07		      BYTE.b	%00000111
    169  2923		       07		      BYTE.b	%00000111
    170  2924		       03		      BYTE.b	%00000011
    171  2925		       13		      BYTE.b	%00010011
    172  2926		       1b		      BYTE.b	%00011011
    173  2927		       fa		      BYTE.b	%11111010
    174  2928		       d2		      BYTE.b	%11010010
    175  2929		       e2		      BYTE.b	%11100010
    176  292a		       e3		      BYTE.b	%11100011
    177  292b		       d7		      BYTE.b	%11010111
    178  292c		       95		      BYTE.b	%10010101
    179  292d		       b3		      BYTE.b	%10110011
    180  292e		       b5		      BYTE.b	%10110101
    181  292f		       78		      BYTE.b	%01111000
    182  2930		       7c		      BYTE.b	%01111100
    183  2931		       7e		      BYTE.b	%01111110
    184  2932		       0e		      BYTE.b	%00001110
    185  2933		       1c		      BYTE.b	%00011100
    186  2934		       bc		      BYTE.b	%10111100
    187  2935		       ec		      BYTE.b	%11101100
    188  2936		       78		      BYTE.b	%01111000
    189  2937		       5c		      BYTE.b	%01011100
    190  2938		       9f		      BYTE.b	%10011111
    191  2939		       3e		      BYTE.b	%00111110
    192  293a		       3c		      BYTE.b	%00111100
    193  293b		       3e		      BYTE.b	%00111110
    194  293c		       5e		      BYTE.b	%01011110
    195  293d		       5f		      BYTE.b	%01011111
    196  293e		       1f		      BYTE.b	%00011111
    197  293f		       1e		      BYTE.b	%00011110
    198  2940		       1f		      BYTE.b	%00011111
    199  2941		       7f		      BYTE.b	%01111111
    200  2942		       7f		      BYTE.b	%01111111
    201  2943		       3f		      BYTE.b	%00111111
    202  2944		       0f		      BYTE.b	%00001111
    203  2945		       01		      BYTE.b	%00000001
    204  2946		       01		      BYTE.b	%00000001
    205  2947		       f1		      BYTE.b	%11110001
    206  2948		       f8		      BYTE.b	%11111000
    207  2949		       fe		      BYTE.b	%11111110
    208  294a		       ff		      BYTE.b	%11111111
    209  294b		       ff		      BYTE.b	%11111111
    210  294c		       ff		      BYTE.b	%11111111
    211  294d		       ff		      BYTE.b	%11111111
    212  294e		       ff		      BYTE.b	%11111111
    213  294f		       ff		      BYTE.b	%11111111
    214  2950		       ff		      BYTE.b	%11111111
    215  2951		       bf		      BYTE.b	%10111111
    216  2952		       9f		      BYTE.b	%10011111
    217  2953		       07		      BYTE.b	%00000111
    218  2954		       03		      BYTE.b	%00000011
    219  2955		       03		      BYTE.b	%00000011
    220  2956		       81		      BYTE.b	%10000001
    221  2957		       01		      BYTE.b	%00000001
    222  2958		       00		      BYTE.b	%00000000
    223  2959		       00		      BYTE.b	%00000000
    224  295a		       00		      BYTE.b	%00000000
    225  295b		       00		      BYTE.b	%00000000
    226  295c		       40		      BYTE.b	%01000000
    227  295d		       20		      BYTE.b	%00100000
    228  295e		       0f		      BYTE.b	%00001111
    229  295f		       00		      BYTE.b	%00000000
    230  2960		       00		      BYTE.b	%00000000
    231  2961		       00		      BYTE.b	%00000000
    232  2962		       40		      BYTE.b	%01000000
    233  2963
    234  2963				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    235  2963				  -	      align	256
    236  2963					      endif
    237  2963
    238  2963				   bmp_48x1_1_02
    239  2963
    240  2963		       00		      BYTE.b	%00000000
    241  2964		       00		      BYTE.b	%00000000
    242  2965		       00		      BYTE.b	%00000000
    243  2966		       00		      BYTE.b	%00000000
    244  2967		       00		      BYTE.b	%00000000
    245  2968		       00		      BYTE.b	%00000000
    246  2969		       00		      BYTE.b	%00000000
    247  296a		       00		      BYTE.b	%00000000
    248  296b		       00		      BYTE.b	%00000000
    249  296c		       00		      BYTE.b	%00000000
    250  296d		       00		      BYTE.b	%00000000
    251  296e		       00		      BYTE.b	%00000000
    252  296f		       00		      BYTE.b	%00000000
    253  2970		       00		      BYTE.b	%00000000
    254  2971		       00		      BYTE.b	%00000000
    255  2972		       40		      BYTE.b	%01000000
    256  2973		       90		      BYTE.b	%10010000
    257  2974		       90		      BYTE.b	%10010000
    258  2975		       90		      BYTE.b	%10010000
    259  2976		       90		      BYTE.b	%10010000
    260  2977		       90		      BYTE.b	%10010000
    261  2978		       81		      BYTE.b	%10000001
    262  2979		       87		      BYTE.b	%10000111
    263  297a		       1f		      BYTE.b	%00011111
    264  297b		       3f		      BYTE.b	%00111111
    265  297c		       ff		      BYTE.b	%11111111
    266  297d		       ff		      BYTE.b	%11111111
    267  297e		       ff		      BYTE.b	%11111111
    268  297f		       ff		      BYTE.b	%11111111
    269  2980		       ff		      BYTE.b	%11111111
    270  2981		       fd		      BYTE.b	%11111101
    271  2982		       fd		      BYTE.b	%11111101
    272  2983		       bf		      BYTE.b	%10111111
    273  2984		       db		      BYTE.b	%11011011
    274  2985		       e7		      BYTE.b	%11100111
    275  2986		       ff		      BYTE.b	%11111111
    276  2987		       fd		      BYTE.b	%11111101
    277  2988		       fb		      BYTE.b	%11111011
    278  2989		       fe		      BYTE.b	%11111110
    279  298a		       7e		      BYTE.b	%01111110
    280  298b		       7c		      BYTE.b	%01111100
    281  298c		       7b		      BYTE.b	%01111011
    282  298d		       7e		      BYTE.b	%01111110
    283  298e		       3c		      BYTE.b	%00111100
    284  298f		       00		      BYTE.b	%00000000
    285  2990		       80		      BYTE.b	%10000000
    286  2991		       c0		      BYTE.b	%11000000
    287  2992		       e3		      BYTE.b	%11100011
    288  2993		       f7		      BYTE.b	%11110111
    289  2994		       ff		      BYTE.b	%11111111
    290  2995		       ff		      BYTE.b	%11111111
    291  2996		       ff		      BYTE.b	%11111111
    292  2997		       f7		      BYTE.b	%11110111
    293  2998		       f7		      BYTE.b	%11110111
    294  2999		       ff		      BYTE.b	%11111111
    295  299a		       f3		      BYTE.b	%11110011
    296  299b		       71		      BYTE.b	%01110001
    297  299c		       7d		      BYTE.b	%01111101
    298  299d		       6d		      BYTE.b	%01101101
    299  299e		       68		      BYTE.b	%01101000
    300  299f		       2c		      BYTE.b	%00101100
    301  29a0		       34		      BYTE.b	%00110100
    302  29a1		       32		      BYTE.b	%00110010
    303  29a2		       22		      BYTE.b	%00100010
    304  29a3		       a2		      BYTE.b	%10100010
    305  29a4		       05		      BYTE.b	%00000101
    306  29a5		       19		      BYTE.b	%00011001
    307  29a6		       10		      BYTE.b	%00010000
    308  29a7		       82		      BYTE.b	%10000010
    309  29a8		       c2		      BYTE.b	%11000010
    310  29a9		       da		      BYTE.b	%11011010
    311  29aa		       dc		      BYTE.b	%11011100
    312  29ab		       98		      BYTE.b	%10011000
    313  29ac		       90		      BYTE.b	%10010000
    314  29ad		       91		      BYTE.b	%10010001
    315  29ae		       17		      BYTE.b	%00010111
    316  29af		       1f		      BYTE.b	%00011111
    317  29b0		       ff		      BYTE.b	%11111111
    318  29b1		       ff		      BYTE.b	%11111111
    319  29b2		       ef		      BYTE.b	%11101111
    320  29b3		       ef		      BYTE.b	%11101111
    321  29b4		       ef		      BYTE.b	%11101111
    322  29b5		       ef		      BYTE.b	%11101111
    323  29b6		       e7		      BYTE.b	%11100111
    324  29b7		       e7		      BYTE.b	%11100111
    325  29b8		       c1		      BYTE.b	%11000001
    326  29b9		       c2		      BYTE.b	%11000010
    327  29ba		       c1		      BYTE.b	%11000001
    328  29bb		       c1		      BYTE.b	%11000001
    329  29bc		       80		      BYTE.b	%10000000
    330  29bd		       80		      BYTE.b	%10000000
    331  29be		       80		      BYTE.b	%10000000
    332  29bf		       80		      BYTE.b	%10000000
    333  29c0		       00		      BYTE.b	%00000000
    334  29c1		       00		      BYTE.b	%00000000
    335  29c2		       00		      BYTE.b	%00000000
    336  29c3		       00		      BYTE.b	%00000000
    337  29c4		       00		      BYTE.b	%00000000
    338  29c5		       80		      BYTE.b	%10000000
    339  29c6
    340  29c6					      if	>. != >[.+(bmp_48x1_1_height)]
    341  2a00		       00 00 00 00*	      align	256
    342  2a00					      endif
    343  2a00
    344  2a00				   bmp_48x1_1_03
    345  2a00
    346  2a00		       0a		      BYTE.b	%00001010
    347  2a01		       0b		      BYTE.b	%00001011
    348  2a02		       0d		      BYTE.b	%00001101
    349  2a03		       07		      BYTE.b	%00000111
    350  2a04		       03		      BYTE.b	%00000011
    351  2a05		       03		      BYTE.b	%00000011
    352  2a06		       03		      BYTE.b	%00000011
    353  2a07		       03		      BYTE.b	%00000011
    354  2a08		       05		      BYTE.b	%00000101
    355  2a09		       05		      BYTE.b	%00000101
    356  2a0a		       01		      BYTE.b	%00000001
    357  2a0b		       07		      BYTE.b	%00000111
    358  2a0c		       17		      BYTE.b	%00010111
    359  2a0d		       17		      BYTE.b	%00010111
    360  2a0e		       17		      BYTE.b	%00010111
    361  2a0f		       13		      BYTE.b	%00010011
    362  2a10		       03		      BYTE.b	%00000011
    363  2a11		       07		      BYTE.b	%00000111
    364  2a12		       0f		      BYTE.b	%00001111
    365  2a13		       3f		      BYTE.b	%00111111
    366  2a14		       ff		      BYTE.b	%11111111
    367  2a15		       ff		      BYTE.b	%11111111
    368  2a16		       ff		      BYTE.b	%11111111
    369  2a17		       ff		      BYTE.b	%11111111
    370  2a18		       ff		      BYTE.b	%11111111
    371  2a19		       ff		      BYTE.b	%11111111
    372  2a1a		       ff		      BYTE.b	%11111111
    373  2a1b		       ff		      BYTE.b	%11111111
    374  2a1c		       ff		      BYTE.b	%11111111
    375  2a1d		       ef		      BYTE.b	%11101111
    376  2a1e		       ef		      BYTE.b	%11101111
    377  2a1f		       e7		      BYTE.b	%11100111
    378  2a20		       e7		      BYTE.b	%11100111
    379  2a21		       e7		      BYTE.b	%11100111
    380  2a22		       e7		      BYTE.b	%11100111
    381  2a23		       e7		      BYTE.b	%11100111
    382  2a24		       c7		      BYTE.b	%11000111
    383  2a25		       c7		      BYTE.b	%11000111
    384  2a26		       cf		      BYTE.b	%11001111
    385  2a27		       8f		      BYTE.b	%10001111
    386  2a28		       89		      BYTE.b	%10001001
    387  2a29		       80		      BYTE.b	%10000000
    388  2a2a		       0e		      BYTE.b	%00001110
    389  2a2b		       1f		      BYTE.b	%00011111
    390  2a2c		       1f		      BYTE.b	%00011111
    391  2a2d		       3f		      BYTE.b	%00111111
    392  2a2e		       3f		      BYTE.b	%00111111
    393  2a2f		       bf		      BYTE.b	%10111111
    394  2a30		       bf		      BYTE.b	%10111111
    395  2a31		       be		      BYTE.b	%10111110
    396  2a32		       98		      BYTE.b	%10011000
    397  2a33		       96		      BYTE.b	%10010110
    398  2a34		       ef		      BYTE.b	%11101111
    399  2a35		       ef		      BYTE.b	%11101111
    400  2a36		       ee		      BYTE.b	%11101110
    401  2a37		       ee		      BYTE.b	%11101110
    402  2a38		       ea		      BYTE.b	%11101010
    403  2a39		       e8		      BYTE.b	%11101000
    404  2a3a		       e8		      BYTE.b	%11101000
    405  2a3b		       e8		      BYTE.b	%11101000
    406  2a3c		       f8		      BYTE.b	%11111000
    407  2a3d		       fa		      BYTE.b	%11111010
    408  2a3e		       f6		      BYTE.b	%11110110
    409  2a3f		       f8		      BYTE.b	%11111000
    410  2a40		       fc		      BYTE.b	%11111100
    411  2a41		       c7		      BYTE.b	%11000111
    412  2a42		       c0		      BYTE.b	%11000000
    413  2a43		       58		      BYTE.b	%01011000
    414  2a44		       5c		      BYTE.b	%01011100
    415  2a45		       5f		      BYTE.b	%01011111
    416  2a46		       df		      BYTE.b	%11011111
    417  2a47		       ef		      BYTE.b	%11101111
    418  2a48		       7f		      BYTE.b	%01111111
    419  2a49		       ff		      BYTE.b	%11111111
    420  2a4a		       ff		      BYTE.b	%11111111
    421  2a4b		       ff		      BYTE.b	%11111111
    422  2a4c		       ff		      BYTE.b	%11111111
    423  2a4d		       ff		      BYTE.b	%11111111
    424  2a4e		       ff		      BYTE.b	%11111111
    425  2a4f		       ff		      BYTE.b	%11111111
    426  2a50		       ff		      BYTE.b	%11111111
    427  2a51		       ff		      BYTE.b	%11111111
    428  2a52		       fe		      BYTE.b	%11111110
    429  2a53		       f8		      BYTE.b	%11111000
    430  2a54		       f0		      BYTE.b	%11110000
    431  2a55		       e0		      BYTE.b	%11100000
    432  2a56		       07		      BYTE.b	%00000111
    433  2a57		       0f		      BYTE.b	%00001111
    434  2a58		       1e		      BYTE.b	%00011110
    435  2a59		       f8		      BYTE.b	%11111000
    436  2a5a		       f0		      BYTE.b	%11110000
    437  2a5b		       0f		      BYTE.b	%00001111
    438  2a5c		       03		      BYTE.b	%00000011
    439  2a5d		       00		      BYTE.b	%00000000
    440  2a5e		       00		      BYTE.b	%00000000
    441  2a5f		       00		      BYTE.b	%00000000
    442  2a60		       00		      BYTE.b	%00000000
    443  2a61		       00		      BYTE.b	%00000000
    444  2a62		       03		      BYTE.b	%00000011
    445  2a63
    446  2a63				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    447  2a63				  -	      align	256
    448  2a63					      endif
    449  2a63
    450  2a63				   bmp_48x1_1_04
    451  2a63
    452  2a63		       ff		      BYTE.b	%11111111
    453  2a64		       ff		      BYTE.b	%11111111
    454  2a65		       ff		      BYTE.b	%11111111
    455  2a66		       ff		      BYTE.b	%11111111
    456  2a67		       ff		      BYTE.b	%11111111
    457  2a68		       ff		      BYTE.b	%11111111
    458  2a69		       ff		      BYTE.b	%11111111
    459  2a6a		       ff		      BYTE.b	%11111111
    460  2a6b		       ff		      BYTE.b	%11111111
    461  2a6c		       ff		      BYTE.b	%11111111
    462  2a6d		       ff		      BYTE.b	%11111111
    463  2a6e		       fe		      BYTE.b	%11111110
    464  2a6f		       fc		      BYTE.b	%11111100
    465  2a70		       f8		      BYTE.b	%11111000
    466  2a71		       e0		      BYTE.b	%11100000
    467  2a72		       c0		      BYTE.b	%11000000
    468  2a73		       00		      BYTE.b	%00000000
    469  2a74		       80		      BYTE.b	%10000000
    470  2a75		       c0		      BYTE.b	%11000000
    471  2a76		       a0		      BYTE.b	%10100000
    472  2a77		       80		      BYTE.b	%10000000
    473  2a78		       90		      BYTE.b	%10010000
    474  2a79		       88		      BYTE.b	%10001000
    475  2a7a		       84		      BYTE.b	%10000100
    476  2a7b		       82		      BYTE.b	%10000010
    477  2a7c		       81		      BYTE.b	%10000001
    478  2a7d		       80		      BYTE.b	%10000000
    479  2a7e		       c0		      BYTE.b	%11000000
    480  2a7f		       c0		      BYTE.b	%11000000
    481  2a80		       c0		      BYTE.b	%11000000
    482  2a81		       c0		      BYTE.b	%11000000
    483  2a82		       c0		      BYTE.b	%11000000
    484  2a83		       c0		      BYTE.b	%11000000
    485  2a84		       c0		      BYTE.b	%11000000
    486  2a85		       e0		      BYTE.b	%11100000
    487  2a86		       e0		      BYTE.b	%11100000
    488  2a87		       e0		      BYTE.b	%11100000
    489  2a88		       c0		      BYTE.b	%11000000
    490  2a89		       c0		      BYTE.b	%11000000
    491  2a8a		       90		      BYTE.b	%10010000
    492  2a8b		       90		      BYTE.b	%10010000
    493  2a8c		       80		      BYTE.b	%10000000
    494  2a8d		       80		      BYTE.b	%10000000
    495  2a8e		       c0		      BYTE.b	%11000000
    496  2a8f		       00		      BYTE.b	%00000000
    497  2a90		       e0		      BYTE.b	%11100000
    498  2a91		       e8		      BYTE.b	%11101000
    499  2a92		       e8		      BYTE.b	%11101000
    500  2a93		       f0		      BYTE.b	%11110000
    501  2a94		       f0		      BYTE.b	%11110000
    502  2a95		       f0		      BYTE.b	%11110000
    503  2a96		       fc		      BYTE.b	%11111100
    504  2a97		       fc		      BYTE.b	%11111100
    505  2a98		       7c		      BYTE.b	%01111100
    506  2a99		       78		      BYTE.b	%01111000
    507  2a9a		       3c		      BYTE.b	%00111100
    508  2a9b		       3c		      BYTE.b	%00111100
    509  2a9c		       2e		      BYTE.b	%00101110
    510  2a9d		       be		      BYTE.b	%10111110
    511  2a9e		       9e		      BYTE.b	%10011110
    512  2a9f		       bc		      BYTE.b	%10111100
    513  2aa0		       3c		      BYTE.b	%00111100
    514  2aa1		       7d		      BYTE.b	%01111101
    515  2aa2		       3d		      BYTE.b	%00111101
    516  2aa3		       fd		      BYTE.b	%11111101
    517  2aa4		       8f		      BYTE.b	%10001111
    518  2aa5		       0e		      BYTE.b	%00001110
    519  2aa6		       0c		      BYTE.b	%00001100
    520  2aa7		       74		      BYTE.b	%01110100
    521  2aa8		       f4		      BYTE.b	%11110100
    522  2aa9		       f4		      BYTE.b	%11110100
    523  2aaa		       f4		      BYTE.b	%11110100
    524  2aab		       f8		      BYTE.b	%11111000
    525  2aac		       f8		      BYTE.b	%11111000
    526  2aad		       fe		      BYTE.b	%11111110
    527  2aae		       f6		      BYTE.b	%11110110
    528  2aaf		       e3		      BYTE.b	%11100011
    529  2ab0		       e0		      BYTE.b	%11100000
    530  2ab1		       c0		      BYTE.b	%11000000
    531  2ab2		       c0		      BYTE.b	%11000000
    532  2ab3		       83		      BYTE.b	%10000011
    533  2ab4		       07		      BYTE.b	%00000111
    534  2ab5		       0f		      BYTE.b	%00001111
    535  2ab6		       3e		      BYTE.b	%00111110
    536  2ab7		       7e		      BYTE.b	%01111110
    537  2ab8		       fc		      BYTE.b	%11111100
    538  2ab9		       fb		      BYTE.b	%11111011
    539  2aba		       f3		      BYTE.b	%11110011
    540  2abb		       e3		      BYTE.b	%11100011
    541  2abc		       e3		      BYTE.b	%11100011
    542  2abd		       ee		      BYTE.b	%11101110
    543  2abe		       f8		      BYTE.b	%11111000
    544  2abf		       e0		      BYTE.b	%11100000
    545  2ac0		       60		      BYTE.b	%01100000
    546  2ac1		       60		      BYTE.b	%01100000
    547  2ac2		       60		      BYTE.b	%01100000
    548  2ac3		       60		      BYTE.b	%01100000
    549  2ac4		       00		      BYTE.b	%00000000
    550  2ac5		       e0		      BYTE.b	%11100000
    551  2ac6
    552  2ac6					      if	>. != >[.+(bmp_48x1_1_height)]
    553  2b00		       00 00 00 00*	      align	256
    554  2b00					      endif
    555  2b00
    556  2b00				   bmp_48x1_1_05
    557  2b00
    558  2b00		       c0		      BYTE.b	%11000000
    559  2b01		       c0		      BYTE.b	%11000000
    560  2b02		       c0		      BYTE.b	%11000000
    561  2b03		       c0		      BYTE.b	%11000000
    562  2b04		       c0		      BYTE.b	%11000000
    563  2b05		       c0		      BYTE.b	%11000000
    564  2b06		       80		      BYTE.b	%10000000
    565  2b07		       80		      BYTE.b	%10000000
    566  2b08		       80		      BYTE.b	%10000000
    567  2b09		       80		      BYTE.b	%10000000
    568  2b0a		       00		      BYTE.b	%00000000
    569  2b0b		       01		      BYTE.b	%00000001
    570  2b0c		       00		      BYTE.b	%00000000
    571  2b0d		       01		      BYTE.b	%00000001
    572  2b0e		       04		      BYTE.b	%00000100
    573  2b0f		       07		      BYTE.b	%00000111
    574  2b10		       37		      BYTE.b	%00110111
    575  2b11		       76		      BYTE.b	%01110110
    576  2b12		       7e		      BYTE.b	%01111110
    577  2b13		       7f		      BYTE.b	%01111111
    578  2b14		       77		      BYTE.b	%01110111
    579  2b15		       67		      BYTE.b	%01100111
    580  2b16		       4b		      BYTE.b	%01001011
    581  2b17		       4b		      BYTE.b	%01001011
    582  2b18		       0b		      BYTE.b	%00001011
    583  2b19		       03		      BYTE.b	%00000011
    584  2b1a		       03		      BYTE.b	%00000011
    585  2b1b		       05		      BYTE.b	%00000101
    586  2b1c		       09		      BYTE.b	%00001001
    587  2b1d		       13		      BYTE.b	%00010011
    588  2b1e		       0f		      BYTE.b	%00001111
    589  2b1f		       0f		      BYTE.b	%00001111
    590  2b20		       0b		      BYTE.b	%00001011
    591  2b21		       0c		      BYTE.b	%00001100
    592  2b22		       08		      BYTE.b	%00001000
    593  2b23		       08		      BYTE.b	%00001000
    594  2b24		       00		      BYTE.b	%00000000
    595  2b25		       00		      BYTE.b	%00000000
    596  2b26		       00		      BYTE.b	%00000000
    597  2b27		       01		      BYTE.b	%00000001
    598  2b28		       01		      BYTE.b	%00000001
    599  2b29		       01		      BYTE.b	%00000001
    600  2b2a		       01		      BYTE.b	%00000001
    601  2b2b		       00		      BYTE.b	%00000000
    602  2b2c		       04		      BYTE.b	%00000100
    603  2b2d		       04		      BYTE.b	%00000100
    604  2b2e		       04		      BYTE.b	%00000100
    605  2b2f		       04		      BYTE.b	%00000100
    606  2b30		       28		      BYTE.b	%00101000
    607  2b31		       10		      BYTE.b	%00010000
    608  2b32		       00		      BYTE.b	%00000000
    609  2b33		       00		      BYTE.b	%00000000
    610  2b34		       00		      BYTE.b	%00000000
    611  2b35		       00		      BYTE.b	%00000000
    612  2b36		       00		      BYTE.b	%00000000
    613  2b37		       00		      BYTE.b	%00000000
    614  2b38		       00		      BYTE.b	%00000000
    615  2b39		       00		      BYTE.b	%00000000
    616  2b3a		       00		      BYTE.b	%00000000
    617  2b3b		       00		      BYTE.b	%00000000
    618  2b3c		       00		      BYTE.b	%00000000
    619  2b3d		       00		      BYTE.b	%00000000
    620  2b3e		       00		      BYTE.b	%00000000
    621  2b3f		       00		      BYTE.b	%00000000
    622  2b40		       00		      BYTE.b	%00000000
    623  2b41		       00		      BYTE.b	%00000000
    624  2b42		       00		      BYTE.b	%00000000
    625  2b43		       00		      BYTE.b	%00000000
    626  2b44		       80		      BYTE.b	%10000000
    627  2b45		       80		      BYTE.b	%10000000
    628  2b46		       80		      BYTE.b	%10000000
    629  2b47		       80		      BYTE.b	%10000000
    630  2b48		       00		      BYTE.b	%00000000
    631  2b49		       00		      BYTE.b	%00000000
    632  2b4a		       00		      BYTE.b	%00000000
    633  2b4b		       40		      BYTE.b	%01000000
    634  2b4c		       40		      BYTE.b	%01000000
    635  2b4d		       c0		      BYTE.b	%11000000
    636  2b4e		       60		      BYTE.b	%01100000
    637  2b4f		       f0		      BYTE.b	%11110000
    638  2b50		       fe		      BYTE.b	%11111110
    639  2b51		       87		      BYTE.b	%10000111
    640  2b52		       8f		      BYTE.b	%10001111
    641  2b53		       3f		      BYTE.b	%00111111
    642  2b54		       3f		      BYTE.b	%00111111
    643  2b55		       3f		      BYTE.b	%00111111
    644  2b56		       7e		      BYTE.b	%01111110
    645  2b57		       60		      BYTE.b	%01100000
    646  2b58		       80		      BYTE.b	%10000000
    647  2b59		       00		      BYTE.b	%00000000
    648  2b5a		       00		      BYTE.b	%00000000
    649  2b5b		       00		      BYTE.b	%00000000
    650  2b5c		       00		      BYTE.b	%00000000
    651  2b5d		       00		      BYTE.b	%00000000
    652  2b5e		       00		      BYTE.b	%00000000
    653  2b5f		       00		      BYTE.b	%00000000
    654  2b60		       00		      BYTE.b	%00000000
    655  2b61		       00		      BYTE.b	%00000000
    656  2b62		       00		      BYTE.b	%00000000
    657  2b63
------- FILE titlescreen/asm/titlescreen.asm
    140  2b63					      endif
    141  2b63				  -	      ifconst	mk_48x1_2_on
    142  2b63				  -	      include	"titlescreen/48x1_2_image.asm"
    143  2b63					      endif
    144  2b63				  -	      ifconst	mk_48x1_3_on
    145  2b63				  -	      include	"titlescreen/48x1_3_image.asm"
    146  2b63					      endif
    147  2b63
    148  2b63				  -	      ifconst	mk_48x2_1_on
    149  2b63				  -	      include	"titlescreen/48x2_1_image.asm"
    150  2b63					      endif
    151  2b63				  -	      ifconst	mk_48x2_2_on
    152  2b63				  -	      include	"titlescreen/48x2_2_image.asm"
    153  2b63					      endif
    154  2b63				  -	      ifconst	mk_48x2_3_on
    155  2b63				  -	      include	"titlescreen/48x2_3_image.asm"
    156  2b63					      endif
    157  2b63
    158  2b63					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 3
      0  2b63					      include	"titlescreen/96x2_1_image.asm"
      1  2b63
      2  2b63							;*** The height of the displayed data...
      3  2b63		       00 1c	   bmp_96x2_1_window =	28
      4  2b63
      5  2b63							;*** The height of the bitmap data. This can be larger than
      6  2b63							;*** the displayed data height, if you are scrolling or animating
      7  2b63							;*** the data...
      8  2b63		       00 1e	   bmp_96x2_1_height =	30
      9  2b63
     10  2b63				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     11  2b63				  -	      align	256
     12  2b63					      endif
     13  2b63		       00		      BYTE.b	$00	; leave this here!
     14  2b64
     15  2b64
     16  2b64							;*** this is the color of each line in the bitmap data
     17  2b64				   bmp_96x2_1_colors
     18  2b64		       0c		      BYTE.b	$0c
     19  2b65		       0c		      BYTE.b	$0c
     20  2b66		       0c		      BYTE.b	$0c
     21  2b67		       0c		      BYTE.b	$0c
     22  2b68		       0c		      BYTE.b	$0c
     23  2b69		       0c		      BYTE.b	$0c
     24  2b6a		       0c		      BYTE.b	$0c
     25  2b6b		       0c		      BYTE.b	$0c
     26  2b6c		       0c		      BYTE.b	$0c
     27  2b6d		       0c		      BYTE.b	$0c
     28  2b6e		       0c		      BYTE.b	$0c
     29  2b6f		       0c		      BYTE.b	$0c
     30  2b70		       0c		      BYTE.b	$0c
     31  2b71		       0c		      BYTE.b	$0c
     32  2b72		       0c		      BYTE.b	$0c
     33  2b73		       0c		      BYTE.b	$0c
     34  2b74		       0c		      BYTE.b	$0c
     35  2b75		       0c		      BYTE.b	$0c
     36  2b76		       0c		      BYTE.b	$0c
     37  2b77		       0c		      BYTE.b	$0c
     38  2b78		       0c		      BYTE.b	$0c
     39  2b79		       0c		      BYTE.b	$0c
     40  2b7a		       0c		      BYTE.b	$0c
     41  2b7b		       0c		      BYTE.b	$0c
     42  2b7c		       0c		      BYTE.b	$0c
     43  2b7d		       0c		      BYTE.b	$0c
     44  2b7e		       0c		      BYTE.b	$0c
     45  2b7f		       0c		      BYTE.b	$0c
     46  2b80		       0c		      BYTE.b	$0c
     47  2b81		       0c		      BYTE.b	$0c
     48  2b82
     49  2b82				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     50  2b82				  -	      align	256
     51  2b82					      endif
     52  2b82
     53  2b82				   bmp_96x2_1_00
     54  2b82
     55  2b82		       00		      BYTE.b	%00000000
     56  2b83		       00		      BYTE.b	%00000000
     57  2b84		       00		      BYTE.b	%00000000
     58  2b85		       00		      BYTE.b	%00000000
     59  2b86		       00		      BYTE.b	%00000000
     60  2b87		       00		      BYTE.b	%00000000
     61  2b88		       00		      BYTE.b	%00000000
     62  2b89		       00		      BYTE.b	%00000000
     63  2b8a		       00		      BYTE.b	%00000000
     64  2b8b		       00		      BYTE.b	%00000000
     65  2b8c		       00		      BYTE.b	%00000000
     66  2b8d		       00		      BYTE.b	%00000000
     67  2b8e		       00		      BYTE.b	%00000000
     68  2b8f		       00		      BYTE.b	%00000000
     69  2b90		       00		      BYTE.b	%00000000
     70  2b91		       00		      BYTE.b	%00000000
     71  2b92		       70		      BYTE.b	%01110000
     72  2b93		       70		      BYTE.b	%01110000
     73  2b94		       70		      BYTE.b	%01110000
     74  2b95		       78		      BYTE.b	%01111000
     75  2b96		       7f		      BYTE.b	%01111111
     76  2b97		       7f		      BYTE.b	%01111111
     77  2b98		       7f		      BYTE.b	%01111111
     78  2b99		       70		      BYTE.b	%01110000
     79  2b9a		       70		      BYTE.b	%01110000
     80  2b9b		       70		      BYTE.b	%01110000
     81  2b9c		       70		      BYTE.b	%01110000
     82  2b9d		       00		      BYTE.b	%00000000
     83  2b9e		       00		      BYTE.b	%00000000
     84  2b9f		       00		      BYTE.b	%00000000
     85  2ba0
     86  2ba0				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     87  2ba0				  -	      align	256
     88  2ba0					      endif
     89  2ba0
     90  2ba0				   bmp_96x2_1_01
     91  2ba0
     92  2ba0		       00		      BYTE.b	%00000000
     93  2ba1		       00		      BYTE.b	%00000000
     94  2ba2		       00		      BYTE.b	%00000000
     95  2ba3		       00		      BYTE.b	%00000000
     96  2ba4		       00		      BYTE.b	%00000000
     97  2ba5		       00		      BYTE.b	%00000000
     98  2ba6		       00		      BYTE.b	%00000000
     99  2ba7		       00		      BYTE.b	%00000000
    100  2ba8		       00		      BYTE.b	%00000000
    101  2ba9		       00		      BYTE.b	%00000000
    102  2baa		       00		      BYTE.b	%00000000
    103  2bab		       00		      BYTE.b	%00000000
    104  2bac		       00		      BYTE.b	%00000000
    105  2bad		       00		      BYTE.b	%00000000
    106  2bae		       00		      BYTE.b	%00000000
    107  2baf		       00		      BYTE.b	%00000000
    108  2bb0		       3c		      BYTE.b	%00111100
    109  2bb1		       3c		      BYTE.b	%00111100
    110  2bb2		       3c		      BYTE.b	%00111100
    111  2bb3		       3d		      BYTE.b	%00111101
    112  2bb4		       fd		      BYTE.b	%11111101
    113  2bb5		       fd		      BYTE.b	%11111101
    114  2bb6		       fd		      BYTE.b	%11111101
    115  2bb7		       3d		      BYTE.b	%00111101
    116  2bb8		       3c		      BYTE.b	%00111100
    117  2bb9		       3c		      BYTE.b	%00111100
    118  2bba		       18		      BYTE.b	%00011000
    119  2bbb		       00		      BYTE.b	%00000000
    120  2bbc		       00		      BYTE.b	%00000000
    121  2bbd		       00		      BYTE.b	%00000000
    122  2bbe
    123  2bbe				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    124  2bbe				  -	      align	256
    125  2bbe					      endif
    126  2bbe
    127  2bbe				   bmp_96x2_1_02
    128  2bbe
    129  2bbe		       00		      BYTE.b	%00000000
    130  2bbf		       00		      BYTE.b	%00000000
    131  2bc0		       00		      BYTE.b	%00000000
    132  2bc1		       00		      BYTE.b	%00000000
    133  2bc2		       00		      BYTE.b	%00000000
    134  2bc3		       00		      BYTE.b	%00000000
    135  2bc4		       00		      BYTE.b	%00000000
    136  2bc5		       00		      BYTE.b	%00000000
    137  2bc6		       00		      BYTE.b	%00000000
    138  2bc7		       00		      BYTE.b	%00000000
    139  2bc8		       00		      BYTE.b	%00000000
    140  2bc9		       00		      BYTE.b	%00000000
    141  2bca		       00		      BYTE.b	%00000000
    142  2bcb		       00		      BYTE.b	%00000000
    143  2bcc		       00		      BYTE.b	%00000000
    144  2bcd		       00		      BYTE.b	%00000000
    145  2bce		       3f		      BYTE.b	%00111111
    146  2bcf		       ff		      BYTE.b	%11111111
    147  2bd0		       ff		      BYTE.b	%11111111
    148  2bd1		       e0		      BYTE.b	%11100000
    149  2bd2		       c0		      BYTE.b	%11000000
    150  2bd3		       c0		      BYTE.b	%11000000
    151  2bd4		       e0		      BYTE.b	%11100000
    152  2bd5		       f0		      BYTE.b	%11110000
    153  2bd6		       ff		      BYTE.b	%11111111
    154  2bd7		       7f		      BYTE.b	%01111111
    155  2bd8		       1f		      BYTE.b	%00011111
    156  2bd9		       00		      BYTE.b	%00000000
    157  2bda		       00		      BYTE.b	%00000000
    158  2bdb		       00		      BYTE.b	%00000000
    159  2bdc
    160  2bdc				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    161  2bdc				  -	      align	256
    162  2bdc					      endif
    163  2bdc
    164  2bdc				   bmp_96x2_1_03
    165  2bdc
    166  2bdc		       00		      BYTE.b	%00000000
    167  2bdd		       00		      BYTE.b	%00000000
    168  2bde		       00		      BYTE.b	%00000000
    169  2bdf		       ff		      BYTE.b	%11111111
    170  2be0		       ff		      BYTE.b	%11111111
    171  2be1		       7f		      BYTE.b	%01111111
    172  2be2		       00		      BYTE.b	%00000000
    173  2be3		       1f		      BYTE.b	%00011111
    174  2be4		       7f		      BYTE.b	%01111111
    175  2be5		       ff		      BYTE.b	%11111111
    176  2be6		       f0		      BYTE.b	%11110000
    177  2be7		       ff		      BYTE.b	%11111111
    178  2be8		       ff		      BYTE.b	%11111111
    179  2be9		       3f		      BYTE.b	%00111111
    180  2bea		       00		      BYTE.b	%00000000
    181  2beb		       00		      BYTE.b	%00000000
    182  2bec		       f1		      BYTE.b	%11110001
    183  2bed		       f9		      BYTE.b	%11111001
    184  2bee		       fd		      BYTE.b	%11111101
    185  2bef		       3d		      BYTE.b	%00111101
    186  2bf0		       1d		      BYTE.b	%00011101
    187  2bf1		       1d		      BYTE.b	%00011101
    188  2bf2		       1c		      BYTE.b	%00011100
    189  2bf3		       7c		      BYTE.b	%01111100
    190  2bf4		       f8		      BYTE.b	%11111000
    191  2bf5		       f0		      BYTE.b	%11110000
    192  2bf6		       c0		      BYTE.b	%11000000
    193  2bf7		       00		      BYTE.b	%00000000
    194  2bf8		       00		      BYTE.b	%00000000
    195  2bf9		       00		      BYTE.b	%00000000
    196  2bfa
    197  2bfa					      if	>. != >[.+(bmp_96x2_1_height)]
    198  2c00		       00 00 00 00*	      align	256
    199  2c00					      endif
    200  2c00
    201  2c00				   bmp_96x2_1_04
    202  2c00
    203  2c00		       00		      BYTE.b	%00000000
    204  2c01		       00		      BYTE.b	%00000000
    205  2c02		       00		      BYTE.b	%00000000
    206  2c03		       e1		      BYTE.b	%11100001
    207  2c04		       f9		      BYTE.b	%11111001
    208  2c05		       fd		      BYTE.b	%11111101
    209  2c06		       3d		      BYTE.b	%00111101
    210  2c07		       fd		      BYTE.b	%11111101
    211  2c08		       f9		      BYTE.b	%11111001
    212  2c09		       f1		      BYTE.b	%11110001
    213  2c0a		       01		      BYTE.b	%00000001
    214  2c0b		       f1		      BYTE.b	%11110001
    215  2c0c		       f1		      BYTE.b	%11110001
    216  2c0d		       f9		      BYTE.b	%11111001
    217  2c0e		       00		      BYTE.b	%00000000
    218  2c0f		       00		      BYTE.b	%00000000
    219  2c10		       c0		      BYTE.b	%11000000
    220  2c11		       c0		      BYTE.b	%11000000
    221  2c12		       e1		      BYTE.b	%11100001
    222  2c13		       ff		      BYTE.b	%11111111
    223  2c14		       ff		      BYTE.b	%11111111
    224  2c15		       ff		      BYTE.b	%11111111
    225  2c16		       00		      BYTE.b	%00000000
    226  2c17		       00		      BYTE.b	%00000000
    227  2c18		       ff		      BYTE.b	%11111111
    228  2c19		       ff		      BYTE.b	%11111111
    229  2c1a		       7f		      BYTE.b	%01111111
    230  2c1b		       00		      BYTE.b	%00000000
    231  2c1c		       00		      BYTE.b	%00000000
    232  2c1d		       00		      BYTE.b	%00000000
    233  2c1e
    234  2c1e				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    235  2c1e				  -	      align	256
    236  2c1e					      endif
    237  2c1e
    238  2c1e				   bmp_96x2_1_05
    239  2c1e
    240  2c1e		       00		      BYTE.b	%00000000
    241  2c1f		       00		      BYTE.b	%00000000
    242  2c20		       00		      BYTE.b	%00000000
    243  2c21		       c0		      BYTE.b	%11000000
    244  2c22		       c0		      BYTE.b	%11000000
    245  2c23		       c0		      BYTE.b	%11000000
    246  2c24		       c0		      BYTE.b	%11000000
    247  2c25		       ff		      BYTE.b	%11111111
    248  2c26		       ff		      BYTE.b	%11111111
    249  2c27		       ff		      BYTE.b	%11111111
    250  2c28		       c0		      BYTE.b	%11000000
    251  2c29		       c0		      BYTE.b	%11000000
    252  2c2a		       c0		      BYTE.b	%11000000
    253  2c2b		       c0		      BYTE.b	%11000000
    254  2c2c		       00		      BYTE.b	%00000000
    255  2c2d		       00		      BYTE.b	%00000000
    256  2c2e		       7c		      BYTE.b	%01111100
    257  2c2f		       f8		      BYTE.b	%11111000
    258  2c30		       f0		      BYTE.b	%11110000
    259  2c31		       f0		      BYTE.b	%11110000
    260  2c32		       f8		      BYTE.b	%11111000
    261  2c33		       f8		      BYTE.b	%11111000
    262  2c34		       3c		      BYTE.b	%00111100
    263  2c35		       78		      BYTE.b	%01111000
    264  2c36		       f8		      BYTE.b	%11111000
    265  2c37		       f0		      BYTE.b	%11110000
    266  2c38		       c0		      BYTE.b	%11000000
    267  2c39		       00		      BYTE.b	%00000000
    268  2c3a		       00		      BYTE.b	%00000000
    269  2c3b		       00		      BYTE.b	%00000000
    270  2c3c
    271  2c3c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    272  2c3c				  -	      align	256
    273  2c3c					      endif
    274  2c3c
    275  2c3c				   bmp_96x2_1_06
    276  2c3c
    277  2c3c		       00		      BYTE.b	%00000000
    278  2c3d		       00		      BYTE.b	%00000000
    279  2c3e		       00		      BYTE.b	%00000000
    280  2c3f		       e7		      BYTE.b	%11100111
    281  2c40		       e7		      BYTE.b	%11100111
    282  2c41		       e7		      BYTE.b	%11100111
    283  2c42		       e7		      BYTE.b	%11100111
    284  2c43		       e7		      BYTE.b	%11100111
    285  2c44		       e7		      BYTE.b	%11100111
    286  2c45		       e7		      BYTE.b	%11100111
    287  2c46		       e7		      BYTE.b	%11100111
    288  2c47		       e7		      BYTE.b	%11100111
    289  2c48		       e7		      BYTE.b	%11100111
    290  2c49		       e7		      BYTE.b	%11100111
    291  2c4a		       00		      BYTE.b	%00000000
    292  2c4b		       00		      BYTE.b	%00000000
    293  2c4c		       ef		      BYTE.b	%11101111
    294  2c4d		       ef		      BYTE.b	%11101111
    295  2c4e		       e7		      BYTE.b	%11100111
    296  2c4f		       e3		      BYTE.b	%11100011
    297  2c50		       e1		      BYTE.b	%11100001
    298  2c51		       e0		      BYTE.b	%11100000
    299  2c52		       e0		      BYTE.b	%11100000
    300  2c53		       e0		      BYTE.b	%11100000
    301  2c54		       ef		      BYTE.b	%11101111
    302  2c55		       e7		      BYTE.b	%11100111
    303  2c56		       e3		      BYTE.b	%11100011
    304  2c57		       00		      BYTE.b	%00000000
    305  2c58		       00		      BYTE.b	%00000000
    306  2c59		       00		      BYTE.b	%00000000
    307  2c5a
    308  2c5a				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    309  2c5a				  -	      align	256
    310  2c5a					      endif
    311  2c5a
    312  2c5a				   bmp_96x2_1_07
    313  2c5a
    314  2c5a		       00		      BYTE.b	%00000000
    315  2c5b		       00		      BYTE.b	%00000000
    316  2c5c		       00		      BYTE.b	%00000000
    317  2c5d		       70		      BYTE.b	%01110000
    318  2c5e		       70		      BYTE.b	%01110000
    319  2c5f		       70		      BYTE.b	%01110000
    320  2c60		       70		      BYTE.b	%01110000
    321  2c61		       7f		      BYTE.b	%01111111
    322  2c62		       7f		      BYTE.b	%01111111
    323  2c63		       7f		      BYTE.b	%01111111
    324  2c64		       70		      BYTE.b	%01110000
    325  2c65		       7f		      BYTE.b	%01111111
    326  2c66		       7f		      BYTE.b	%01111111
    327  2c67		       7f		      BYTE.b	%01111111
    328  2c68		       00		      BYTE.b	%00000000
    329  2c69		       00		      BYTE.b	%00000000
    330  2c6a		       ff		      BYTE.b	%11111111
    331  2c6b		       ff		      BYTE.b	%11111111
    332  2c6c		       ff		      BYTE.b	%11111111
    333  2c6d		       e0		      BYTE.b	%11100000
    334  2c6e		       f0		      BYTE.b	%11110000
    335  2c6f		       fc		      BYTE.b	%11111100
    336  2c70		       7e		      BYTE.b	%01111110
    337  2c71		       3f		      BYTE.b	%00111111
    338  2c72		       ff		      BYTE.b	%11111111
    339  2c73		       ff		      BYTE.b	%11111111
    340  2c74		       ff		      BYTE.b	%11111111
    341  2c75		       00		      BYTE.b	%00000000
    342  2c76		       00		      BYTE.b	%00000000
    343  2c77		       00		      BYTE.b	%00000000
    344  2c78
    345  2c78				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    346  2c78				  -	      align	256
    347  2c78					      endif
    348  2c78
    349  2c78				   bmp_96x2_1_08
    350  2c78
    351  2c78		       00		      BYTE.b	%00000000
    352  2c79		       00		      BYTE.b	%00000000
    353  2c7a		       00		      BYTE.b	%00000000
    354  2c7b		       00		      BYTE.b	%00000000
    355  2c7c		       00		      BYTE.b	%00000000
    356  2c7d		       00		      BYTE.b	%00000000
    357  2c7e		       00		      BYTE.b	%00000000
    358  2c7f		       c0		      BYTE.b	%11000000
    359  2c80		       e0		      BYTE.b	%11100000
    360  2c81		       e0		      BYTE.b	%11100000
    361  2c82		       00		      BYTE.b	%00000000
    362  2c83		       cf		      BYTE.b	%11001111
    363  2c84		       e7		      BYTE.b	%11100111
    364  2c85		       f7		      BYTE.b	%11110111
    365  2c86		       00		      BYTE.b	%00000000
    366  2c87		       00		      BYTE.b	%00000000
    367  2c88		       87		      BYTE.b	%10000111
    368  2c89		       1f		      BYTE.b	%00011111
    369  2c8a		       1f		      BYTE.b	%00011111
    370  2c8b		       3c		      BYTE.b	%00111100
    371  2c8c		       38		      BYTE.b	%00111000
    372  2c8d		       38		      BYTE.b	%00111000
    373  2c8e		       3c		      BYTE.b	%00111100
    374  2c8f		       3e		      BYTE.b	%00111110
    375  2c90		       9f		      BYTE.b	%10011111
    376  2c91		       8f		      BYTE.b	%10001111
    377  2c92		       03		      BYTE.b	%00000011
    378  2c93		       00		      BYTE.b	%00000000
    379  2c94		       00		      BYTE.b	%00000000
    380  2c95		       00		      BYTE.b	%00000000
    381  2c96
    382  2c96				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    383  2c96				  -	      align	256
    384  2c96					      endif
    385  2c96
    386  2c96				   bmp_96x2_1_09
    387  2c96
    388  2c96		       00		      BYTE.b	%00000000
    389  2c97		       00		      BYTE.b	%00000000
    390  2c98		       00		      BYTE.b	%00000000
    391  2c99		       e0		      BYTE.b	%11100000
    392  2c9a		       e0		      BYTE.b	%11100000
    393  2c9b		       e0		      BYTE.b	%11100000
    394  2c9c		       e0		      BYTE.b	%11100000
    395  2c9d		       e0		      BYTE.b	%11100000
    396  2c9e		       e0		      BYTE.b	%11100000
    397  2c9f		       e0		      BYTE.b	%11100000
    398  2ca0		       e0		      BYTE.b	%11100000
    399  2ca1		       fe		      BYTE.b	%11111110
    400  2ca2		       ff		      BYTE.b	%11111111
    401  2ca3		       ff		      BYTE.b	%11111111
    402  2ca4		       00		      BYTE.b	%00000000
    403  2ca5		       00		      BYTE.b	%00000000
    404  2ca6		       fe		      BYTE.b	%11111110
    405  2ca7		       ff		      BYTE.b	%11111111
    406  2ca8		       ff		      BYTE.b	%11111111
    407  2ca9		       07		      BYTE.b	%00000111
    408  2caa		       03		      BYTE.b	%00000011
    409  2cab		       03		      BYTE.b	%00000011
    410  2cac		       03		      BYTE.b	%00000011
    411  2cad		       0f		      BYTE.b	%00001111
    412  2cae		       ff		      BYTE.b	%11111111
    413  2caf		       ff		      BYTE.b	%11111111
    414  2cb0		       f8		      BYTE.b	%11111000
    415  2cb1		       00		      BYTE.b	%00000000
    416  2cb2		       00		      BYTE.b	%00000000
    417  2cb3		       00		      BYTE.b	%00000000
    418  2cb4
    419  2cb4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    420  2cb4				  -	      align	256
    421  2cb4					      endif
    422  2cb4
    423  2cb4				   bmp_96x2_1_10
    424  2cb4
    425  2cb4		       00		      BYTE.b	%00000000
    426  2cb5		       00		      BYTE.b	%00000000
    427  2cb6		       00		      BYTE.b	%00000000
    428  2cb7		       00		      BYTE.b	%00000000
    429  2cb8		       00		      BYTE.b	%00000000
    430  2cb9		       00		      BYTE.b	%00000000
    431  2cba		       00		      BYTE.b	%00000000
    432  2cbb		       00		      BYTE.b	%00000000
    433  2cbc		       00		      BYTE.b	%00000000
    434  2cbd		       00		      BYTE.b	%00000000
    435  2cbe		       00		      BYTE.b	%00000000
    436  2cbf		       00		      BYTE.b	%00000000
    437  2cc0		       00		      BYTE.b	%00000000
    438  2cc1		       00		      BYTE.b	%00000000
    439  2cc2		       00		      BYTE.b	%00000000
    440  2cc3		       00		      BYTE.b	%00000000
    441  2cc4		       1c		      BYTE.b	%00011100
    442  2cc5		       1c		      BYTE.b	%00011100
    443  2cc6		       9c		      BYTE.b	%10011100
    444  2cc7		       9c		      BYTE.b	%10011100
    445  2cc8		       9d		      BYTE.b	%10011101
    446  2cc9		       df		      BYTE.b	%11011111
    447  2cca		       9f		      BYTE.b	%10011111
    448  2ccb		       9f		      BYTE.b	%10011111
    449  2ccc		       9f		      BYTE.b	%10011111
    450  2ccd		       1c		      BYTE.b	%00011100
    451  2cce		       18		      BYTE.b	%00011000
    452  2ccf		       00		      BYTE.b	%00000000
    453  2cd0		       00		      BYTE.b	%00000000
    454  2cd1		       00		      BYTE.b	%00000000
    455  2cd2
    456  2cd2				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    457  2cd2				  -	      align	256
    458  2cd2					      endif
    459  2cd2
    460  2cd2				   bmp_96x2_1_11
    461  2cd2
    462  2cd2		       00		      BYTE.b	%00000000
    463  2cd3		       00		      BYTE.b	%00000000
    464  2cd4		       00		      BYTE.b	%00000000
    465  2cd5		       00		      BYTE.b	%00000000
    466  2cd6		       00		      BYTE.b	%00000000
    467  2cd7		       00		      BYTE.b	%00000000
    468  2cd8		       00		      BYTE.b	%00000000
    469  2cd9		       00		      BYTE.b	%00000000
    470  2cda		       00		      BYTE.b	%00000000
    471  2cdb		       00		      BYTE.b	%00000000
    472  2cdc		       00		      BYTE.b	%00000000
    473  2cdd		       00		      BYTE.b	%00000000
    474  2cde		       00		      BYTE.b	%00000000
    475  2cdf		       00		      BYTE.b	%00000000
    476  2ce0		       00		      BYTE.b	%00000000
    477  2ce1		       00		      BYTE.b	%00000000
    478  2ce2		       0e		      BYTE.b	%00001110
    479  2ce3		       3e		      BYTE.b	%00111110
    480  2ce4		       7e		      BYTE.b	%01111110
    481  2ce5		       fe		      BYTE.b	%11111110
    482  2ce6		       fe		      BYTE.b	%11111110
    483  2ce7		       fe		      BYTE.b	%11111110
    484  2ce8		       ce		      BYTE.b	%11001110
    485  2ce9		       8e		      BYTE.b	%10001110
    486  2cea		       0e		      BYTE.b	%00001110
    487  2ceb		       0e		      BYTE.b	%00001110
    488  2cec		       0e		      BYTE.b	%00001110
    489  2ced		       00		      BYTE.b	%00000000
    490  2cee		       00		      BYTE.b	%00000000
    491  2cef		       00		      BYTE.b	%00000000
    492  2cf0
------- FILE titlescreen/asm/titlescreen.asm
    160  2cf0					      endif
    161  2cf0				  -	      ifconst	mk_96x2_2_on
    162  2cf0				  -	      include	"titlescreen/96x2_2_image.asm"
    163  2cf0					      endif
    164  2cf0				  -	      ifconst	mk_96x2_3_on
    165  2cf0				  -	      include	"titlescreen/96x2_3_image.asm"
    166  2cf0					      endif
    167  2cf0
    168  2cf0					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  2cf0					      include	"titlescreen/score_image.asm"
      1  2cf0							; feel free to modify the score graphics - just keep each digit 8 high
      2  2cf0							; if you're looking to want to modify any one font, pick on the 
      3  2cf0
      4  2cf0				  -	      ifnconst	NOFONT
      5  2cf0				  -NOFONT     =	0
      6  2cf0					      endif
      7  2cf0				  -	      ifnconst	STOCK
      8  2cf0				  -STOCK      =	1	;_FONTNAME
      9  2cf0					      endif
     10  2cf0				  -	      ifnconst	NEWCENTURY
     11  2cf0				  -NEWCENTURY =	2	;_FONTNAME
     12  2cf0					      endif
     13  2cf0				  -	      ifnconst	WHIMSEY
     14  2cf0				  -WHIMSEY    =	3	;_FONTNAME
     15  2cf0					      endif
     16  2cf0				  -	      ifnconst	ALARMCLOCK
     17  2cf0				  -ALARMCLOCK =	4	;_FONTNAME
     18  2cf0					      endif
     19  2cf0				  -	      ifnconst	HANDWRITTEN
     20  2cf0				  -HANDWRITTEN =	5	;_FONTNAME
     21  2cf0					      endif
     22  2cf0				  -	      ifnconst	INTERRUPTED
     23  2cf0				  -INTERRUPTED =	6	;_FONTNAME
     24  2cf0					      endif
     25  2cf0				  -	      ifnconst	TINY
     26  2cf0				  -TINY       =	7	;_FONTNAME
     27  2cf0					      endif
     28  2cf0				  -	      ifnconst	RETROPUTER
     29  2cf0				  -RETROPUTER =	8	;_FONTNAME
     30  2cf0					      endif
     31  2cf0				  -	      ifnconst	CURVES
     32  2cf0				  -CURVES     =	9	;_FONTNAME
     33  2cf0					      endif
     34  2cf0				  -	      ifnconst	HUSKY
     35  2cf0				  -HUSKY      =	10	;_FONTNAME
     36  2cf0					      endif
     37  2cf0				  -	      ifnconst	SNAKE
     38  2cf0				  -SNAKE      =	11	;_FONTNAME
     39  2cf0					      endif
     40  2cf0				  -	      ifnconst	PLOK
     41  2cf0				  -PLOK       =	13	;_FONTNAME
     42  2cf0					      endif
     43  2cf0
     44  2cf0				  -	      ifnconst	SYMBOLS
     45  2cf0				  -SYMBOLS    =	0	;_FONTNAME 
     46  2cf0					      endif
     47  2cf0
     48  2cf0							; ### setup some defaults
     49  2cf0				  -	      ifnconst	fontstyle
     50  2cf0				  -fontstyle  =	STOCK
     51  2cf0					      endif
     52  2cf0
     53  2cf0							;fix up the table alignment, if necessary
     54  2cf0					      if	>. != >[.+128]
     55  2d00		       00 00 00 00*	      align	256
     56  2d00					      endif
     57  2d00
     58  2d00				   miniscoretable
     59  2d00
     60  2d00					      if	fontstyle == STOCK
     61  2d00
     62  2d00							;byte %00000000 ; STOCK
     63  2d00
     64  2d00		       3c		      .byte.b	%00111100	; STOCK
     65  2d01		       66		      .byte.b	%01100110	; STOCK
     66  2d02		       66		      .byte.b	%01100110	; STOCK
     67  2d03		       66		      .byte.b	%01100110	; STOCK
     68  2d04		       66		      .byte.b	%01100110	; STOCK
     69  2d05		       66		      .byte.b	%01100110	; STOCK
     70  2d06		       66		      .byte.b	%01100110	; STOCK
     71  2d07		       3c		      .byte.b	%00111100	; STOCK
     72  2d08
     73  2d08							;byte %00000000 ; STOCK
     74  2d08
     75  2d08		       7e		      .byte.b	%01111110	; STOCK
     76  2d09		       18		      .byte.b	%00011000	; STOCK
     77  2d0a		       18		      .byte.b	%00011000	; STOCK
     78  2d0b		       18		      .byte.b	%00011000	; STOCK
     79  2d0c		       18		      .byte.b	%00011000	; STOCK
     80  2d0d		       38		      .byte.b	%00111000	; STOCK
     81  2d0e		       18		      .byte.b	%00011000	; STOCK
     82  2d0f		       08		      .byte.b	%00001000	; STOCK
     83  2d10
     84  2d10							;byte %00000000 ; STOCK
     85  2d10
     86  2d10		       7e		      .byte.b	%01111110	; STOCK
     87  2d11		       60		      .byte.b	%01100000	; STOCK
     88  2d12		       60		      .byte.b	%01100000	; STOCK
     89  2d13		       3c		      .byte.b	%00111100	; STOCK
     90  2d14		       06		      .byte.b	%00000110	; STOCK
     91  2d15		       06		      .byte.b	%00000110	; STOCK
     92  2d16		       46		      .byte.b	%01000110	; STOCK
     93  2d17		       3c		      .byte.b	%00111100	; STOCK
     94  2d18
     95  2d18							;byte %00000000 ; STOCK
     96  2d18
     97  2d18		       3c		      .byte.b	%00111100	; STOCK
     98  2d19		       46		      .byte.b	%01000110	; STOCK
     99  2d1a		       06		      .byte.b	%00000110	; STOCK
    100  2d1b		       06		      .byte.b	%00000110	; STOCK
    101  2d1c		       1c		      .byte.b	%00011100	; STOCK
    102  2d1d		       06		      .byte.b	%00000110	; STOCK
    103  2d1e		       46		      .byte.b	%01000110	; STOCK
    104  2d1f		       3c		      .byte.b	%00111100	; STOCK
    105  2d20
    106  2d20							;byte %00000000 ; STOCK
    107  2d20
    108  2d20		       0c		      .byte.b	%00001100	; STOCK
    109  2d21		       0c		      .byte.b	%00001100	; STOCK
    110  2d22		       7e		      .byte.b	%01111110	; STOCK
    111  2d23		       4c		      .byte.b	%01001100	; STOCK
    112  2d24		       4c		      .byte.b	%01001100	; STOCK
    113  2d25		       2c		      .byte.b	%00101100	; STOCK
    114  2d26		       1c		      .byte.b	%00011100	; STOCK
    115  2d27		       0c		      .byte.b	%00001100	; STOCK
    116  2d28
    117  2d28							;byte %00000000 ; STOCK
    118  2d28
    119  2d28		       3c		      .byte.b	%00111100	; STOCK
    120  2d29		       46		      .byte.b	%01000110	; STOCK
    121  2d2a		       06		      .byte.b	%00000110	; STOCK
    122  2d2b		       06		      .byte.b	%00000110	; STOCK
    123  2d2c		       3c		      .byte.b	%00111100	; STOCK
    124  2d2d		       60		      .byte.b	%01100000	; STOCK
    125  2d2e		       60		      .byte.b	%01100000	; STOCK
    126  2d2f		       7e		      .byte.b	%01111110	; STOCK
    127  2d30
    128  2d30							;byte %00000000 ; STOCK
    129  2d30
    130  2d30		       3c		      .byte.b	%00111100	; STOCK
    131  2d31		       66		      .byte.b	%01100110	; STOCK
    132  2d32		       66		      .byte.b	%01100110	; STOCK
    133  2d33		       66		      .byte.b	%01100110	; STOCK
    134  2d34		       7c		      .byte.b	%01111100	; STOCK
    135  2d35		       60		      .byte.b	%01100000	; STOCK
    136  2d36		       62		      .byte.b	%01100010	; STOCK
    137  2d37		       3c		      .byte.b	%00111100	; STOCK
    138  2d38
    139  2d38							;byte %00000000 ; STOCK
    140  2d38
    141  2d38		       30		      .byte.b	%00110000	; STOCK
    142  2d39		       30		      .byte.b	%00110000	; STOCK
    143  2d3a		       30		      .byte.b	%00110000	; STOCK
    144  2d3b		       18		      .byte.b	%00011000	; STOCK
    145  2d3c		       0c		      .byte.b	%00001100	; STOCK
    146  2d3d		       06		      .byte.b	%00000110	; STOCK
    147  2d3e		       42		      .byte.b	%01000010	; STOCK
    148  2d3f		       3e		      .byte.b	%00111110	; STOCK
    149  2d40
    150  2d40							;byte %00000000 ; STOCK
    151  2d40
    152  2d40		       3c		      .byte.b	%00111100	; STOCK
    153  2d41		       66		      .byte.b	%01100110	; STOCK
    154  2d42		       66		      .byte.b	%01100110	; STOCK
    155  2d43		       66		      .byte.b	%01100110	; STOCK
    156  2d44		       3c		      .byte.b	%00111100	; STOCK
    157  2d45		       66		      .byte.b	%01100110	; STOCK
    158  2d46		       66		      .byte.b	%01100110	; STOCK
    159  2d47		       3c		      .byte.b	%00111100	; STOCK
    160  2d48
    161  2d48							;byte %00000000 ; STOCK
    162  2d48
    163  2d48		       3c		      .byte.b	%00111100	; STOCK
    164  2d49		       46		      .byte.b	%01000110	; STOCK
    165  2d4a		       06		      .byte.b	%00000110	; STOCK
    166  2d4b		       3e		      .byte.b	%00111110	; STOCK
    167  2d4c		       66		      .byte.b	%01100110	; STOCK
    168  2d4d		       66		      .byte.b	%01100110	; STOCK
    169  2d4e		       66		      .byte.b	%01100110	; STOCK
    170  2d4f		       3c		      .byte.b	%00111100	; STOCK
    171  2d50
    172  2d50							;byte %00000000 ; STOCK
    173  2d50
    174  2d50				  -	      ifconst	fontcharsHEX
    175  2d50				  -
    176  2d50				  -	      .byte	%01100110	; STOCK
    177  2d50				  -	      .byte	%01100110	; STOCK
    178  2d50				  -	      .byte	%01100110	; STOCK
    179  2d50				  -	      .byte	%01111110	; STOCK
    180  2d50				  -	      .byte	%01100110	; STOCK
    181  2d50				  -	      .byte	%01100110	; STOCK
    182  2d50				  -	      .byte	%01100110	; STOCK
    183  2d50				  -	      .byte	%00111100	; STOCK
    184  2d50				  -
    185  2d50				  -			;byte %00000000 ; STOCK
    186  2d50				  -
    187  2d50				  -	      .byte	%01111100	; STOCK
    188  2d50				  -	      .byte	%01100110	; STOCK
    189  2d50				  -	      .byte	%01100110	; STOCK
    190  2d50				  -	      .byte	%01100110	; STOCK
    191  2d50				  -	      .byte	%01111100	; STOCK
    192  2d50				  -	      .byte	%01100110	; STOCK
    193  2d50				  -	      .byte	%01100110	; STOCK
    194  2d50				  -	      .byte	%01111100	; STOCK
    195  2d50				  -
    196  2d50				  -			;byte %00000000 ; STOCK
    197  2d50				  -
    198  2d50				  -	      .byte	%00111100	; STOCK
    199  2d50				  -	      .byte	%01100110	; STOCK
    200  2d50				  -	      .byte	%01100000	; STOCK
    201  2d50				  -	      .byte	%01100000	; STOCK
    202  2d50				  -	      .byte	%01100000	; STOCK
    203  2d50				  -	      .byte	%01100000	; STOCK
    204  2d50				  -	      .byte	%01100110	; STOCK
    205  2d50				  -	      .byte	%00111100	; STOCK
    206  2d50				  -
    207  2d50				  -			;byte %00000000 ; STOCK
    208  2d50				  -
    209  2d50				  -	      .byte	%01111100	; STOCK
    210  2d50				  -	      .byte	%01100110	; STOCK
    211  2d50				  -	      .byte	%01100110	; STOCK
    212  2d50				  -	      .byte	%01100110	; STOCK
    213  2d50				  -	      .byte	%01100110	; STOCK
    214  2d50				  -	      .byte	%01100110	; STOCK
    215  2d50				  -	      .byte	%01100110	; STOCK
    216  2d50				  -	      .byte	%01111100	; STOCK
    217  2d50				  -
    218  2d50				  -			;byte %00000000 ; STOCK
    219  2d50				  -
    220  2d50				  -	      .byte	%01111110	; STOCK
    221  2d50				  -	      .byte	%01100000	; STOCK
    222  2d50				  -	      .byte	%01100000	; STOCK
    223  2d50				  -	      .byte	%01100000	; STOCK
    224  2d50				  -	      .byte	%01111100	; STOCK
    225  2d50				  -	      .byte	%01100000	; STOCK
    226  2d50				  -	      .byte	%01100000	; STOCK
    227  2d50				  -	      .byte	%01111110	; STOCK
    228  2d50				  -
    229  2d50				  -			;byte %00000000 ; STOCK
    230  2d50				  -
    231  2d50				  -	      .byte	%01100000	; STOCK
    232  2d50				  -	      .byte	%01100000	; STOCK
    233  2d50				  -	      .byte	%01100000	; STOCK
    234  2d50				  -	      .byte	%01100000	; STOCK
    235  2d50				  -	      .byte	%01111100	; STOCK
    236  2d50				  -	      .byte	%01100000	; STOCK
    237  2d50				  -	      .byte	%01100000	; STOCK
    238  2d50				  -	      .byte	%01111110	; STOCK
    239  2d50				  -
    240  2d50				  -			;byte %00000000 ; STOCK
    241  2d50				  -			;byte %00000000 ; STOCK
    242  2d50				  -			;byte %00000000 ; STOCK
    243  2d50				  -			;byte %00000000 ; STOCK
    244  2d50					      endif		; fontcharsHEX 
    245  2d50					      endif		; STOCK
    246  2d50
    247  2d50				  -	      if	fontstyle == NEWCENTURY
    248  2d50				  -			;byte %00000000 ; NEWCENTURY
    249  2d50				  -
    250  2d50				  -	      .byte	%00111100	; NEWCENTURY
    251  2d50				  -	      .byte	%01000010	; NEWCENTURY
    252  2d50				  -	      .byte	%01000010	; NEWCENTURY
    253  2d50				  -	      .byte	%01000010	; NEWCENTURY
    254  2d50				  -	      .byte	%00100100	; NEWCENTURY
    255  2d50				  -	      .byte	%00100100	; NEWCENTURY
    256  2d50				  -	      .byte	%00100100	; NEWCENTURY
    257  2d50				  -	      .byte	%00011000	; NEWCENTURY
    258  2d50				  -
    259  2d50				  -			;byte %00000000 ; NEWCENTURY
    260  2d50				  -
    261  2d50				  -	      .byte	%00001000	; NEWCENTURY
    262  2d50				  -	      .byte	%00001000	; NEWCENTURY
    263  2d50				  -	      .byte	%00001000	; NEWCENTURY
    264  2d50				  -	      .byte	%00001000	; NEWCENTURY
    265  2d50				  -	      .byte	%00001000	; NEWCENTURY
    266  2d50				  -	      .byte	%00001000	; NEWCENTURY
    267  2d50				  -	      .byte	%00001000	; NEWCENTURY
    268  2d50				  -	      .byte	%00001000	; NEWCENTURY
    269  2d50				  -
    270  2d50				  -			;byte %00000000 ; NEWCENTURY
    271  2d50				  -
    272  2d50				  -	      .byte	%01111110	; NEWCENTURY
    273  2d50				  -	      .byte	%01000000	; NEWCENTURY
    274  2d50				  -	      .byte	%01000000	; NEWCENTURY
    275  2d50				  -	      .byte	%00100000	; NEWCENTURY
    276  2d50				  -	      .byte	%00011100	; NEWCENTURY
    277  2d50				  -	      .byte	%00000010	; NEWCENTURY
    278  2d50				  -	      .byte	%00000010	; NEWCENTURY
    279  2d50				  -	      .byte	%00011100	; NEWCENTURY
    280  2d50				  -
    281  2d50				  -			;byte %00000000 ; NEWCENTURY
    282  2d50				  -
    283  2d50				  -	      .byte	%01111100	; NEWCENTURY
    284  2d50				  -	      .byte	%00000010	; NEWCENTURY
    285  2d50				  -	      .byte	%00000010	; NEWCENTURY
    286  2d50				  -	      .byte	%00000010	; NEWCENTURY
    287  2d50				  -	      .byte	%00111100	; NEWCENTURY
    288  2d50				  -	      .byte	%00000010	; NEWCENTURY
    289  2d50				  -	      .byte	%00000010	; NEWCENTURY
    290  2d50				  -	      .byte	%00011100	; NEWCENTURY
    291  2d50				  -
    292  2d50				  -			;byte %00000000 ; NEWCENTURY
    293  2d50				  -
    294  2d50				  -	      .byte	%00000010	; NEWCENTURY
    295  2d50				  -	      .byte	%00000010	; NEWCENTURY
    296  2d50				  -	      .byte	%00000010	; NEWCENTURY
    297  2d50				  -	      .byte	%00111110	; NEWCENTURY
    298  2d50				  -	      .byte	%00100010	; NEWCENTURY
    299  2d50				  -	      .byte	%00100010	; NEWCENTURY
    300  2d50				  -	      .byte	%00010010	; NEWCENTURY
    301  2d50				  -	      .byte	%00010010	; NEWCENTURY
    302  2d50				  -
    303  2d50				  -			;byte %00000000 ; NEWCENTURY
    304  2d50				  -
    305  2d50				  -	      .byte	%01111100	; NEWCENTURY
    306  2d50				  -	      .byte	%00000010	; NEWCENTURY
    307  2d50				  -	      .byte	%00000010	; NEWCENTURY
    308  2d50				  -	      .byte	%00000010	; NEWCENTURY
    309  2d50				  -	      .byte	%01111100	; NEWCENTURY
    310  2d50				  -	      .byte	%01000000	; NEWCENTURY
    311  2d50				  -	      .byte	%01000000	; NEWCENTURY
    312  2d50				  -	      .byte	%01111000	; NEWCENTURY
    313  2d50				  -
    314  2d50				  -			;byte %00000000 ; NEWCENTURY
    315  2d50				  -
    316  2d50				  -	      .byte	%00111100	; NEWCENTURY
    317  2d50				  -	      .byte	%01000010	; NEWCENTURY
    318  2d50				  -	      .byte	%01000010	; NEWCENTURY
    319  2d50				  -	      .byte	%01000010	; NEWCENTURY
    320  2d50				  -	      .byte	%01111100	; NEWCENTURY
    321  2d50				  -	      .byte	%01000000	; NEWCENTURY
    322  2d50				  -	      .byte	%01000000	; NEWCENTURY
    323  2d50				  -	      .byte	%00110000	; NEWCENTURY
    324  2d50				  -
    325  2d50				  -			;byte %00000000 ; NEWCENTURY
    326  2d50				  -
    327  2d50				  -	      .byte	%00010000	; NEWCENTURY
    328  2d50				  -	      .byte	%00010000	; NEWCENTURY
    329  2d50				  -	      .byte	%00001000	; NEWCENTURY
    330  2d50				  -	      .byte	%00001000	; NEWCENTURY
    331  2d50				  -	      .byte	%00000100	; NEWCENTURY
    332  2d50				  -	      .byte	%00000100	; NEWCENTURY
    333  2d50				  -	      .byte	%00000010	; NEWCENTURY
    334  2d50				  -	      .byte	%00011110	; NEWCENTURY
    335  2d50				  -
    336  2d50				  -			;byte %00000000 ; NEWCENTURY
    337  2d50				  -
    338  2d50				  -	      .byte	%00111100	; NEWCENTURY
    339  2d50				  -	      .byte	%01000010	; NEWCENTURY
    340  2d50				  -	      .byte	%01000010	; NEWCENTURY
    341  2d50				  -	      .byte	%01000010	; NEWCENTURY
    342  2d50				  -	      .byte	%00111100	; NEWCENTURY
    343  2d50				  -	      .byte	%00100100	; NEWCENTURY
    344  2d50				  -	      .byte	%00100100	; NEWCENTURY
    345  2d50				  -	      .byte	%00011000	; NEWCENTURY
    346  2d50				  -
    347  2d50				  -			;byte %00000000 ; NEWCENTURY
    348  2d50				  -
    349  2d50				  -	      .byte	%00111100	; NEWCENTURY
    350  2d50				  -	      .byte	%00000010	; NEWCENTURY
    351  2d50				  -	      .byte	%00000010	; NEWCENTURY
    352  2d50				  -	      .byte	%00000010	; NEWCENTURY
    353  2d50				  -	      .byte	%00001110	; NEWCENTURY
    354  2d50				  -	      .byte	%00010010	; NEWCENTURY
    355  2d50				  -	      .byte	%00010010	; NEWCENTURY
    356  2d50				  -	      .byte	%00001100	; NEWCENTURY
    357  2d50				  -
    358  2d50				  -	      ifconst	fontcharsHEX
    359  2d50				  -
    360  2d50				  -			;byte %00000000 ; NEWCENTURY
    361  2d50				  -
    362  2d50				  -	      .byte	%01000010	; NEWCENTURY
    363  2d50				  -	      .byte	%01000010	; NEWCENTURY
    364  2d50				  -	      .byte	%01000010	; NEWCENTURY
    365  2d50				  -	      .byte	%01000010	; NEWCENTURY
    366  2d50				  -	      .byte	%01111100	; NEWCENTURY
    367  2d50				  -	      .byte	%01000100	; NEWCENTURY
    368  2d50				  -	      .byte	%01000100	; NEWCENTURY
    369  2d50				  -	      .byte	%00111000	; NEWCENTURY
    370  2d50				  -
    371  2d50				  -			;byte %00000000 ; NEWCENTURY
    372  2d50				  -
    373  2d50				  -	      .byte	%01111100	; NEWCENTURY
    374  2d50				  -	      .byte	%01000010	; NEWCENTURY
    375  2d50				  -	      .byte	%01000010	; NEWCENTURY
    376  2d50				  -	      .byte	%01000010	; NEWCENTURY
    377  2d50				  -	      .byte	%01111100	; NEWCENTURY
    378  2d50				  -	      .byte	%01000100	; NEWCENTURY
    379  2d50				  -	      .byte	%01000100	; NEWCENTURY
    380  2d50				  -	      .byte	%01111000	; NEWCENTURY
    381  2d50				  -
    382  2d50				  -			;byte %00000000 ; NEWCENTURY
    383  2d50				  -
    384  2d50				  -	      .byte	%00111100	; NEWCENTURY
    385  2d50				  -	      .byte	%01000010	; NEWCENTURY
    386  2d50				  -	      .byte	%01000000	; NEWCENTURY
    387  2d50				  -	      .byte	%01000000	; NEWCENTURY
    388  2d50				  -	      .byte	%01000000	; NEWCENTURY
    389  2d50				  -	      .byte	%01000000	; NEWCENTURY
    390  2d50				  -	      .byte	%01000000	; NEWCENTURY
    391  2d50				  -	      .byte	%00111000	; NEWCENTURY
    392  2d50				  -
    393  2d50				  -			;byte %00000000 ; NEWCENTURY
    394  2d50				  -
    395  2d50				  -	      .byte	%01111100	; NEWCENTURY
    396  2d50				  -	      .byte	%01000010	; NEWCENTURY
    397  2d50				  -	      .byte	%01000010	; NEWCENTURY
    398  2d50				  -	      .byte	%01000010	; NEWCENTURY
    399  2d50				  -	      .byte	%01000010	; NEWCENTURY
    400  2d50				  -	      .byte	%01000100	; NEWCENTURY
    401  2d50				  -	      .byte	%01000100	; NEWCENTURY
    402  2d50				  -	      .byte	%01111000	; NEWCENTURY
    403  2d50				  -
    404  2d50				  -			;byte %00000000 ; NEWCENTURY
    405  2d50				  -
    406  2d50				  -	      .byte	%01111110	; NEWCENTURY
    407  2d50				  -	      .byte	%01000000	; NEWCENTURY
    408  2d50				  -	      .byte	%01000000	; NEWCENTURY
    409  2d50				  -	      .byte	%01000000	; NEWCENTURY
    410  2d50				  -	      .byte	%01111100	; NEWCENTURY
    411  2d50				  -	      .byte	%01000000	; NEWCENTURY
    412  2d50				  -	      .byte	%01000000	; NEWCENTURY
    413  2d50				  -	      .byte	%01111000	; NEWCENTURY
    414  2d50				  -
    415  2d50				  -			;byte %00000000 ; NEWCENTURY
    416  2d50				  -
    417  2d50				  -	      .byte	%01000000	; NEWCENTURY
    418  2d50				  -	      .byte	%01000000	; NEWCENTURY
    419  2d50				  -	      .byte	%01000000	; NEWCENTURY
    420  2d50				  -	      .byte	%01000000	; NEWCENTURY
    421  2d50				  -	      .byte	%01111100	; NEWCENTURY
    422  2d50				  -	      .byte	%01000000	; NEWCENTURY
    423  2d50				  -	      .byte	%01000000	; NEWCENTURY
    424  2d50				  -	      .byte	%01111000	; NEWCENTURY
    425  2d50				  -
    426  2d50				  -			;byte %00000000 ; NEWCENTURY
    427  2d50				  -			;byte %00000000 ; NEWCENTURY
    428  2d50				  -			;byte %00000000 ; NEWCENTURY
    429  2d50				  -			;byte %00000000 ; NEWCENTURY
    430  2d50				  -
    431  2d50				  -	      endif		; fontcharsHEX 
    432  2d50					      endif		; NEWCENTURY
    433  2d50
    434  2d50				  -	      if	fontstyle == WHIMSEY
    435  2d50				  -			;byte %00000000 ; WHIMSEY
    436  2d50				  -
    437  2d50				  -	      .byte	%00111100	; WHIMSEY
    438  2d50				  -	      .byte	%01111110	; WHIMSEY
    439  2d50				  -	      .byte	%01111110	; WHIMSEY
    440  2d50				  -	      .byte	%01111110	; WHIMSEY
    441  2d50				  -	      .byte	%01110110	; WHIMSEY
    442  2d50				  -	      .byte	%01110110	; WHIMSEY
    443  2d50				  -	      .byte	%01110110	; WHIMSEY
    444  2d50				  -	      .byte	%00111100	; WHIMSEY
    445  2d50				  -
    446  2d50				  -			;byte %00000000 ; WHIMSEY
    447  2d50				  -
    448  2d50				  -	      .byte	%01111110	; WHIMSEY
    449  2d50				  -	      .byte	%01111110	; WHIMSEY
    450  2d50				  -	      .byte	%01111110	; WHIMSEY
    451  2d50				  -	      .byte	%00011000	; WHIMSEY
    452  2d50				  -	      .byte	%00011000	; WHIMSEY
    453  2d50				  -	      .byte	%00011000	; WHIMSEY
    454  2d50				  -	      .byte	%01111000	; WHIMSEY
    455  2d50				  -	      .byte	%00011000	; WHIMSEY
    456  2d50				  -
    457  2d50				  -			;byte %00000000 ; WHIMSEY
    458  2d50				  -
    459  2d50				  -	      .byte	%01111110	; WHIMSEY
    460  2d50				  -	      .byte	%01111110	; WHIMSEY
    461  2d50				  -	      .byte	%01111110	; WHIMSEY
    462  2d50				  -	      .byte	%01111000	; WHIMSEY
    463  2d50				  -	      .byte	%00111100	; WHIMSEY
    464  2d50				  -	      .byte	%00001110	; WHIMSEY
    465  2d50				  -	      .byte	%01100110	; WHIMSEY
    466  2d50				  -	      .byte	%00111100	; WHIMSEY
    467  2d50				  -
    468  2d50				  -			;byte %00000000 ; WHIMSEY
    469  2d50				  -
    470  2d50				  -	      .byte	%00111100	; WHIMSEY
    471  2d50				  -	      .byte	%01111110	; WHIMSEY
    472  2d50				  -	      .byte	%01111110	; WHIMSEY
    473  2d50				  -	      .byte	%01101110	; WHIMSEY
    474  2d50				  -	      .byte	%00001110	; WHIMSEY
    475  2d50				  -	      .byte	%00111100	; WHIMSEY
    476  2d50				  -	      .byte	%00011100	; WHIMSEY
    477  2d50				  -	      .byte	%01111110	; WHIMSEY
    478  2d50				  -
    479  2d50				  -			;byte %00000000 ; WHIMSEY
    480  2d50				  -
    481  2d50				  -	      .byte	%00011100	; WHIMSEY
    482  2d50				  -	      .byte	%00011100	; WHIMSEY
    483  2d50				  -	      .byte	%01111110	; WHIMSEY
    484  2d50				  -	      .byte	%01011100	; WHIMSEY
    485  2d50				  -	      .byte	%01011100	; WHIMSEY
    486  2d50				  -	      .byte	%00011100	; WHIMSEY
    487  2d50				  -	      .byte	%00011100	; WHIMSEY
    488  2d50				  -	      .byte	%00011100	; WHIMSEY
    489  2d50				  -
    490  2d50				  -			;byte %00000000 ; WHIMSEY
    491  2d50				  -
    492  2d50				  -	      .byte	%00111100	; WHIMSEY
    493  2d50				  -	      .byte	%01111110	; WHIMSEY
    494  2d50				  -	      .byte	%01111110	; WHIMSEY
    495  2d50				  -	      .byte	%01101110	; WHIMSEY
    496  2d50				  -	      .byte	%00001110	; WHIMSEY
    497  2d50				  -	      .byte	%01111100	; WHIMSEY
    498  2d50				  -	      .byte	%01110000	; WHIMSEY
    499  2d50				  -	      .byte	%01111110	; WHIMSEY
    500  2d50				  -
    501  2d50				  -			;byte %00000000 ; WHIMSEY
    502  2d50				  -
    503  2d50				  -	      .byte	%00111100	; WHIMSEY
    504  2d50				  -	      .byte	%01111110	; WHIMSEY
    505  2d50				  -	      .byte	%01111110	; WHIMSEY
    506  2d50				  -	      .byte	%01110110	; WHIMSEY
    507  2d50				  -	      .byte	%01110110	; WHIMSEY
    508  2d50				  -	      .byte	%01111100	; WHIMSEY
    509  2d50				  -	      .byte	%01110000	; WHIMSEY
    510  2d50				  -	      .byte	%00111110	; WHIMSEY
    511  2d50				  -
    512  2d50				  -			;byte %00000000 ; WHIMSEY
    513  2d50				  -
    514  2d50				  -	      .byte	%01111000	; WHIMSEY
    515  2d50				  -	      .byte	%01111000	; WHIMSEY
    516  2d50				  -	      .byte	%01111000	; WHIMSEY
    517  2d50				  -	      .byte	%00111100	; WHIMSEY
    518  2d50				  -	      .byte	%00011100	; WHIMSEY
    519  2d50				  -	      .byte	%00001110	; WHIMSEY
    520  2d50				  -	      .byte	%00001110	; WHIMSEY
    521  2d50				  -	      .byte	%01111110	; WHIMSEY
    522  2d50				  -
    523  2d50				  -			;byte %00000000 ; WHIMSEY
    524  2d50				  -
    525  2d50				  -	      .byte	%00111100	; WHIMSEY
    526  2d50				  -	      .byte	%01111110	; WHIMSEY
    527  2d50				  -	      .byte	%01111110	; WHIMSEY
    528  2d50				  -	      .byte	%01110110	; WHIMSEY
    529  2d50				  -	      .byte	%01110110	; WHIMSEY
    530  2d50				  -	      .byte	%00111100	; WHIMSEY
    531  2d50				  -	      .byte	%01110110	; WHIMSEY
    532  2d50				  -	      .byte	%00111100	; WHIMSEY
    533  2d50				  -
    534  2d50				  -			;byte %00000000 ; WHIMSEY
    535  2d50				  -
    536  2d50				  -	      .byte	%00111100	; WHIMSEY
    537  2d50				  -	      .byte	%01111110	; WHIMSEY
    538  2d50				  -	      .byte	%01111110	; WHIMSEY
    539  2d50				  -	      .byte	%01110110	; WHIMSEY
    540  2d50				  -	      .byte	%00000110	; WHIMSEY
    541  2d50				  -	      .byte	%00111110	; WHIMSEY
    542  2d50				  -	      .byte	%01110110	; WHIMSEY
    543  2d50				  -	      .byte	%00111100	; WHIMSEY
    544  2d50				  -
    545  2d50				  -	      ifconst	fontcharsHEX
    546  2d50				  -
    547  2d50				  -			;byte %00000000 ; WHIMSEY
    548  2d50				  -
    549  2d50				  -	      .byte	%01110110	; WHIMSEY
    550  2d50				  -	      .byte	%01110110	; WHIMSEY
    551  2d50				  -	      .byte	%01111110	; WHIMSEY
    552  2d50				  -	      .byte	%01111110	; WHIMSEY
    553  2d50				  -	      .byte	%01111110	; WHIMSEY
    554  2d50				  -	      .byte	%01110110	; WHIMSEY
    555  2d50				  -	      .byte	%01110110	; WHIMSEY
    556  2d50				  -	      .byte	%00111100	; WHIMSEY
    557  2d50				  -
    558  2d50				  -			;byte %00000000 ; WHIMSEY
    559  2d50				  -
    560  2d50				  -	      .byte	%01111100	; WHIMSEY
    561  2d50				  -	      .byte	%01111110	; WHIMSEY
    562  2d50				  -	      .byte	%01111110	; WHIMSEY
    563  2d50				  -	      .byte	%01110110	; WHIMSEY
    564  2d50				  -	      .byte	%01110110	; WHIMSEY
    565  2d50				  -	      .byte	%01111100	; WHIMSEY
    566  2d50				  -	      .byte	%01110110	; WHIMSEY
    567  2d50				  -	      .byte	%01111100	; WHIMSEY
    568  2d50				  -
    569  2d50				  -			;byte %00000000 ; WHIMSEY
    570  2d50				  -
    571  2d50				  -	      .byte	%00111100	; WHIMSEY
    572  2d50				  -	      .byte	%01111110	; WHIMSEY
    573  2d50				  -	      .byte	%01111110	; WHIMSEY
    574  2d50				  -	      .byte	%01110110	; WHIMSEY
    575  2d50				  -	      .byte	%01110000	; WHIMSEY
    576  2d50				  -	      .byte	%01110000	; WHIMSEY
    577  2d50				  -	      .byte	%01110110	; WHIMSEY
    578  2d50				  -	      .byte	%00111100	; WHIMSEY
    579  2d50				  -
    580  2d50				  -			;byte %00000000 ; WHIMSEY
    581  2d50				  -
    582  2d50				  -	      .byte	%01111100	; WHIMSEY
    583  2d50				  -	      .byte	%01111110	; WHIMSEY
    584  2d50				  -	      .byte	%01111110	; WHIMSEY
    585  2d50				  -	      .byte	%01111110	; WHIMSEY
    586  2d50				  -	      .byte	%01110110	; WHIMSEY
    587  2d50				  -	      .byte	%01110110	; WHIMSEY
    588  2d50				  -	      .byte	%01110110	; WHIMSEY
    589  2d50				  -	      .byte	%01111100	; WHIMSEY
    590  2d50				  -
    591  2d50				  -			;byte %00000000 ; WHIMSEY
    592  2d50				  -
    593  2d50				  -	      .byte	%01111110	; WHIMSEY
    594  2d50				  -	      .byte	%01111110	; WHIMSEY
    595  2d50				  -	      .byte	%01111110	; WHIMSEY
    596  2d50				  -	      .byte	%01110000	; WHIMSEY
    597  2d50				  -	      .byte	%01110000	; WHIMSEY
    598  2d50				  -	      .byte	%01111100	; WHIMSEY
    599  2d50				  -	      .byte	%01110000	; WHIMSEY
    600  2d50				  -	      .byte	%01111100	; WHIMSEY
    601  2d50				  -
    602  2d50				  -			;byte %00000000 ; WHIMSEY
    603  2d50				  -
    604  2d50				  -	      .byte	%01110000	; WHIMSEY
    605  2d50				  -	      .byte	%01110000	; WHIMSEY
    606  2d50				  -	      .byte	%01110000	; WHIMSEY
    607  2d50				  -	      .byte	%01110000	; WHIMSEY
    608  2d50				  -	      .byte	%01110000	; WHIMSEY
    609  2d50				  -	      .byte	%01111100	; WHIMSEY
    610  2d50				  -	      .byte	%01110000	; WHIMSEY
    611  2d50				  -	      .byte	%01111100	; WHIMSEY
    612  2d50				  -
    613  2d50				  -			;byte %00000000 ; WHIMSEY
    614  2d50				  -			;byte %00000000 ; WHIMSEY
    615  2d50				  -			;byte %00000000 ; WHIMSEY
    616  2d50				  -			;byte %00000000 ; WHIMSEY
    617  2d50				  -
    618  2d50				  -	      endif		; fontcharsHEX
    619  2d50					      endif		; WHIMSEY
    620  2d50
    621  2d50				  -	      if	fontstyle == ALARMCLOCK
    622  2d50				  -
    623  2d50				  -			;byte %00000000 ; ALARMCLOCK
    624  2d50				  -
    625  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    626  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    627  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    628  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    629  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    630  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    631  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    632  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    633  2d50				  -
    634  2d50				  -			;byte %00000000 ; ALARMCLOCK
    635  2d50				  -
    636  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    637  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    638  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    639  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    640  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    641  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    642  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    643  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    644  2d50				  -
    645  2d50				  -			;byte %00000000 ; ALARMCLOCK
    646  2d50				  -
    647  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    648  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    649  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    650  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    651  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    652  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    653  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    654  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    655  2d50				  -
    656  2d50				  -			;byte %00000000 ; ALARMCLOCK
    657  2d50				  -
    658  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    659  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    660  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    661  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    662  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    663  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    664  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    665  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    666  2d50				  -
    667  2d50				  -			;byte %00000000 ; ALARMCLOCK
    668  2d50				  -
    669  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    670  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    671  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    672  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    673  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    674  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    675  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    676  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    677  2d50				  -
    678  2d50				  -			;byte %00000000 ; ALARMCLOCK
    679  2d50				  -
    680  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    681  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    682  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    683  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    684  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    685  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    686  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    687  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    688  2d50				  -
    689  2d50				  -			;byte %00000000 ; ALARMCLOCK
    690  2d50				  -
    691  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    692  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    693  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    694  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    695  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    696  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    697  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    698  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    699  2d50				  -
    700  2d50				  -			;byte %00000000 ; ALARMCLOCK
    701  2d50				  -
    702  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    703  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    704  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    705  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    706  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    707  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    708  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    709  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    710  2d50				  -
    711  2d50				  -			;byte %00000000 ; ALARMCLOCK
    712  2d50				  -
    713  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    714  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    715  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    716  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    717  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    718  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    719  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    720  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    721  2d50				  -
    722  2d50				  -			;byte %00000000 ; ALARMCLOCK
    723  2d50				  -
    724  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    725  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    726  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    727  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    728  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    729  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    730  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    731  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    732  2d50				  -
    733  2d50				  -
    734  2d50				  -	      ifconst	fontcharsHEX
    735  2d50				  -			;byte %00000000 ; ALARMCLOCK
    736  2d50				  -
    737  2d50				  -
    738  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    739  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    740  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    741  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    742  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    743  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    744  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    745  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    746  2d50				  -
    747  2d50				  -			;byte %00000000 ; ALARMCLOCK
    748  2d50				  -
    749  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    750  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    751  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    752  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    753  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    754  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    755  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    756  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    757  2d50				  -
    758  2d50				  -			;byte %00000000 ; ALARMCLOCK
    759  2d50				  -
    760  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    761  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    762  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    763  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    764  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    765  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    766  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    767  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    768  2d50				  -
    769  2d50				  -			;byte %00000000 ; ALARMCLOCK
    770  2d50				  -
    771  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    772  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    773  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    774  2d50				  -	      .byte	%01000010	; ALARMCLOCK
    775  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    776  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    777  2d50				  -	      .byte	%00000010	; ALARMCLOCK
    778  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    779  2d50				  -
    780  2d50				  -			;byte %00000000 ; ALARMCLOCK
    781  2d50				  -
    782  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    783  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    784  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    785  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    786  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    787  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    788  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    789  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    790  2d50				  -
    791  2d50				  -			;byte %00000000 ; ALARMCLOCK
    792  2d50				  -
    793  2d50				  -	      .byte	%00000000	; ALARMCLOCK
    794  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    795  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    796  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    797  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    798  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    799  2d50				  -	      .byte	%01000000	; ALARMCLOCK
    800  2d50				  -	      .byte	%00111100	; ALARMCLOCK
    801  2d50				  -
    802  2d50				  -			;byte %00000000 ; ALARMCLOCK
    803  2d50				  -			;byte %00000000 ; ALARMCLOCK
    804  2d50				  -			;byte %00000000 ; ALARMCLOCK
    805  2d50				  -			;byte %00000000 ; ALARMCLOCK
    806  2d50				  -
    807  2d50				  -	      endif		; fontcharsHEX
    808  2d50					      endif		; ALARMCLOCK
    809  2d50
    810  2d50				  -	      if	fontstyle == HANDWRITTEN
    811  2d50				  -
    812  2d50				  -			;byte %00000000 ; HANDWRITTEN
    813  2d50				  -
    814  2d50				  -	      .byte	%00110000	; HANDWRITTEN
    815  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    816  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    817  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    818  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    819  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    820  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    821  2d50				  -	      .byte	%00001100	; HANDWRITTEN
    822  2d50				  -
    823  2d50				  -			;byte %00000000 ; HANDWRITTEN
    824  2d50				  -
    825  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    826  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    827  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    828  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    829  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    830  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    831  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    832  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    833  2d50				  -
    834  2d50				  -			;byte %00000000 ; HANDWRITTEN
    835  2d50				  -
    836  2d50				  -	      .byte	%01110000	; HANDWRITTEN
    837  2d50				  -	      .byte	%01001100	; HANDWRITTEN
    838  2d50				  -	      .byte	%01000000	; HANDWRITTEN
    839  2d50				  -	      .byte	%00100000	; HANDWRITTEN
    840  2d50				  -	      .byte	%00011000	; HANDWRITTEN
    841  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    842  2d50				  -	      .byte	%00100010	; HANDWRITTEN
    843  2d50				  -	      .byte	%00011100	; HANDWRITTEN
    844  2d50				  -
    845  2d50				  -			;byte %00000000 ; HANDWRITTEN
    846  2d50				  -
    847  2d50				  -	      .byte	%00110000	; HANDWRITTEN
    848  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    849  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    850  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    851  2d50				  -	      .byte	%00011000	; HANDWRITTEN
    852  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    853  2d50				  -	      .byte	%00100010	; HANDWRITTEN
    854  2d50				  -	      .byte	%00011100	; HANDWRITTEN
    855  2d50				  -
    856  2d50				  -			;byte %00000000 ; HANDWRITTEN
    857  2d50				  -
    858  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    859  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    860  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    861  2d50				  -	      .byte	%01111000	; HANDWRITTEN
    862  2d50				  -	      .byte	%01000100	; HANDWRITTEN
    863  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    864  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    865  2d50				  -	      .byte	%00000010	; HANDWRITTEN
    866  2d50				  -
    867  2d50				  -			;byte %00000000 ; HANDWRITTEN
    868  2d50				  -
    869  2d50				  -	      .byte	%00110000	; HANDWRITTEN
    870  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    871  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    872  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    873  2d50				  -	      .byte	%00011000	; HANDWRITTEN
    874  2d50				  -	      .byte	%00100000	; HANDWRITTEN
    875  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    876  2d50				  -	      .byte	%00001100	; HANDWRITTEN
    877  2d50				  -
    878  2d50				  -			;byte %00000000 ; HANDWRITTEN
    879  2d50				  -
    880  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    881  2d50				  -	      .byte	%00101000	; HANDWRITTEN
    882  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    883  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    884  2d50				  -	      .byte	%00011000	; HANDWRITTEN
    885  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    886  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    887  2d50				  -	      .byte	%00000110	; HANDWRITTEN
    888  2d50				  -
    889  2d50				  -			;byte %00000000 ; HANDWRITTEN
    890  2d50				  -
    891  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    892  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    893  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    894  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    895  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    896  2d50				  -	      .byte	%00000100	; HANDWRITTEN
    897  2d50				  -	      .byte	%00110010	; HANDWRITTEN
    898  2d50				  -	      .byte	%00001110	; HANDWRITTEN
    899  2d50				  -
    900  2d50				  -			;byte %00000000 ; HANDWRITTEN
    901  2d50				  -
    902  2d50				  -	      .byte	%00110000	; HANDWRITTEN
    903  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    904  2d50				  -	      .byte	%01000100	; HANDWRITTEN
    905  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    906  2d50				  -	      .byte	%00011100	; HANDWRITTEN
    907  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    908  2d50				  -	      .byte	%00001010	; HANDWRITTEN
    909  2d50				  -	      .byte	%00000110	; HANDWRITTEN
    910  2d50				  -
    911  2d50				  -			;byte %00000000 ; HANDWRITTEN
    912  2d50				  -
    913  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    914  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    915  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    916  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    917  2d50				  -	      .byte	%00011100	; HANDWRITTEN
    918  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    919  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    920  2d50				  -	      .byte	%00001100	; HANDWRITTEN
    921  2d50				  -
    922  2d50				  -	      ifconst	fontcharsHEX
    923  2d50				  -
    924  2d50				  -			;byte %00000000 ; HANDWRITTEN
    925  2d50				  -
    926  2d50				  -	      .byte	%00110110	; HANDWRITTEN
    927  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    928  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    929  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    930  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    931  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    932  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    933  2d50				  -	      .byte	%00001110	; HANDWRITTEN
    934  2d50				  -
    935  2d50				  -			;byte %00000000 ; HANDWRITTEN
    936  2d50				  -
    937  2d50				  -	      .byte	%11110000	; HANDWRITTEN
    938  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    939  2d50				  -	      .byte	%01000100	; HANDWRITTEN
    940  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    941  2d50				  -	      .byte	%00111100	; HANDWRITTEN
    942  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    943  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    944  2d50				  -	      .byte	%00001100	; HANDWRITTEN
    945  2d50				  -
    946  2d50				  -			;byte %00000000 ; HANDWRITTEN
    947  2d50				  -
    948  2d50				  -	      .byte	%00110000	; HANDWRITTEN
    949  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    950  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    951  2d50				  -	      .byte	%01000000	; HANDWRITTEN
    952  2d50				  -	      .byte	%00100000	; HANDWRITTEN
    953  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    954  2d50				  -	      .byte	%00010100	; HANDWRITTEN
    955  2d50				  -	      .byte	%00001000	; HANDWRITTEN
    956  2d50				  -
    957  2d50				  -			;byte %00000000 ; HANDWRITTEN
    958  2d50				  -
    959  2d50				  -	      .byte	%01111000	; HANDWRITTEN
    960  2d50				  -	      .byte	%01000100	; HANDWRITTEN
    961  2d50				  -	      .byte	%01000100	; HANDWRITTEN
    962  2d50				  -	      .byte	%00100100	; HANDWRITTEN
    963  2d50				  -	      .byte	%00100010	; HANDWRITTEN
    964  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    965  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    966  2d50				  -	      .byte	%00001100	; HANDWRITTEN
    967  2d50				  -
    968  2d50				  -			;byte %00000000 ; HANDWRITTEN
    969  2d50				  -
    970  2d50				  -	      .byte	%00110000	; HANDWRITTEN
    971  2d50				  -	      .byte	%01001000	; HANDWRITTEN
    972  2d50				  -	      .byte	%01000000	; HANDWRITTEN
    973  2d50				  -	      .byte	%00100000	; HANDWRITTEN
    974  2d50				  -	      .byte	%00011000	; HANDWRITTEN
    975  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    976  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    977  2d50				  -	      .byte	%00001100	; HANDWRITTEN
    978  2d50				  -
    979  2d50				  -			;byte %00000000 ; HANDWRITTEN
    980  2d50				  -
    981  2d50				  -	      .byte	%01000000	; HANDWRITTEN
    982  2d50				  -	      .byte	%01000000	; HANDWRITTEN
    983  2d50				  -	      .byte	%01000000	; HANDWRITTEN
    984  2d50				  -	      .byte	%00100000	; HANDWRITTEN
    985  2d50				  -	      .byte	%00111000	; HANDWRITTEN
    986  2d50				  -	      .byte	%00010000	; HANDWRITTEN
    987  2d50				  -	      .byte	%00010010	; HANDWRITTEN
    988  2d50				  -	      .byte	%00001100	; HANDWRITTEN
    989  2d50				  -
    990  2d50				  -			;byte %00000000 ; HANDWRITTEN
    991  2d50				  -			;byte %00000000 ; HANDWRITTEN
    992  2d50				  -			;byte %00000000 ; HANDWRITTEN
    993  2d50				  -			;byte %00000000 ; HANDWRITTEN
    994  2d50				  -
    995  2d50				  -	      endif		; fontcharsHEX
    996  2d50					      endif		; HANDWRITTEN
    997  2d50
    998  2d50				  -	      if	fontstyle == INTERRUPTED
    999  2d50				  -
   1000  2d50				  -			;byte %00000000 ; INTERRUPTED
   1001  2d50				  -
   1002  2d50				  -	      .byte	%00110100	; INTERRUPTED
   1003  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1004  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1005  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1006  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1007  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1008  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1009  2d50				  -	      .byte	%00110100	; INTERRUPTED
   1010  2d50				  -
   1011  2d50				  -			;byte %00000000 ; INTERRUPTED
   1012  2d50				  -
   1013  2d50				  -	      .byte	%00111100	; INTERRUPTED
   1014  2d50				  -	      .byte	%00000000	; INTERRUPTED
   1015  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1016  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1017  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1018  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1019  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1020  2d50				  -	      .byte	%00111000	; INTERRUPTED
   1021  2d50				  -
   1022  2d50				  -			;byte %00000000 ; INTERRUPTED
   1023  2d50				  -
   1024  2d50				  -	      .byte	%01101110	; INTERRUPTED
   1025  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1026  2d50				  -	      .byte	%00110000	; INTERRUPTED
   1027  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1028  2d50				  -	      .byte	%00001100	; INTERRUPTED
   1029  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1030  2d50				  -	      .byte	%01000110	; INTERRUPTED
   1031  2d50				  -	      .byte	%00111100	; INTERRUPTED
   1032  2d50				  -
   1033  2d50				  -			;byte %00000000 ; INTERRUPTED
   1034  2d50				  -
   1035  2d50				  -	      .byte	%01111100	; INTERRUPTED
   1036  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1037  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1038  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1039  2d50				  -	      .byte	%01110110	; INTERRUPTED
   1040  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1041  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1042  2d50				  -	      .byte	%01110100	; INTERRUPTED
   1043  2d50				  -
   1044  2d50				  -			;byte %00000000 ; INTERRUPTED
   1045  2d50				  -
   1046  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1047  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1048  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1049  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1050  2d50				  -	      .byte	%01110110	; INTERRUPTED
   1051  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1052  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1053  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1054  2d50				  -
   1055  2d50				  -			;byte %00000000 ; INTERRUPTED
   1056  2d50				  -
   1057  2d50				  -	      .byte	%01111100	; INTERRUPTED
   1058  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1059  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1060  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1061  2d50				  -	      .byte	%01111100	; INTERRUPTED
   1062  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1063  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1064  2d50				  -	      .byte	%01101110	; INTERRUPTED
   1065  2d50				  -
   1066  2d50				  -			;byte %00000000 ; INTERRUPTED
   1067  2d50				  -
   1068  2d50				  -	      .byte	%00101100	; INTERRUPTED
   1069  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1070  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1071  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1072  2d50				  -	      .byte	%01101100	; INTERRUPTED
   1073  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1074  2d50				  -	      .byte	%00110000	; INTERRUPTED
   1075  2d50				  -	      .byte	%00011100	; INTERRUPTED
   1076  2d50				  -
   1077  2d50				  -			;byte %00000000 ; INTERRUPTED
   1078  2d50				  -
   1079  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1080  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1081  2d50				  -	      .byte	%00011000	; INTERRUPTED
   1082  2d50				  -	      .byte	%00011100	; INTERRUPTED
   1083  2d50				  -	      .byte	%00001110	; INTERRUPTED
   1084  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1085  2d50				  -	      .byte	%00000000	; INTERRUPTED
   1086  2d50				  -	      .byte	%01111110	; INTERRUPTED
   1087  2d50				  -
   1088  2d50				  -			;byte %00000000 ; INTERRUPTED
   1089  2d50				  -
   1090  2d50				  -	      .byte	%00110100	; INTERRUPTED
   1091  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1092  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1093  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1094  2d50				  -	      .byte	%00110100	; INTERRUPTED
   1095  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1096  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1097  2d50				  -	      .byte	%00110100	; INTERRUPTED
   1098  2d50				  -
   1099  2d50				  -			;byte %00000000 ; INTERRUPTED
   1100  2d50				  -
   1101  2d50				  -	      .byte	%00111000	; INTERRUPTED
   1102  2d50				  -	      .byte	%00001100	; INTERRUPTED
   1103  2d50				  -	      .byte	%00000110	; INTERRUPTED
   1104  2d50				  -	      .byte	%00110110	; INTERRUPTED
   1105  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1106  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1107  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1108  2d50				  -	      .byte	%00110100	; INTERRUPTED
   1109  2d50				  -
   1110  2d50				  -	      ifconst	fontcharsHEX
   1111  2d50				  -
   1112  2d50				  -			;byte %00000000 ; INTERRUPTED
   1113  2d50				  -
   1114  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1115  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1116  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1117  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1118  2d50				  -	      .byte	%01110110	; INTERRUPTED
   1119  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1120  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1121  2d50				  -	      .byte	%00111100	; INTERRUPTED
   1122  2d50				  -
   1123  2d50				  -			;byte %00000000 ; INTERRUPTED
   1124  2d50				  -
   1125  2d50				  -	      .byte	%01110100	; INTERRUPTED
   1126  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1127  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1128  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1129  2d50				  -	      .byte	%01110100	; INTERRUPTED
   1130  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1131  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1132  2d50				  -	      .byte	%01110100	; INTERRUPTED
   1133  2d50				  -
   1134  2d50				  -			;byte %00000000 ; INTERRUPTED
   1135  2d50				  -
   1136  2d50				  -	      .byte	%00101100	; INTERRUPTED
   1137  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1138  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1139  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1140  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1141  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1142  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1143  2d50				  -	      .byte	%00101100	; INTERRUPTED
   1144  2d50				  -
   1145  2d50				  -			;byte %00000000 ; INTERRUPTED
   1146  2d50				  -
   1147  2d50				  -	      .byte	%01111100	; INTERRUPTED
   1148  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1149  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1150  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1151  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1152  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1153  2d50				  -	      .byte	%01100110	; INTERRUPTED
   1154  2d50				  -	      .byte	%01101100	; INTERRUPTED
   1155  2d50				  -
   1156  2d50				  -			;byte %00000000 ; INTERRUPTED
   1157  2d50				  -
   1158  2d50				  -	      .byte	%01111110	; INTERRUPTED
   1159  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1160  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1161  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1162  2d50				  -	      .byte	%01101110	; INTERRUPTED
   1163  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1164  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1165  2d50				  -	      .byte	%01101110	; INTERRUPTED
   1166  2d50				  -
   1167  2d50				  -			;byte %00000000 ; INTERRUPTED
   1168  2d50				  -
   1169  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1170  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1171  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1172  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1173  2d50				  -	      .byte	%01101110	; INTERRUPTED
   1174  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1175  2d50				  -	      .byte	%01100000	; INTERRUPTED
   1176  2d50				  -	      .byte	%01101110	; INTERRUPTED
   1177  2d50				  -
   1178  2d50				  -			;byte %00000000 ; INTERRUPTED
   1179  2d50				  -			;byte %00000000 ; INTERRUPTED
   1180  2d50				  -			;byte %00000000 ; INTERRUPTED
   1181  2d50				  -			;byte %00000000 ; INTERRUPTED
   1182  2d50				  -
   1183  2d50				  -	      endif		; fontcharsHEX
   1184  2d50					      endif		; INTERRUPTED
   1185  2d50
   1186  2d50
   1187  2d50				  -	      if	fontstyle == TINY
   1188  2d50				  -
   1189  2d50				  -			;byte %00000000 ; TINY
   1190  2d50				  -
   1191  2d50				  -	      .byte	%00000000	; TINY
   1192  2d50				  -	      .byte	%00111000	; TINY
   1193  2d50				  -	      .byte	%00101000	; TINY
   1194  2d50				  -	      .byte	%00101000	; TINY
   1195  2d50				  -	      .byte	%00101000	; TINY
   1196  2d50				  -	      .byte	%00111000	; TINY
   1197  2d50				  -	      .byte	%00000000	; TINY
   1198  2d50				  -	      .byte	%00000000	; TINY
   1199  2d50				  -
   1200  2d50				  -			;byte %00000000 ; TINY
   1201  2d50				  -
   1202  2d50				  -	      .byte	%00000000	; TINY
   1203  2d50				  -	      .byte	%00010000	; TINY
   1204  2d50				  -	      .byte	%00010000	; TINY
   1205  2d50				  -	      .byte	%00010000	; TINY
   1206  2d50				  -	      .byte	%00010000	; TINY
   1207  2d50				  -	      .byte	%00010000	; TINY
   1208  2d50				  -	      .byte	%00000000	; TINY
   1209  2d50				  -	      .byte	%00000000	; TINY
   1210  2d50				  -
   1211  2d50				  -			;byte %00000000 ; TINY
   1212  2d50				  -
   1213  2d50				  -	      .byte	%00000000	; TINY
   1214  2d50				  -	      .byte	%00111000	; TINY
   1215  2d50				  -	      .byte	%00100000	; TINY
   1216  2d50				  -	      .byte	%00111000	; TINY
   1217  2d50				  -	      .byte	%00001000	; TINY
   1218  2d50				  -	      .byte	%00111000	; TINY
   1219  2d50				  -	      .byte	%00000000	; TINY
   1220  2d50				  -	      .byte	%00000000	; TINY
   1221  2d50				  -
   1222  2d50				  -			;byte %00000000 ; TINY
   1223  2d50				  -
   1224  2d50				  -	      .byte	%00000000	; TINY
   1225  2d50				  -	      .byte	%00111000	; TINY
   1226  2d50				  -	      .byte	%00001000	; TINY
   1227  2d50				  -	      .byte	%00111000	; TINY
   1228  2d50				  -	      .byte	%00001000	; TINY
   1229  2d50				  -	      .byte	%00111000	; TINY
   1230  2d50				  -	      .byte	%00000000	; TINY
   1231  2d50				  -	      .byte	%00000000	; TINY
   1232  2d50				  -
   1233  2d50				  -			;byte %00000000 ; TINY
   1234  2d50				  -
   1235  2d50				  -	      .byte	%00000000	; TINY
   1236  2d50				  -	      .byte	%00001000	; TINY
   1237  2d50				  -	      .byte	%00001000	; TINY
   1238  2d50				  -	      .byte	%00111000	; TINY
   1239  2d50				  -	      .byte	%00101000	; TINY
   1240  2d50				  -	      .byte	%00101000	; TINY
   1241  2d50				  -	      .byte	%00000000	; TINY
   1242  2d50				  -	      .byte	%00000000	; TINY
   1243  2d50				  -
   1244  2d50				  -			;byte %00000000 ; TINY
   1245  2d50				  -
   1246  2d50				  -	      .byte	%00000000	; TINY
   1247  2d50				  -	      .byte	%00111000	; TINY
   1248  2d50				  -	      .byte	%00001000	; TINY
   1249  2d50				  -	      .byte	%00111000	; TINY
   1250  2d50				  -	      .byte	%00100000	; TINY
   1251  2d50				  -	      .byte	%00111000	; TINY
   1252  2d50				  -	      .byte	%00000000	; TINY
   1253  2d50				  -	      .byte	%00000000	; TINY
   1254  2d50				  -
   1255  2d50				  -			;byte %00000000 ; TINY
   1256  2d50				  -
   1257  2d50				  -	      .byte	%00000000	; TINY
   1258  2d50				  -	      .byte	%00111000	; TINY
   1259  2d50				  -	      .byte	%00101000	; TINY
   1260  2d50				  -	      .byte	%00111000	; TINY
   1261  2d50				  -	      .byte	%00100000	; TINY
   1262  2d50				  -	      .byte	%00111000	; TINY
   1263  2d50				  -	      .byte	%00000000	; TINY
   1264  2d50				  -	      .byte	%00000000	; TINY
   1265  2d50				  -
   1266  2d50				  -			;byte %00000000 ; TINY
   1267  2d50				  -
   1268  2d50				  -	      .byte	%00000000	; TINY
   1269  2d50				  -	      .byte	%00001000	; TINY
   1270  2d50				  -	      .byte	%00001000	; TINY
   1271  2d50				  -	      .byte	%00001000	; TINY
   1272  2d50				  -	      .byte	%00001000	; TINY
   1273  2d50				  -	      .byte	%00111000	; TINY
   1274  2d50				  -	      .byte	%00000000	; TINY
   1275  2d50				  -	      .byte	%00000000	; TINY
   1276  2d50				  -
   1277  2d50				  -			;byte %00000000 ; TINY
   1278  2d50				  -
   1279  2d50				  -	      .byte	%00000000	; TINY
   1280  2d50				  -	      .byte	%00111000	; TINY
   1281  2d50				  -	      .byte	%00101000	; TINY
   1282  2d50				  -	      .byte	%00111000	; TINY
   1283  2d50				  -	      .byte	%00101000	; TINY
   1284  2d50				  -	      .byte	%00111000	; TINY
   1285  2d50				  -	      .byte	%00000000	; TINY
   1286  2d50				  -	      .byte	%00000000	; TINY
   1287  2d50				  -
   1288  2d50				  -			;byte %00000000 ; TINY
   1289  2d50				  -
   1290  2d50				  -	      .byte	%00000000	; TINY
   1291  2d50				  -	      .byte	%00001000	; TINY
   1292  2d50				  -	      .byte	%00001000	; TINY
   1293  2d50				  -	      .byte	%00111000	; TINY
   1294  2d50				  -	      .byte	%00101000	; TINY
   1295  2d50				  -	      .byte	%00111000	; TINY
   1296  2d50				  -	      .byte	%00000000	; TINY
   1297  2d50				  -	      .byte	%00000000	; TINY
   1298  2d50				  -
   1299  2d50				  -	      ifconst	fontcharsHEX
   1300  2d50				  -
   1301  2d50				  -			;byte %00000000 ; TINY
   1302  2d50				  -
   1303  2d50				  -	      .byte	%00000000	; TINY
   1304  2d50				  -	      .byte	%00101000	; TINY
   1305  2d50				  -	      .byte	%00101000	; TINY
   1306  2d50				  -	      .byte	%00111000	; TINY
   1307  2d50				  -	      .byte	%00101000	; TINY
   1308  2d50				  -	      .byte	%00111000	; TINY
   1309  2d50				  -	      .byte	%00000000	; TINY
   1310  2d50				  -	      .byte	%00000000	; TINY
   1311  2d50				  -
   1312  2d50				  -			;byte %00000000 ; TINY
   1313  2d50				  -
   1314  2d50				  -	      .byte	%00000000	; TINY
   1315  2d50				  -	      .byte	%00110000	; TINY
   1316  2d50				  -	      .byte	%00101000	; TINY
   1317  2d50				  -	      .byte	%00110000	; TINY
   1318  2d50				  -	      .byte	%00101000	; TINY
   1319  2d50				  -	      .byte	%00110000	; TINY
   1320  2d50				  -	      .byte	%00000000	; TINY
   1321  2d50				  -	      .byte	%00000000	; TINY
   1322  2d50				  -
   1323  2d50				  -			;byte %00000000 ; TINY
   1324  2d50				  -
   1325  2d50				  -	      .byte	%00000000	; TINY
   1326  2d50				  -	      .byte	%00111000	; TINY
   1327  2d50				  -	      .byte	%00100000	; TINY
   1328  2d50				  -	      .byte	%00100000	; TINY
   1329  2d50				  -	      .byte	%00100000	; TINY
   1330  2d50				  -	      .byte	%00111000	; TINY
   1331  2d50				  -	      .byte	%00000000	; TINY
   1332  2d50				  -	      .byte	%00000000	; TINY
   1333  2d50				  -
   1334  2d50				  -			;byte %00000000 ; TINY
   1335  2d50				  -
   1336  2d50				  -	      .byte	%00000000	; TINY
   1337  2d50				  -	      .byte	%00110000	; TINY
   1338  2d50				  -	      .byte	%00101000	; TINY
   1339  2d50				  -	      .byte	%00101000	; TINY
   1340  2d50				  -	      .byte	%00101000	; TINY
   1341  2d50				  -	      .byte	%00110000	; TINY
   1342  2d50				  -	      .byte	%00000000	; TINY
   1343  2d50				  -	      .byte	%00000000	; TINY
   1344  2d50				  -
   1345  2d50				  -			;byte %00000000 ; TINY
   1346  2d50				  -
   1347  2d50				  -	      .byte	%00000000	; TINY
   1348  2d50				  -	      .byte	%00111000	; TINY
   1349  2d50				  -	      .byte	%00100000	; TINY
   1350  2d50				  -	      .byte	%00111000	; TINY
   1351  2d50				  -	      .byte	%00100000	; TINY
   1352  2d50				  -	      .byte	%00111000	; TINY
   1353  2d50				  -	      .byte	%00000000	; TINY
   1354  2d50				  -	      .byte	%00000000	; TINY
   1355  2d50				  -
   1356  2d50				  -			;byte %00000000 ; TINY
   1357  2d50				  -
   1358  2d50				  -	      .byte	%00000000	; TINY
   1359  2d50				  -	      .byte	%00100000	; TINY
   1360  2d50				  -	      .byte	%00100000	; TINY
   1361  2d50				  -	      .byte	%00111000	; TINY
   1362  2d50				  -	      .byte	%00100000	; TINY
   1363  2d50				  -	      .byte	%00111000	; TINY
   1364  2d50				  -	      .byte	%00000000	; TINY
   1365  2d50				  -	      .byte	%00000000	; TINY
   1366  2d50				  -
   1367  2d50				  -			;byte %00000000 ; TINY
   1368  2d50				  -			;byte %00000000 ; TINY
   1369  2d50				  -			;byte %00000000 ; TINY
   1370  2d50				  -			;byte %00000000 ; TINY
   1371  2d50				  -
   1372  2d50				  -	      endif		; fontcharsHEX
   1373  2d50					      endif		; TINY
   1374  2d50
   1375  2d50				  -	      if	fontstyle == RETROPUTER
   1376  2d50				  -
   1377  2d50				  -			;byte %00000000 ; RETROPUTER
   1378  2d50				  -
   1379  2d50				  -	      .byte	%01111110	; RETROPUTER
   1380  2d50				  -	      .byte	%01000110	; RETROPUTER
   1381  2d50				  -	      .byte	%01000110	; RETROPUTER
   1382  2d50				  -	      .byte	%01000110	; RETROPUTER
   1383  2d50				  -	      .byte	%01100010	; RETROPUTER
   1384  2d50				  -	      .byte	%01100010	; RETROPUTER
   1385  2d50				  -	      .byte	%01100010	; RETROPUTER
   1386  2d50				  -	      .byte	%01111110	; RETROPUTER
   1387  2d50				  -
   1388  2d50				  -			;byte %00000000 ; RETROPUTER
   1389  2d50				  -
   1390  2d50				  -	      .byte	%00111000	; RETROPUTER
   1391  2d50				  -	      .byte	%00111000	; RETROPUTER
   1392  2d50				  -	      .byte	%00111000	; RETROPUTER
   1393  2d50				  -	      .byte	%00111000	; RETROPUTER
   1394  2d50				  -	      .byte	%00011000	; RETROPUTER
   1395  2d50				  -	      .byte	%00011000	; RETROPUTER
   1396  2d50				  -	      .byte	%00011000	; RETROPUTER
   1397  2d50				  -	      .byte	%00011000	; RETROPUTER
   1398  2d50				  -
   1399  2d50				  -			;byte %00000000 ; RETROPUTER
   1400  2d50				  -
   1401  2d50				  -	      .byte	%01111110	; RETROPUTER
   1402  2d50				  -	      .byte	%01100000	; RETROPUTER
   1403  2d50				  -	      .byte	%01100000	; RETROPUTER
   1404  2d50				  -	      .byte	%01100000	; RETROPUTER
   1405  2d50				  -	      .byte	%00111110	; RETROPUTER
   1406  2d50				  -	      .byte	%00000010	; RETROPUTER
   1407  2d50				  -	      .byte	%01000010	; RETROPUTER
   1408  2d50				  -	      .byte	%01111110	; RETROPUTER
   1409  2d50				  -
   1410  2d50				  -			;byte %00000000 ; RETROPUTER
   1411  2d50				  -
   1412  2d50				  -	      .byte	%01111110	; RETROPUTER
   1413  2d50				  -	      .byte	%01000110	; RETROPUTER
   1414  2d50				  -	      .byte	%00000110	; RETROPUTER
   1415  2d50				  -	      .byte	%00000110	; RETROPUTER
   1416  2d50				  -	      .byte	%00111110	; RETROPUTER
   1417  2d50				  -	      .byte	%00000010	; RETROPUTER
   1418  2d50				  -	      .byte	%01000010	; RETROPUTER
   1419  2d50				  -	      .byte	%01111110	; RETROPUTER
   1420  2d50				  -
   1421  2d50				  -			;byte %00000000 ; RETROPUTER
   1422  2d50				  -
   1423  2d50				  -	      .byte	%00001100	; RETROPUTER
   1424  2d50				  -	      .byte	%00001100	; RETROPUTER
   1425  2d50				  -	      .byte	%00001100	; RETROPUTER
   1426  2d50				  -	      .byte	%01111110	; RETROPUTER
   1427  2d50				  -	      .byte	%01000100	; RETROPUTER
   1428  2d50				  -	      .byte	%01000100	; RETROPUTER
   1429  2d50				  -	      .byte	%01000100	; RETROPUTER
   1430  2d50				  -	      .byte	%00000100	; RETROPUTER
   1431  2d50				  -
   1432  2d50				  -			;byte %00000000 ; RETROPUTER
   1433  2d50				  -
   1434  2d50				  -	      .byte	%01111110	; RETROPUTER
   1435  2d50				  -	      .byte	%01000110	; RETROPUTER
   1436  2d50				  -	      .byte	%00000110	; RETROPUTER
   1437  2d50				  -	      .byte	%00000110	; RETROPUTER
   1438  2d50				  -	      .byte	%01111100	; RETROPUTER
   1439  2d50				  -	      .byte	%01000000	; RETROPUTER
   1440  2d50				  -	      .byte	%01000000	; RETROPUTER
   1441  2d50				  -	      .byte	%01111110	; RETROPUTER
   1442  2d50				  -
   1443  2d50				  -			;byte %00000000 ; RETROPUTER
   1444  2d50				  -
   1445  2d50				  -	      .byte	%01111110	; RETROPUTER
   1446  2d50				  -	      .byte	%01000110	; RETROPUTER
   1447  2d50				  -	      .byte	%01000110	; RETROPUTER
   1448  2d50				  -	      .byte	%01000110	; RETROPUTER
   1449  2d50				  -	      .byte	%01111100	; RETROPUTER
   1450  2d50				  -	      .byte	%01000000	; RETROPUTER
   1451  2d50				  -	      .byte	%01000010	; RETROPUTER
   1452  2d50				  -	      .byte	%01111110	; RETROPUTER
   1453  2d50				  -
   1454  2d50				  -			;byte %00000000 ; RETROPUTER
   1455  2d50				  -
   1456  2d50				  -	      .byte	%00001100	; RETROPUTER
   1457  2d50				  -	      .byte	%00001100	; RETROPUTER
   1458  2d50				  -	      .byte	%00001100	; RETROPUTER
   1459  2d50				  -	      .byte	%00001100	; RETROPUTER
   1460  2d50				  -	      .byte	%00000100	; RETROPUTER
   1461  2d50				  -	      .byte	%00000010	; RETROPUTER
   1462  2d50				  -	      .byte	%01000010	; RETROPUTER
   1463  2d50				  -	      .byte	%01111110	; RETROPUTER
   1464  2d50				  -
   1465  2d50				  -			;byte %00000000 ; RETROPUTER
   1466  2d50				  -
   1467  2d50				  -	      .byte	%01111110	; RETROPUTER
   1468  2d50				  -	      .byte	%01000110	; RETROPUTER
   1469  2d50				  -	      .byte	%01000110	; RETROPUTER
   1470  2d50				  -	      .byte	%01000110	; RETROPUTER
   1471  2d50				  -	      .byte	%01111110	; RETROPUTER
   1472  2d50				  -	      .byte	%01000010	; RETROPUTER
   1473  2d50				  -	      .byte	%01000010	; RETROPUTER
   1474  2d50				  -	      .byte	%01111110	; RETROPUTER
   1475  2d50				  -
   1476  2d50				  -			;byte %00000000 ; RETROPUTER
   1477  2d50				  -
   1478  2d50				  -	      .byte	%00000110	; RETROPUTER
   1479  2d50				  -	      .byte	%00000110	; RETROPUTER
   1480  2d50				  -	      .byte	%00000110	; RETROPUTER
   1481  2d50				  -	      .byte	%00000010	; RETROPUTER
   1482  2d50				  -	      .byte	%01111110	; RETROPUTER
   1483  2d50				  -	      .byte	%01000010	; RETROPUTER
   1484  2d50				  -	      .byte	%01000010	; RETROPUTER
   1485  2d50				  -	      .byte	%01111110	; RETROPUTER
   1486  2d50				  -
   1487  2d50				  -	      ifconst	fontcharsHEX
   1488  2d50				  -
   1489  2d50				  -			;byte %00000000  ; RETROPUTER
   1490  2d50				  -
   1491  2d50				  -	      .byte	%01100010	; RETROPUTER
   1492  2d50				  -	      .byte	%01100010	; RETROPUTER
   1493  2d50				  -	      .byte	%01100010	; RETROPUTER
   1494  2d50				  -	      .byte	%01000010	; RETROPUTER
   1495  2d50				  -	      .byte	%01111110	; RETROPUTER
   1496  2d50				  -	      .byte	%01000010	; RETROPUTER
   1497  2d50				  -	      .byte	%01000010	; RETROPUTER
   1498  2d50				  -	      .byte	%01111110	; RETROPUTER
   1499  2d50				  -
   1500  2d50				  -			;byte %00000000 ; RETROPUTER
   1501  2d50				  -
   1502  2d50				  -	      .byte	%01111110	; RETROPUTER
   1503  2d50				  -	      .byte	%01100010	; RETROPUTER
   1504  2d50				  -	      .byte	%01100010	; RETROPUTER
   1505  2d50				  -	      .byte	%01000010	; RETROPUTER
   1506  2d50				  -	      .byte	%01111100	; RETROPUTER
   1507  2d50				  -	      .byte	%01000010	; RETROPUTER
   1508  2d50				  -	      .byte	%01000010	; RETROPUTER
   1509  2d50				  -	      .byte	%01111110	; RETROPUTER
   1510  2d50				  -
   1511  2d50				  -			;byte %00000000 ; RETROPUTER
   1512  2d50				  -
   1513  2d50				  -	      .byte	%01111110	; RETROPUTER
   1514  2d50				  -	      .byte	%01100010	; RETROPUTER
   1515  2d50				  -	      .byte	%01100010	; RETROPUTER
   1516  2d50				  -	      .byte	%01100000	; RETROPUTER
   1517  2d50				  -	      .byte	%01000000	; RETROPUTER
   1518  2d50				  -	      .byte	%01000000	; RETROPUTER
   1519  2d50				  -	      .byte	%01000010	; RETROPUTER
   1520  2d50				  -	      .byte	%01111110	; RETROPUTER
   1521  2d50				  -
   1522  2d50				  -			;byte %00000000 ; RETROPUTER
   1523  2d50				  -
   1524  2d50				  -	      .byte	%01111100	; RETROPUTER
   1525  2d50				  -	      .byte	%01100010	; RETROPUTER
   1526  2d50				  -	      .byte	%01100010	; RETROPUTER
   1527  2d50				  -	      .byte	%01100010	; RETROPUTER
   1528  2d50				  -	      .byte	%01000010	; RETROPUTER
   1529  2d50				  -	      .byte	%01000010	; RETROPUTER
   1530  2d50				  -	      .byte	%01000010	; RETROPUTER
   1531  2d50				  -	      .byte	%01111100	; RETROPUTER
   1532  2d50				  -
   1533  2d50				  -			;byte %00000000 ; RETROPUTER
   1534  2d50				  -
   1535  2d50				  -	      .byte	%01111110	; RETROPUTER
   1536  2d50				  -	      .byte	%01100010	; RETROPUTER
   1537  2d50				  -	      .byte	%01100000	; RETROPUTER
   1538  2d50				  -	      .byte	%01000000	; RETROPUTER
   1539  2d50				  -	      .byte	%01111100	; RETROPUTER
   1540  2d50				  -	      .byte	%01000000	; RETROPUTER
   1541  2d50				  -	      .byte	%01000010	; RETROPUTER
   1542  2d50				  -	      .byte	%01111110	; RETROPUTER
   1543  2d50				  -
   1544  2d50				  -			;byte %00000000 ; RETROPUTER
   1545  2d50				  -
   1546  2d50				  -	      .byte	%01100000	; RETROPUTER
   1547  2d50				  -	      .byte	%01100000	; RETROPUTER
   1548  2d50				  -	      .byte	%01100000	; RETROPUTER
   1549  2d50				  -	      .byte	%01000000	; RETROPUTER
   1550  2d50				  -	      .byte	%01111100	; RETROPUTER
   1551  2d50				  -	      .byte	%01000000	; RETROPUTER
   1552  2d50				  -	      .byte	%01000010	; RETROPUTER
   1553  2d50				  -	      .byte	%01111110	; RETROPUTER
   1554  2d50				  -
   1555  2d50				  -			;byte %00000000 ; RETROPUTER
   1556  2d50				  -			;byte %00000000 ; RETROPUTER
   1557  2d50				  -			;byte %00000000 ; RETROPUTER
   1558  2d50				  -			;byte %00000000 ; RETROPUTER
   1559  2d50				  -
   1560  2d50				  -	      endif		; fontcharsHEX
   1561  2d50					      endif		; RETROPUTER
   1562  2d50
   1563  2d50				  -	      if	fontstyle == CURVES
   1564  2d50				  -
   1565  2d50				  -			;byte %00000000 ; CURVES
   1566  2d50				  -
   1567  2d50				  -	      .byte	%00111100	; CURVES
   1568  2d50				  -	      .byte	%01111110	; CURVES
   1569  2d50				  -	      .byte	%01100110	; CURVES
   1570  2d50				  -	      .byte	%01100110	; CURVES
   1571  2d50				  -	      .byte	%01100110	; CURVES
   1572  2d50				  -	      .byte	%01100110	; CURVES
   1573  2d50				  -	      .byte	%01111110	; CURVES
   1574  2d50				  -	      .byte	%00111100	; CURVES
   1575  2d50				  -
   1576  2d50				  -			;byte %00000000 ; CURVES
   1577  2d50				  -
   1578  2d50				  -	      .byte	%00011000	; CURVES
   1579  2d50				  -	      .byte	%00011000	; CURVES
   1580  2d50				  -	      .byte	%00011000	; CURVES
   1581  2d50				  -	      .byte	%00011000	; CURVES
   1582  2d50				  -	      .byte	%00011000	; CURVES
   1583  2d50				  -	      .byte	%00011000	; CURVES
   1584  2d50				  -	      .byte	%01111000	; CURVES
   1585  2d50				  -	      .byte	%01110000	; CURVES
   1586  2d50				  -
   1587  2d50				  -			;byte %00000000 ; CURVES
   1588  2d50				  -
   1589  2d50				  -	      .byte	%01111110	; CURVES
   1590  2d50				  -	      .byte	%01111110	; CURVES
   1591  2d50				  -	      .byte	%01100000	; CURVES
   1592  2d50				  -	      .byte	%01111100	; CURVES
   1593  2d50				  -	      .byte	%00111110	; CURVES
   1594  2d50				  -	      .byte	%00000110	; CURVES
   1595  2d50				  -	      .byte	%01111110	; CURVES
   1596  2d50				  -	      .byte	%01111100	; CURVES
   1597  2d50				  -
   1598  2d50				  -			;byte %00000000 ; CURVES
   1599  2d50				  -
   1600  2d50				  -	      .byte	%01111100	; CURVES
   1601  2d50				  -	      .byte	%01111110	; CURVES
   1602  2d50				  -	      .byte	%00001110	; CURVES
   1603  2d50				  -	      .byte	%00111100	; CURVES
   1604  2d50				  -	      .byte	%00111100	; CURVES
   1605  2d50				  -	      .byte	%00001110	; CURVES
   1606  2d50				  -	      .byte	%01111110	; CURVES
   1607  2d50				  -	      .byte	%01111100	; CURVES
   1608  2d50				  -
   1609  2d50				  -			;byte %00000000 ; CURVES
   1610  2d50				  -
   1611  2d50				  -	      .byte	%00000110	; CURVES
   1612  2d50				  -	      .byte	%00000110	; CURVES
   1613  2d50				  -	      .byte	%00111110	; CURVES
   1614  2d50				  -	      .byte	%01111110	; CURVES
   1615  2d50				  -	      .byte	%01100110	; CURVES
   1616  2d50				  -	      .byte	%01100110	; CURVES
   1617  2d50				  -	      .byte	%01100110	; CURVES
   1618  2d50				  -	      .byte	%01100110	; CURVES
   1619  2d50				  -
   1620  2d50				  -			;byte %00000000 ; CURVES
   1621  2d50				  -
   1622  2d50				  -	      .byte	%01111100	; CURVES
   1623  2d50				  -	      .byte	%01111110	; CURVES
   1624  2d50				  -	      .byte	%00000110	; CURVES
   1625  2d50				  -	      .byte	%01111110	; CURVES
   1626  2d50				  -	      .byte	%01111100	; CURVES
   1627  2d50				  -	      .byte	%01100000	; CURVES
   1628  2d50				  -	      .byte	%01111110	; CURVES
   1629  2d50				  -	      .byte	%01111110	; CURVES
   1630  2d50				  -
   1631  2d50				  -			;byte %00000000 ; CURVES
   1632  2d50				  -
   1633  2d50				  -	      .byte	%00111100	; CURVES
   1634  2d50				  -	      .byte	%01111110	; CURVES
   1635  2d50				  -	      .byte	%01100110	; CURVES
   1636  2d50				  -	      .byte	%01111110	; CURVES
   1637  2d50				  -	      .byte	%01111100	; CURVES
   1638  2d50				  -	      .byte	%01100000	; CURVES
   1639  2d50				  -	      .byte	%01111110	; CURVES
   1640  2d50				  -	      .byte	%00111110	; CURVES
   1641  2d50				  -
   1642  2d50				  -			;byte %00000000 ; CURVES
   1643  2d50				  -
   1644  2d50				  -	      .byte	%00000110	; CURVES
   1645  2d50				  -	      .byte	%00000110	; CURVES
   1646  2d50				  -	      .byte	%00000110	; CURVES
   1647  2d50				  -	      .byte	%00000110	; CURVES
   1648  2d50				  -	      .byte	%00000110	; CURVES
   1649  2d50				  -	      .byte	%01100110	; CURVES
   1650  2d50				  -	      .byte	%01111110	; CURVES
   1651  2d50				  -	      .byte	%00111100	; CURVES
   1652  2d50				  -
   1653  2d50				  -			;byte %00000000 ; CURVES
   1654  2d50				  -
   1655  2d50				  -	      .byte	%00111100	; CURVES
   1656  2d50				  -	      .byte	%01111110	; CURVES
   1657  2d50				  -	      .byte	%01100110	; CURVES
   1658  2d50				  -	      .byte	%01111110	; CURVES
   1659  2d50				  -	      .byte	%00111100	; CURVES
   1660  2d50				  -	      .byte	%01100110	; CURVES
   1661  2d50				  -	      .byte	%01111110	; CURVES
   1662  2d50				  -	      .byte	%00111100	; CURVES
   1663  2d50				  -
   1664  2d50				  -			;byte %00000000 ; CURVES
   1665  2d50				  -
   1666  2d50				  -	      .byte	%01111100	; CURVES
   1667  2d50				  -	      .byte	%01111110	; CURVES
   1668  2d50				  -	      .byte	%00000110	; CURVES
   1669  2d50				  -	      .byte	%00111110	; CURVES
   1670  2d50				  -	      .byte	%01111110	; CURVES
   1671  2d50				  -	      .byte	%01100110	; CURVES
   1672  2d50				  -	      .byte	%01111110	; CURVES
   1673  2d50				  -	      .byte	%00111100	; CURVES
   1674  2d50				  -
   1675  2d50				  -	      ifconst	fontcharsHEX
   1676  2d50				  -
   1677  2d50				  -			;byte %00000000 ; CURVES
   1678  2d50				  -
   1679  2d50				  -	      .byte	%01100110	; CURVES
   1680  2d50				  -	      .byte	%01100110	; CURVES
   1681  2d50				  -	      .byte	%01111110	; CURVES
   1682  2d50				  -	      .byte	%01111110	; CURVES
   1683  2d50				  -	      .byte	%01100110	; CURVES
   1684  2d50				  -	      .byte	%01100110	; CURVES
   1685  2d50				  -	      .byte	%01111110	; CURVES
   1686  2d50				  -	      .byte	%00111100	; CURVES
   1687  2d50				  -
   1688  2d50				  -			;byte %00000000 ; CURVES
   1689  2d50				  -
   1690  2d50				  -	      .byte	%01111100	; CURVES
   1691  2d50				  -	      .byte	%01111110	; CURVES
   1692  2d50				  -	      .byte	%01100110	; CURVES
   1693  2d50				  -	      .byte	%01111110	; CURVES
   1694  2d50				  -	      .byte	%01111100	; CURVES
   1695  2d50				  -	      .byte	%01100110	; CURVES
   1696  2d50				  -	      .byte	%01111110	; CURVES
   1697  2d50				  -	      .byte	%01111100	; CURVES
   1698  2d50				  -
   1699  2d50				  -			;byte %00000000 ; CURVES
   1700  2d50				  -
   1701  2d50				  -	      .byte	%00111110	; CURVES
   1702  2d50				  -	      .byte	%01111110	; CURVES
   1703  2d50				  -	      .byte	%01100000	; CURVES
   1704  2d50				  -	      .byte	%01100000	; CURVES
   1705  2d50				  -	      .byte	%01100000	; CURVES
   1706  2d50				  -	      .byte	%01100000	; CURVES
   1707  2d50				  -	      .byte	%01111110	; CURVES
   1708  2d50				  -	      .byte	%00111110	; CURVES
   1709  2d50				  -
   1710  2d50				  -			;byte %00000000 ; CURVES
   1711  2d50				  -
   1712  2d50				  -	      .byte	%01111100	; CURVES
   1713  2d50				  -	      .byte	%01111110	; CURVES
   1714  2d50				  -	      .byte	%01100110	; CURVES
   1715  2d50				  -	      .byte	%01100110	; CURVES
   1716  2d50				  -	      .byte	%01100110	; CURVES
   1717  2d50				  -	      .byte	%01100110	; CURVES
   1718  2d50				  -	      .byte	%01111110	; CURVES
   1719  2d50				  -	      .byte	%01111100	; CURVES
   1720  2d50				  -
   1721  2d50				  -			;byte %00000000 ; CURVES
   1722  2d50				  -
   1723  2d50				  -	      .byte	%00111110	; CURVES
   1724  2d50				  -	      .byte	%01111110	; CURVES
   1725  2d50				  -	      .byte	%01100000	; CURVES
   1726  2d50				  -	      .byte	%01111100	; CURVES
   1727  2d50				  -	      .byte	%01111100	; CURVES
   1728  2d50				  -	      .byte	%01100000	; CURVES
   1729  2d50				  -	      .byte	%01111110	; CURVES
   1730  2d50				  -	      .byte	%00111110	; CURVES
   1731  2d50				  -
   1732  2d50				  -			;byte %00000000 ; CURVES
   1733  2d50				  -
   1734  2d50				  -	      .byte	%01100000	; CURVES
   1735  2d50				  -	      .byte	%01100000	; CURVES
   1736  2d50				  -	      .byte	%01100000	; CURVES
   1737  2d50				  -	      .byte	%01111100	; CURVES
   1738  2d50				  -	      .byte	%01111100	; CURVES
   1739  2d50				  -	      .byte	%01100000	; CURVES
   1740  2d50				  -	      .byte	%01111110	; CURVES
   1741  2d50				  -	      .byte	%00111110	; CURVES
   1742  2d50				  -
   1743  2d50				  -			;byte %00000000 ; CURVES
   1744  2d50				  -			;byte %00000000 ; CURVES
   1745  2d50				  -			;byte %00000000 ; CURVES
   1746  2d50				  -			;byte %00000000 ; CURVES
   1747  2d50				  -
   1748  2d50				  -	      endif		; fontcharsHEX 
   1749  2d50					      endif		; CURVES
   1750  2d50
   1751  2d50
   1752  2d50				  -	      if	fontstyle == HUSKY
   1753  2d50				  -
   1754  2d50				  -			;byte %00000000 ; HUSKY
   1755  2d50				  -
   1756  2d50				  -	      .byte	%01111100	; HUSKY
   1757  2d50				  -	      .byte	%11111110	; HUSKY
   1758  2d50				  -	      .byte	%11101110	; HUSKY
   1759  2d50				  -	      .byte	%11101110	; HUSKY
   1760  2d50				  -	      .byte	%11101110	; HUSKY
   1761  2d50				  -	      .byte	%11101110	; HUSKY
   1762  2d50				  -	      .byte	%11111110	; HUSKY
   1763  2d50				  -	      .byte	%01111100	; HUSKY
   1764  2d50				  -
   1765  2d50				  -			;byte %00000000 ; HUSKY
   1766  2d50				  -
   1767  2d50				  -	      .byte	%00111000	; HUSKY
   1768  2d50				  -	      .byte	%00111000	; HUSKY
   1769  2d50				  -	      .byte	%00111000	; HUSKY
   1770  2d50				  -	      .byte	%00111000	; HUSKY
   1771  2d50				  -	      .byte	%00111000	; HUSKY
   1772  2d50				  -	      .byte	%00111000	; HUSKY
   1773  2d50				  -	      .byte	%00111000	; HUSKY
   1774  2d50				  -	      .byte	%00111000	; HUSKY
   1775  2d50				  -
   1776  2d50				  -			;byte %00000000 ; HUSKY
   1777  2d50				  -
   1778  2d50				  -	      .byte	%11111110	; HUSKY
   1779  2d50				  -	      .byte	%11111110	; HUSKY
   1780  2d50				  -	      .byte	%11100000	; HUSKY
   1781  2d50				  -	      .byte	%11111100	; HUSKY
   1782  2d50				  -	      .byte	%01111110	; HUSKY
   1783  2d50				  -	      .byte	%00001110	; HUSKY
   1784  2d50				  -	      .byte	%11111110	; HUSKY
   1785  2d50				  -	      .byte	%11111100	; HUSKY
   1786  2d50				  -
   1787  2d50				  -			;byte %00000000 ; HUSKY
   1788  2d50				  -
   1789  2d50				  -	      .byte	%11111100	; HUSKY
   1790  2d50				  -	      .byte	%11111110	; HUSKY
   1791  2d50				  -	      .byte	%00001110	; HUSKY
   1792  2d50				  -	      .byte	%11111100	; HUSKY
   1793  2d50				  -	      .byte	%11111100	; HUSKY
   1794  2d50				  -	      .byte	%00001110	; HUSKY
   1795  2d50				  -	      .byte	%11111110	; HUSKY
   1796  2d50				  -	      .byte	%11111100	; HUSKY
   1797  2d50				  -
   1798  2d50				  -			;byte %00000000 ; HUSKY
   1799  2d50				  -
   1800  2d50				  -	      .byte	%00011100	; HUSKY
   1801  2d50				  -	      .byte	%00011100	; HUSKY
   1802  2d50				  -	      .byte	%11111110	; HUSKY
   1803  2d50				  -	      .byte	%11111110	; HUSKY
   1804  2d50				  -	      .byte	%11011100	; HUSKY
   1805  2d50				  -	      .byte	%11011100	; HUSKY
   1806  2d50				  -	      .byte	%00011100	; HUSKY
   1807  2d50				  -	      .byte	%00011100	; HUSKY
   1808  2d50				  -
   1809  2d50				  -			;byte %00000000 ; HUSKY
   1810  2d50				  -
   1811  2d50				  -	      .byte	%11111100	; HUSKY
   1812  2d50				  -	      .byte	%11111110	; HUSKY
   1813  2d50				  -	      .byte	%00001110	; HUSKY
   1814  2d50				  -	      .byte	%11111110	; HUSKY
   1815  2d50				  -	      .byte	%11111100	; HUSKY
   1816  2d50				  -	      .byte	%11100000	; HUSKY
   1817  2d50				  -	      .byte	%11111110	; HUSKY
   1818  2d50				  -	      .byte	%11111110	; HUSKY
   1819  2d50				  -
   1820  2d50				  -			;byte %00000000 ; HUSKY
   1821  2d50				  -
   1822  2d50				  -	      .byte	%01111100	; HUSKY
   1823  2d50				  -	      .byte	%11111110	; HUSKY
   1824  2d50				  -	      .byte	%11101110	; HUSKY
   1825  2d50				  -	      .byte	%11111110	; HUSKY
   1826  2d50				  -	      .byte	%11111100	; HUSKY
   1827  2d50				  -	      .byte	%11100000	; HUSKY
   1828  2d50				  -	      .byte	%11111110	; HUSKY
   1829  2d50				  -	      .byte	%01111110	; HUSKY
   1830  2d50				  -
   1831  2d50				  -			;byte %00000000 ; HUSKY
   1832  2d50				  -
   1833  2d50				  -	      .byte	%00111000	; HUSKY
   1834  2d50				  -	      .byte	%00111000	; HUSKY
   1835  2d50				  -	      .byte	%00111000	; HUSKY
   1836  2d50				  -	      .byte	%00111000	; HUSKY
   1837  2d50				  -	      .byte	%00011100	; HUSKY
   1838  2d50				  -	      .byte	%00001110	; HUSKY
   1839  2d50				  -	      .byte	%11111110	; HUSKY
   1840  2d50				  -	      .byte	%11111110	; HUSKY
   1841  2d50				  -
   1842  2d50				  -			;byte %00000000 ; HUSKY
   1843  2d50				  -
   1844  2d50				  -	      .byte	%01111100	; HUSKY
   1845  2d50				  -	      .byte	%11111110	; HUSKY
   1846  2d50				  -	      .byte	%11101110	; HUSKY
   1847  2d50				  -	      .byte	%11111110	; HUSKY
   1848  2d50				  -	      .byte	%01111100	; HUSKY
   1849  2d50				  -	      .byte	%11101110	; HUSKY
   1850  2d50				  -	      .byte	%11111110	; HUSKY
   1851  2d50				  -	      .byte	%01111100	; HUSKY
   1852  2d50				  -
   1853  2d50				  -			;byte %00000000 ; HUSKY
   1854  2d50				  -
   1855  2d50				  -	      .byte	%11111100	; HUSKY
   1856  2d50				  -	      .byte	%11111110	; HUSKY
   1857  2d50				  -	      .byte	%00001110	; HUSKY
   1858  2d50				  -	      .byte	%01111110	; HUSKY
   1859  2d50				  -	      .byte	%11111110	; HUSKY
   1860  2d50				  -	      .byte	%11101110	; HUSKY
   1861  2d50				  -	      .byte	%11111110	; HUSKY
   1862  2d50				  -	      .byte	%01111100	; HUSKY
   1863  2d50				  -
   1864  2d50				  -	      ifconst	fontcharsHEX
   1865  2d50				  -
   1866  2d50				  -			;byte %00000000 ; HUSKY
   1867  2d50				  -
   1868  2d50				  -	      .byte	%11101110	; HUSKY
   1869  2d50				  -	      .byte	%11101110	; HUSKY
   1870  2d50				  -	      .byte	%11111110	; HUSKY
   1871  2d50				  -	      .byte	%11111110	; HUSKY
   1872  2d50				  -	      .byte	%11101110	; HUSKY
   1873  2d50				  -	      .byte	%11111110	; HUSKY
   1874  2d50				  -	      .byte	%01111100	; HUSKY
   1875  2d50				  -	      .byte	%00111000	; HUSKY
   1876  2d50				  -
   1877  2d50				  -			;byte %00000000 ; HUSKY
   1878  2d50				  -
   1879  2d50				  -	      .byte	%11111100	; HUSKY
   1880  2d50				  -	      .byte	%11111110	; HUSKY
   1881  2d50				  -	      .byte	%11101110	; HUSKY
   1882  2d50				  -	      .byte	%11111110	; HUSKY
   1883  2d50				  -	      .byte	%11111100	; HUSKY
   1884  2d50				  -	      .byte	%11101110	; HUSKY
   1885  2d50				  -	      .byte	%11111110	; HUSKY
   1886  2d50				  -	      .byte	%11111100	; HUSKY
   1887  2d50				  -
   1888  2d50				  -			;byte %00000000 ; HUSKY
   1889  2d50				  -
   1890  2d50				  -	      .byte	%01111110	; HUSKY
   1891  2d50				  -	      .byte	%11111110	; HUSKY
   1892  2d50				  -	      .byte	%11110000	; HUSKY
   1893  2d50				  -	      .byte	%11100000	; HUSKY
   1894  2d50				  -	      .byte	%11100000	; HUSKY
   1895  2d50				  -	      .byte	%11110000	; HUSKY
   1896  2d50				  -	      .byte	%11111110	; HUSKY
   1897  2d50				  -	      .byte	%01111110	; HUSKY
   1898  2d50				  -
   1899  2d50				  -			;byte %00000000 ; HUSKY
   1900  2d50				  -
   1901  2d50				  -	      .byte	%11111000	; HUSKY
   1902  2d50				  -	      .byte	%11111100	; HUSKY
   1903  2d50				  -	      .byte	%11111110	; HUSKY
   1904  2d50				  -	      .byte	%11101110	; HUSKY
   1905  2d50				  -	      .byte	%11101110	; HUSKY
   1906  2d50				  -	      .byte	%11111110	; HUSKY
   1907  2d50				  -	      .byte	%11111100	; HUSKY
   1908  2d50				  -	      .byte	%11111000	; HUSKY
   1909  2d50				  -
   1910  2d50				  -			;byte %00000000 ; HUSKY
   1911  2d50				  -
   1912  2d50				  -	      .byte	%11111110	; HUSKY
   1913  2d50				  -	      .byte	%11111110	; HUSKY
   1914  2d50				  -	      .byte	%11100000	; HUSKY
   1915  2d50				  -	      .byte	%11111110	; HUSKY
   1916  2d50				  -	      .byte	%11111110	; HUSKY
   1917  2d50				  -	      .byte	%11100000	; HUSKY
   1918  2d50				  -	      .byte	%11111110	; HUSKY
   1919  2d50				  -	      .byte	%11111110	; HUSKY
   1920  2d50				  -
   1921  2d50				  -			;byte %00000000 ; HUSKY
   1922  2d50				  -
   1923  2d50				  -	      .byte	%11100000	; HUSKY
   1924  2d50				  -	      .byte	%11100000	; HUSKY
   1925  2d50				  -	      .byte	%11100000	; HUSKY
   1926  2d50				  -	      .byte	%11111110	; HUSKY
   1927  2d50				  -	      .byte	%11111110	; HUSKY
   1928  2d50				  -	      .byte	%11100000	; HUSKY
   1929  2d50				  -	      .byte	%11111110	; HUSKY
   1930  2d50				  -	      .byte	%11111110	; HUSKY
   1931  2d50				  -
   1932  2d50				  -			;byte %00000000 ; HUSKY
   1933  2d50				  -			;byte %00000000 ; HUSKY
   1934  2d50				  -			;byte %00000000 ; HUSKY
   1935  2d50				  -			;byte %00000000 ; HUSKY
   1936  2d50				  -
   1937  2d50				  -	      endif		; fontcharsHEX 
   1938  2d50					      endif		; HUSKY
   1939  2d50
   1940  2d50
   1941  2d50				  -	      if	fontstyle == SNAKE
   1942  2d50				  -
   1943  2d50				  -			;byte %00000000 ; SNAKE
   1944  2d50				  -
   1945  2d50				  -	      .byte	%01111110	; SNAKE
   1946  2d50				  -	      .byte	%01000010	; SNAKE
   1947  2d50				  -	      .byte	%01000010	; SNAKE
   1948  2d50				  -	      .byte	%01000010	; SNAKE
   1949  2d50				  -	      .byte	%01000010	; SNAKE
   1950  2d50				  -	      .byte	%01000010	; SNAKE
   1951  2d50				  -	      .byte	%01000010	; SNAKE
   1952  2d50				  -	      .byte	%01111110	; SNAKE
   1953  2d50				  -
   1954  2d50				  -			;byte %00000000 ; SNAKE
   1955  2d50				  -
   1956  2d50				  -	      .byte	%00111000	; SNAKE
   1957  2d50				  -	      .byte	%00101000	; SNAKE
   1958  2d50				  -	      .byte	%00001000	; SNAKE
   1959  2d50				  -	      .byte	%00001000	; SNAKE
   1960  2d50				  -	      .byte	%00001000	; SNAKE
   1961  2d50				  -	      .byte	%00001000	; SNAKE
   1962  2d50				  -	      .byte	%00001000	; SNAKE
   1963  2d50				  -	      .byte	%00111000	; SNAKE
   1964  2d50				  -
   1965  2d50				  -			;byte %00000000 ; SNAKE
   1966  2d50				  -
   1967  2d50				  -	      .byte	%01111110	; SNAKE
   1968  2d50				  -	      .byte	%01000010	; SNAKE
   1969  2d50				  -	      .byte	%01000110	; SNAKE
   1970  2d50				  -	      .byte	%01000000	; SNAKE
   1971  2d50				  -	      .byte	%01111110	; SNAKE
   1972  2d50				  -	      .byte	%00000010	; SNAKE
   1973  2d50				  -	      .byte	%01000010	; SNAKE
   1974  2d50				  -	      .byte	%01111110	; SNAKE
   1975  2d50				  -
   1976  2d50				  -			;byte %00000000 ; SNAKE
   1977  2d50				  -
   1978  2d50				  -	      .byte	%01111110	; SNAKE
   1979  2d50				  -	      .byte	%01000010	; SNAKE
   1980  2d50				  -	      .byte	%01100010	; SNAKE
   1981  2d50				  -	      .byte	%00000010	; SNAKE
   1982  2d50				  -	      .byte	%01111110	; SNAKE
   1983  2d50				  -	      .byte	%00000010	; SNAKE
   1984  2d50				  -	      .byte	%01000010	; SNAKE
   1985  2d50				  -	      .byte	%01111110	; SNAKE
   1986  2d50				  -
   1987  2d50				  -			;byte %00000000 ; SNAKE
   1988  2d50				  -
   1989  2d50				  -	      .byte	%00001110	; SNAKE
   1990  2d50				  -	      .byte	%00001010	; SNAKE
   1991  2d50				  -	      .byte	%00000010	; SNAKE
   1992  2d50				  -	      .byte	%01111110	; SNAKE
   1993  2d50				  -	      .byte	%01000010	; SNAKE
   1994  2d50				  -	      .byte	%01000010	; SNAKE
   1995  2d50				  -	      .byte	%01000010	; SNAKE
   1996  2d50				  -	      .byte	%01100110	; SNAKE
   1997  2d50				  -
   1998  2d50				  -			;byte %00000000 ; SNAKE
   1999  2d50				  -
   2000  2d50				  -	      .byte	%01111110	; SNAKE
   2001  2d50				  -	      .byte	%01000010	; SNAKE
   2002  2d50				  -	      .byte	%01100010	; SNAKE
   2003  2d50				  -	      .byte	%00000010	; SNAKE
   2004  2d50				  -	      .byte	%01111110	; SNAKE
   2005  2d50				  -	      .byte	%01000000	; SNAKE
   2006  2d50				  -	      .byte	%01000010	; SNAKE
   2007  2d50				  -	      .byte	%01111110	; SNAKE
   2008  2d50				  -
   2009  2d50				  -			;byte %00000000 ; SNAKE
   2010  2d50				  -
   2011  2d50				  -	      .byte	%01111110	; SNAKE
   2012  2d50				  -	      .byte	%01000010	; SNAKE
   2013  2d50				  -	      .byte	%01000010	; SNAKE
   2014  2d50				  -	      .byte	%01111110	; SNAKE
   2015  2d50				  -	      .byte	%01000000	; SNAKE
   2016  2d50				  -	      .byte	%01000110	; SNAKE
   2017  2d50				  -	      .byte	%01000010	; SNAKE
   2018  2d50				  -	      .byte	%01111110	; SNAKE
   2019  2d50				  -
   2020  2d50				  -			;byte %00000000 ; SNAKE
   2021  2d50				  -
   2022  2d50				  -	      .byte	%00000110	; SNAKE
   2023  2d50				  -	      .byte	%00000010	; SNAKE
   2024  2d50				  -	      .byte	%00000010	; SNAKE
   2025  2d50				  -	      .byte	%00000010	; SNAKE
   2026  2d50				  -	      .byte	%00000010	; SNAKE
   2027  2d50				  -	      .byte	%01100010	; SNAKE
   2028  2d50				  -	      .byte	%01000010	; SNAKE
   2029  2d50				  -	      .byte	%01111110	; SNAKE
   2030  2d50				  -
   2031  2d50				  -			;byte %00000000 ; SNAKE
   2032  2d50				  -
   2033  2d50				  -	      .byte	%01111110	; SNAKE
   2034  2d50				  -	      .byte	%01000010	; SNAKE
   2035  2d50				  -	      .byte	%01000010	; SNAKE
   2036  2d50				  -	      .byte	%01000010	; SNAKE
   2037  2d50				  -	      .byte	%01111110	; SNAKE
   2038  2d50				  -	      .byte	%01000010	; SNAKE
   2039  2d50				  -	      .byte	%01000010	; SNAKE
   2040  2d50				  -	      .byte	%01111110	; SNAKE
   2041  2d50				  -
   2042  2d50				  -			;byte %00000000 ; SNAKE
   2043  2d50				  -
   2044  2d50				  -	      .byte	%00001110	; SNAKE
   2045  2d50				  -	      .byte	%00001010	; SNAKE
   2046  2d50				  -	      .byte	%00000010	; SNAKE
   2047  2d50				  -	      .byte	%00000010	; SNAKE
   2048  2d50				  -	      .byte	%01111110	; SNAKE
   2049  2d50				  -	      .byte	%01000010	; SNAKE
   2050  2d50				  -	      .byte	%01000010	; SNAKE
   2051  2d50				  -	      .byte	%01111110	; SNAKE
   2052  2d50				  -
   2053  2d50				  -
   2054  2d50				  -	      ifconst	fontcharsHEX
   2055  2d50				  -
   2056  2d50				  -			;byte %00000000 ; SNAKE
   2057  2d50				  -
   2058  2d50				  -	      .byte	%01100110	; SNAKE
   2059  2d50				  -	      .byte	%01000010	; SNAKE
   2060  2d50				  -	      .byte	%01000010	; SNAKE
   2061  2d50				  -	      .byte	%01000010	; SNAKE
   2062  2d50				  -	      .byte	%01111110	; SNAKE
   2063  2d50				  -	      .byte	%01000010	; SNAKE
   2064  2d50				  -	      .byte	%01000010	; SNAKE
   2065  2d50				  -	      .byte	%01111110	; SNAKE
   2066  2d50				  -
   2067  2d50				  -			;byte %00000000 ; SNAKE
   2068  2d50				  -
   2069  2d50				  -	      .byte	%01111110	; SNAKE
   2070  2d50				  -	      .byte	%01000010	; SNAKE
   2071  2d50				  -	      .byte	%01000010	; SNAKE
   2072  2d50				  -	      .byte	%01000110	; SNAKE
   2073  2d50				  -	      .byte	%01111100	; SNAKE
   2074  2d50				  -	      .byte	%01000110	; SNAKE
   2075  2d50				  -	      .byte	%01000010	; SNAKE
   2076  2d50				  -	      .byte	%01111110	; SNAKE
   2077  2d50				  -
   2078  2d50				  -			;byte %00000000 ; SNAKE
   2079  2d50				  -
   2080  2d50				  -	      .byte	%01111110	; SNAKE
   2081  2d50				  -	      .byte	%01000010	; SNAKE
   2082  2d50				  -	      .byte	%01000110	; SNAKE
   2083  2d50				  -	      .byte	%01000000	; SNAKE
   2084  2d50				  -	      .byte	%01000000	; SNAKE
   2085  2d50				  -	      .byte	%01000110	; SNAKE
   2086  2d50				  -	      .byte	%01000010	; SNAKE
   2087  2d50				  -	      .byte	%01111110	; SNAKE
   2088  2d50				  -
   2089  2d50				  -			;byte %00000000 ; SNAKE
   2090  2d50				  -
   2091  2d50				  -	      .byte	%01111100	; SNAKE
   2092  2d50				  -	      .byte	%01000110	; SNAKE
   2093  2d50				  -	      .byte	%01000010	; SNAKE
   2094  2d50				  -	      .byte	%01000010	; SNAKE
   2095  2d50				  -	      .byte	%01000010	; SNAKE
   2096  2d50				  -	      .byte	%01000010	; SNAKE
   2097  2d50				  -	      .byte	%01000110	; SNAKE
   2098  2d50				  -	      .byte	%01111100	; SNAKE
   2099  2d50				  -
   2100  2d50				  -			;byte %00000000 ; SNAKE
   2101  2d50				  -
   2102  2d50				  -	      .byte	%01111110	; SNAKE
   2103  2d50				  -	      .byte	%01000010	; SNAKE
   2104  2d50				  -	      .byte	%01000110	; SNAKE
   2105  2d50				  -	      .byte	%01000000	; SNAKE
   2106  2d50				  -	      .byte	%01111000	; SNAKE
   2107  2d50				  -	      .byte	%01000000	; SNAKE
   2108  2d50				  -	      .byte	%01000010	; SNAKE
   2109  2d50				  -	      .byte	%01111110	; SNAKE
   2110  2d50				  -
   2111  2d50				  -			;byte %00000000 ; SNAKE
   2112  2d50				  -
   2113  2d50				  -	      .byte	%01000000	; SNAKE
   2114  2d50				  -	      .byte	%01000000	; SNAKE
   2115  2d50				  -	      .byte	%01000000	; SNAKE
   2116  2d50				  -	      .byte	%01000000	; SNAKE
   2117  2d50				  -	      .byte	%01111000	; SNAKE
   2118  2d50				  -	      .byte	%01000000	; SNAKE
   2119  2d50				  -	      .byte	%01000010	; SNAKE
   2120  2d50				  -	      .byte	%01111110	; SNAKE
   2121  2d50				  -
   2122  2d50				  -			;byte %00000000 ; SNAKE
   2123  2d50				  -			;byte %00000000 ; SNAKE
   2124  2d50				  -			;byte %00000000 ; SNAKE
   2125  2d50				  -			;byte %00000000 ; SNAKE
   2126  2d50				  -
   2127  2d50				  -	      endif		; fontcharsHEX 
   2128  2d50					      endif		; SNAKE
   2129  2d50
   2130  2d50				  -	      if	fontstyle == PLOK
   2131  2d50				  -
   2132  2d50				  -			;byte %00000000 ; PLOK
   2133  2d50				  -
   2134  2d50				  -	      .byte	%00000000	; PLOK
   2135  2d50				  -	      .byte	%00111000	; PLOK
   2136  2d50				  -	      .byte	%01100100	; PLOK
   2137  2d50				  -	      .byte	%01100010	; PLOK
   2138  2d50				  -	      .byte	%01100010	; PLOK
   2139  2d50				  -	      .byte	%00110110	; PLOK
   2140  2d50				  -	      .byte	%00011100	; PLOK
   2141  2d50				  -	      .byte	%00000000	; PLOK
   2142  2d50				  -
   2143  2d50				  -			;byte %00000000 ; PLOK
   2144  2d50				  -
   2145  2d50				  -	      .byte	%00000000	; PLOK
   2146  2d50				  -	      .byte	%00010000	; PLOK
   2147  2d50				  -	      .byte	%00011100	; PLOK
   2148  2d50				  -	      .byte	%00011100	; PLOK
   2149  2d50				  -	      .byte	%00011000	; PLOK
   2150  2d50				  -	      .byte	%00111000	; PLOK
   2151  2d50				  -	      .byte	%00011000	; PLOK
   2152  2d50				  -	      .byte	%00000000	; PLOK
   2153  2d50				  -
   2154  2d50				  -			;byte %00000000 ; PLOK
   2155  2d50				  -
   2156  2d50				  -	      .byte	%00000000	; PLOK
   2157  2d50				  -	      .byte	%00001110	; PLOK
   2158  2d50				  -	      .byte	%01111110	; PLOK
   2159  2d50				  -	      .byte	%00011000	; PLOK
   2160  2d50				  -	      .byte	%00001100	; PLOK
   2161  2d50				  -	      .byte	%00000110	; PLOK
   2162  2d50				  -	      .byte	%00111100	; PLOK
   2163  2d50				  -	      .byte	%00000000	; PLOK
   2164  2d50				  -
   2165  2d50				  -			;byte %00000000 ; PLOK
   2166  2d50				  -
   2167  2d50				  -	      .byte	%00000000	; PLOK
   2168  2d50				  -	      .byte	%00111100	; PLOK
   2169  2d50				  -	      .byte	%01101110	; PLOK
   2170  2d50				  -	      .byte	%00001110	; PLOK
   2171  2d50				  -	      .byte	%00011100	; PLOK
   2172  2d50				  -	      .byte	%00000110	; PLOK
   2173  2d50				  -	      .byte	%01111100	; PLOK
   2174  2d50				  -	      .byte	%00000000	; PLOK
   2175  2d50				  -
   2176  2d50				  -			;byte %00000000 ; PLOK
   2177  2d50				  -
   2178  2d50				  -	      .byte	%00000000	; PLOK
   2179  2d50				  -	      .byte	%00011000	; PLOK
   2180  2d50				  -	      .byte	%01111110	; PLOK
   2181  2d50				  -	      .byte	%01101100	; PLOK
   2182  2d50				  -	      .byte	%00100100	; PLOK
   2183  2d50				  -	      .byte	%00110000	; PLOK
   2184  2d50				  -	      .byte	%00110000	; PLOK
   2185  2d50				  -	      .byte	%00000000	; PLOK
   2186  2d50				  -
   2187  2d50				  -			;byte %00000000 ; PLOK
   2188  2d50				  -
   2189  2d50				  -	      .byte	%00000000	; PLOK
   2190  2d50				  -	      .byte	%00111100	; PLOK
   2191  2d50				  -	      .byte	%01001110	; PLOK
   2192  2d50				  -	      .byte	%00011100	; PLOK
   2193  2d50				  -	      .byte	%01100000	; PLOK
   2194  2d50				  -	      .byte	%01111100	; PLOK
   2195  2d50				  -	      .byte	%00011100	; PLOK
   2196  2d50				  -	      .byte	%00000000	; PLOK
   2197  2d50				  -
   2198  2d50				  -			;byte %00000000 ; PLOK
   2199  2d50				  -
   2200  2d50				  -	      .byte	%00000000	; PLOK
   2201  2d50				  -	      .byte	%00111100	; PLOK
   2202  2d50				  -	      .byte	%01000110	; PLOK
   2203  2d50				  -	      .byte	%01101100	; PLOK
   2204  2d50				  -	      .byte	%01110000	; PLOK
   2205  2d50				  -	      .byte	%00111000	; PLOK
   2206  2d50				  -	      .byte	%00010000	; PLOK
   2207  2d50				  -	      .byte	%00000000	; PLOK
   2208  2d50				  -
   2209  2d50				  -			;byte %00000000 ; PLOK
   2210  2d50				  -
   2211  2d50				  -	      .byte	%00000000	; PLOK
   2212  2d50				  -	      .byte	%00111100	; PLOK
   2213  2d50				  -	      .byte	%00011100	; PLOK
   2214  2d50				  -	      .byte	%00001100	; PLOK
   2215  2d50				  -	      .byte	%00000110	; PLOK
   2216  2d50				  -	      .byte	%01111110	; PLOK
   2217  2d50				  -	      .byte	%00110000	; PLOK
   2218  2d50				  -	      .byte	%00000000	; PLOK
   2219  2d50				  -
   2220  2d50				  -			;byte %00000000 ; PLOK
   2221  2d50				  -
   2222  2d50				  -	      .byte	%00000000	; PLOK
   2223  2d50				  -	      .byte	%00111100	; PLOK
   2224  2d50				  -	      .byte	%01001110	; PLOK
   2225  2d50				  -	      .byte	%01101110	; PLOK
   2226  2d50				  -	      .byte	%00111100	; PLOK
   2227  2d50				  -	      .byte	%01100100	; PLOK
   2228  2d50				  -	      .byte	%00111000	; PLOK
   2229  2d50				  -	      .byte	%00000000	; PLOK
   2230  2d50				  -
   2231  2d50				  -			;byte %00000000 ; PLOK
   2232  2d50				  -
   2233  2d50				  -	      .byte	%00000000	; PLOK
   2234  2d50				  -	      .byte	%00011000	; PLOK
   2235  2d50				  -	      .byte	%00001100	; PLOK
   2236  2d50				  -	      .byte	%00011100	; PLOK
   2237  2d50				  -	      .byte	%00100110	; PLOK
   2238  2d50				  -	      .byte	%01001110	; PLOK
   2239  2d50				  -	      .byte	%00111100	; PLOK
   2240  2d50				  -	      .byte	%00000000	; PLOK
   2241  2d50				  -
   2242  2d50				  -	      ifconst	fontcharsHEX
   2243  2d50				  -
   2244  2d50				  -			;byte %00000000 ; PLOK
   2245  2d50				  -
   2246  2d50				  -	      .byte	%00000000	; PLOK
   2247  2d50				  -	      .byte	%01100010	; PLOK
   2248  2d50				  -	      .byte	%01100110	; PLOK
   2249  2d50				  -	      .byte	%01111110	; PLOK
   2250  2d50				  -	      .byte	%00101100	; PLOK
   2251  2d50				  -	      .byte	%00101000	; PLOK
   2252  2d50				  -	      .byte	%00110000	; PLOK
   2253  2d50				  -	      .byte	%00000000	; PLOK
   2254  2d50				  -
   2255  2d50				  -			;byte %00000000 ; PLOK
   2256  2d50				  -
   2257  2d50				  -	      .byte	%00000000	; PLOK
   2258  2d50				  -	      .byte	%01111100	; PLOK
   2259  2d50				  -	      .byte	%00110010	; PLOK
   2260  2d50				  -	      .byte	%00110110	; PLOK
   2261  2d50				  -	      .byte	%00111100	; PLOK
   2262  2d50				  -	      .byte	%00110110	; PLOK
   2263  2d50				  -	      .byte	%01111100	; PLOK
   2264  2d50				  -	      .byte	%00000000	; PLOK
   2265  2d50				  -
   2266  2d50				  -			;byte %00000000 ; PLOK
   2267  2d50				  -
   2268  2d50				  -	      .byte	%00000000	; PLOK
   2269  2d50				  -	      .byte	%00111100	; PLOK
   2270  2d50				  -	      .byte	%01100110	; PLOK
   2271  2d50				  -	      .byte	%01100000	; PLOK
   2272  2d50				  -	      .byte	%01100100	; PLOK
   2273  2d50				  -	      .byte	%00101110	; PLOK
   2274  2d50				  -	      .byte	%00011100	; PLOK
   2275  2d50				  -	      .byte	%00000000	; PLOK
   2276  2d50				  -
   2277  2d50				  -			;byte %00000000 ; PLOK
   2278  2d50				  -
   2279  2d50				  -	      .byte	%00000000	; PLOK
   2280  2d50				  -	      .byte	%01111100	; PLOK
   2281  2d50				  -	      .byte	%00110010	; PLOK
   2282  2d50				  -	      .byte	%00110010	; PLOK
   2283  2d50				  -	      .byte	%00110110	; PLOK
   2284  2d50				  -	      .byte	%01111100	; PLOK
   2285  2d50				  -	      .byte	%01111000	; PLOK
   2286  2d50				  -	      .byte	%00000000	; PLOK
   2287  2d50				  -
   2288  2d50				  -			;byte %00000000 ; PLOK
   2289  2d50				  -
   2290  2d50				  -	      .byte	%00000000	; PLOK
   2291  2d50				  -	      .byte	%01111110	; PLOK
   2292  2d50				  -	      .byte	%00110000	; PLOK
   2293  2d50				  -	      .byte	%00111000	; PLOK
   2294  2d50				  -	      .byte	%00111100	; PLOK
   2295  2d50				  -	      .byte	%00110000	; PLOK
   2296  2d50				  -	      .byte	%01111110	; PLOK
   2297  2d50				  -	      .byte	%00000000	; PLOK
   2298  2d50				  -
   2299  2d50				  -			;byte %00000000 ; PLOK
   2300  2d50				  -
   2301  2d50				  -	      .byte	%00000000	; PLOK
   2302  2d50				  -	      .byte	%01100000	; PLOK
   2303  2d50				  -	      .byte	%01100000	; PLOK
   2304  2d50				  -	      .byte	%00111000	; PLOK
   2305  2d50				  -	      .byte	%00100000	; PLOK
   2306  2d50				  -	      .byte	%01111110	; PLOK
   2307  2d50				  -	      .byte	%00011100	; PLOK
   2308  2d50				  -	      .byte	%00000000	; PLOK
   2309  2d50				  -
   2310  2d50				  -			;byte %00000000 ; PLOK
   2311  2d50				  -			;byte %00000000 ; PLOK
   2312  2d50				  -			;byte %00000000 ; PLOK
   2313  2d50				  -			;byte %00000000 ; PLOK
   2314  2d50				  -
   2315  2d50				  -
   2316  2d50				  -	      endif		; fontcharsHEX
   2317  2d50					      endif		; PLOK
   2318  2d50
   2319  2d50							; ### any characters that aren't font specific follow... 
   2320  2d50
   2321  2d50				  -	      ifconst	fontcharSPACE
   2322  2d50				  -			;byte %00000000 ; SYMBOLS
   2323  2d50				  -
   2324  2d50				  -	      .byte	%00000000	; SYMBOLS
   2325  2d50				  -	      .byte	%00000000	; SYMBOLS
   2326  2d50				  -	      .byte	%00000000	; SYMBOLS
   2327  2d50				  -	      .byte	%00000000	; SYMBOLS
   2328  2d50				  -	      .byte	%00000000	; SYMBOLS
   2329  2d50				  -	      .byte	%00000000	; SYMBOLS
   2330  2d50				  -	      .byte	%00000000	; SYMBOLS
   2331  2d50				  -	      .byte	%00000000	; SYMBOLS
   2332  2d50				  -
   2333  2d50				  -			;byte %00000000 ; SYMBOLS
   2334  2d50					      endif		; fontcharSPACE
   2335  2d50
   2336  2d50				  -	      ifconst	fontcharDOLLAR
   2337  2d50				  -			;byte %00000000 ; SYMBOLS
   2338  2d50				  -
   2339  2d50				  -	      .byte	%00000000	; SYMBOLS
   2340  2d50				  -	      .byte	%00010000	; SYMBOLS
   2341  2d50				  -	      .byte	%01111100	; SYMBOLS
   2342  2d50				  -	      .byte	%00010010	; SYMBOLS
   2343  2d50				  -	      .byte	%01111100	; SYMBOLS
   2344  2d50				  -	      .byte	%10010000	; SYMBOLS
   2345  2d50				  -	      .byte	%01111100	; SYMBOLS
   2346  2d50				  -	      .byte	%00010000	; SYMBOLS
   2347  2d50				  -
   2348  2d50				  -			;byte %00000000 ; SYMBOLS
   2349  2d50				  -
   2350  2d50					      endif		; fontcharDOLLAR
   2351  2d50
   2352  2d50				  -	      ifconst	fontcharPOUND
   2353  2d50				  -			;byte %00000000 ; SYMBOLS
   2354  2d50				  -
   2355  2d50				  -	      .byte	%01111110	; SYMBOLS
   2356  2d50				  -	      .byte	%01000000	; SYMBOLS
   2357  2d50				  -	      .byte	%00100000	; SYMBOLS
   2358  2d50				  -	      .byte	%00100000	; SYMBOLS
   2359  2d50				  -	      .byte	%01111000	; SYMBOLS
   2360  2d50				  -	      .byte	%00100000	; SYMBOLS
   2361  2d50				  -	      .byte	%00100010	; SYMBOLS
   2362  2d50				  -	      .byte	%00011100	; SYMBOLS
   2363  2d50				  -
   2364  2d50				  -			;byte %00000000 ; SYMBOLS
   2365  2d50				  -
   2366  2d50					      endif		; fontcharPOUND
   2367  2d50
   2368  2d50
   2369  2d50				  -	      ifconst	fontcharMRHAPPY
   2370  2d50				  -			;byte %00000000 ; SYMBOLS
   2371  2d50				  -
   2372  2d50				  -	      .byte	%00111100	; SYMBOLS
   2373  2d50				  -	      .byte	%01100110	; SYMBOLS
   2374  2d50				  -	      .byte	%01011010	; SYMBOLS
   2375  2d50				  -	      .byte	%01111110	; SYMBOLS
   2376  2d50				  -	      .byte	%01111110	; SYMBOLS
   2377  2d50				  -	      .byte	%01011010	; SYMBOLS
   2378  2d50				  -	      .byte	%01111110	; SYMBOLS
   2379  2d50				  -	      .byte	%00111100	; SYMBOLS
   2380  2d50				  -
   2381  2d50				  -			;byte %00000000 ; SYMBOLS
   2382  2d50				  -
   2383  2d50					      endif		; fontcharMRHAPPY
   2384  2d50
   2385  2d50				  -	      ifconst	fontcharMRSAD
   2386  2d50				  -			;byte %00000000 ; SYMBOLS
   2387  2d50				  -
   2388  2d50				  -	      .byte	%00111100	; SYMBOLS
   2389  2d50				  -	      .byte	%01011010	; SYMBOLS
   2390  2d50				  -	      .byte	%01100110	; SYMBOLS
   2391  2d50				  -	      .byte	%01111110	; SYMBOLS
   2392  2d50				  -	      .byte	%01111110	; SYMBOLS
   2393  2d50				  -	      .byte	%01011010	; SYMBOLS
   2394  2d50				  -	      .byte	%01111110	; SYMBOLS
   2395  2d50				  -	      .byte	%00111100	; SYMBOLS
   2396  2d50				  -
   2397  2d50				  -			;byte %00000000 ; SYMBOLS
   2398  2d50				  -
   2399  2d50					      endif		; fontcharMRSAD
   2400  2d50
   2401  2d50
   2402  2d50				  -	      ifconst	fontcharCOPYRIGHT
   2403  2d50				  -			;byte %00000000 ; SYMBOLS
   2404  2d50				  -
   2405  2d50				  -	      .byte	%00000000	; SYMBOLS
   2406  2d50				  -	      .byte	%00111000	; SYMBOLS
   2407  2d50				  -	      .byte	%01000100	; SYMBOLS
   2408  2d50				  -	      .byte	%10111010	; SYMBOLS
   2409  2d50				  -	      .byte	%10100010	; SYMBOLS
   2410  2d50				  -	      .byte	%10111010	; SYMBOLS
   2411  2d50				  -	      .byte	%01000100	; SYMBOLS
   2412  2d50				  -	      .byte	%00111000	; SYMBOLS
   2413  2d50				  -
   2414  2d50				  -			;byte %00000000 ; SYMBOLS
   2415  2d50				  -
   2416  2d50					      endif		; fontcharCOPYRIGHT
   2417  2d50
   2418  2d50
   2419  2d50				  -	      ifconst	fontcharFUJI
   2420  2d50				  -
   2421  2d50				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   2422  2d50				  -
   2423  2d50				  -	      .byte	%01110000	; SYMBOLS
   2424  2d50				  -	      .byte	%01111001	; SYMBOLS
   2425  2d50				  -	      .byte	%00011101	; SYMBOLS
   2426  2d50				  -	      .byte	%00001101	; SYMBOLS
   2427  2d50				  -	      .byte	%00001101	; SYMBOLS
   2428  2d50				  -	      .byte	%00001101	; SYMBOLS
   2429  2d50				  -	      .byte	%00001101	; SYMBOLS
   2430  2d50				  -	      .byte	%00000000	; SYMBOLS
   2431  2d50				  -
   2432  2d50				  -			;byte %00000000 ; SYMBOLS
   2433  2d50				  -
   2434  2d50				  -	      .byte	%00001110	; SYMBOLS
   2435  2d50				  -	      .byte	%10011110	; SYMBOLS
   2436  2d50				  -	      .byte	%10111000	; SYMBOLS
   2437  2d50				  -	      .byte	%10110000	; SYMBOLS
   2438  2d50				  -	      .byte	%10110000	; SYMBOLS
   2439  2d50				  -	      .byte	%10110000	; SYMBOLS
   2440  2d50				  -	      .byte	%10110000	; SYMBOLS
   2441  2d50				  -	      .byte	%00000000	; SYMBOLS
   2442  2d50				  -
   2443  2d50				  -			;byte %00000000 ; SYMBOLS
   2444  2d50				  -
   2445  2d50					      endif		; fontcharFUJI
   2446  2d50
   2447  2d50
   2448  2d50				  -	      ifconst	fontcharHEART
   2449  2d50				  -			;byte %00000000 ; SYMBOLS
   2450  2d50				  -
   2451  2d50				  -	      .byte	%00010000	; SYMBOLS
   2452  2d50				  -	      .byte	%00111000	; SYMBOLS
   2453  2d50				  -	      .byte	%01111100	; SYMBOLS
   2454  2d50				  -	      .byte	%01111100	; SYMBOLS
   2455  2d50				  -	      .byte	%11111110	; SYMBOLS
   2456  2d50				  -	      .byte	%11111110	; SYMBOLS
   2457  2d50				  -	      .byte	%11101110	; SYMBOLS
   2458  2d50				  -	      .byte	%01000100	; SYMBOLS
   2459  2d50				  -
   2460  2d50				  -			;byte %00000000 ; SYMBOLS
   2461  2d50				  -
   2462  2d50					      endif		; fontcharHEART
   2463  2d50
   2464  2d50				  -	      ifconst	fontcharDIAMOND
   2465  2d50				  -			;byte %00000000 ; SYMBOLS
   2466  2d50				  -
   2467  2d50				  -	      .byte	%00010000	; SYMBOLS
   2468  2d50				  -	      .byte	%00111000	; SYMBOLS
   2469  2d50				  -	      .byte	%01111100	; SYMBOLS
   2470  2d50				  -	      .byte	%11111110	; SYMBOLS
   2471  2d50				  -	      .byte	%11111110	; SYMBOLS
   2472  2d50				  -	      .byte	%01111100	; SYMBOLS
   2473  2d50				  -	      .byte	%00111000	; SYMBOLS
   2474  2d50				  -	      .byte	%00010000	; SYMBOLS
   2475  2d50				  -
   2476  2d50				  -			;byte %00000000 ; SYMBOLS
   2477  2d50				  -
   2478  2d50					      endif		; fontcharDIAMOND
   2479  2d50
   2480  2d50				  -	      ifconst	fontcharSPADE
   2481  2d50				  -			;byte %00000000 ; SYMBOLS
   2482  2d50				  -
   2483  2d50				  -	      .byte	%00111000	; SYMBOLS
   2484  2d50				  -	      .byte	%00010000	; SYMBOLS
   2485  2d50				  -	      .byte	%01010100	; SYMBOLS
   2486  2d50				  -	      .byte	%11111110	; SYMBOLS
   2487  2d50				  -	      .byte	%11111110	; SYMBOLS
   2488  2d50				  -	      .byte	%01111100	; SYMBOLS
   2489  2d50				  -	      .byte	%00111000	; SYMBOLS
   2490  2d50				  -	      .byte	%00010000	; SYMBOLS
   2491  2d50				  -
   2492  2d50				  -			;byte %00000000 ; SYMBOLS
   2493  2d50				  -
   2494  2d50					      endif		; fontcharSPADE
   2495  2d50
   2496  2d50				  -	      ifconst	fontcharCLUB
   2497  2d50				  -			;byte %00000000 ; SYMBOLS
   2498  2d50				  -
   2499  2d50				  -	      .byte	%00111000	; SYMBOLS
   2500  2d50				  -	      .byte	%00010000	; SYMBOLS
   2501  2d50				  -	      .byte	%11010110	; SYMBOLS
   2502  2d50				  -	      .byte	%11111110	; SYMBOLS
   2503  2d50				  -	      .byte	%11010110	; SYMBOLS
   2504  2d50				  -	      .byte	%00111000	; SYMBOLS
   2505  2d50				  -	      .byte	%00111000	; SYMBOLS
   2506  2d50				  -	      .byte	%00000000	; SYMBOLS
   2507  2d50				  -
   2508  2d50				  -			;byte %00000000 ; SYMBOLS
   2509  2d50				  -
   2510  2d50					      endif		; fontcharCLUB
   2511  2d50
   2512  2d50
   2513  2d50				  -	      ifconst	fontcharCOLON
   2514  2d50				  -			;byte %00000000 ; SYMBOLS
   2515  2d50				  -
   2516  2d50				  -	      .byte	%00000000	; SYMBOLS
   2517  2d50				  -	      .byte	%00011000	; SYMBOLS
   2518  2d50				  -	      .byte	%00011000	; SYMBOLS
   2519  2d50				  -	      .byte	%00000000	; SYMBOLS
   2520  2d50				  -	      .byte	%00000000	; SYMBOLS
   2521  2d50				  -	      .byte	%00011000	; SYMBOLS
   2522  2d50				  -	      .byte	%00011000	; SYMBOLS
   2523  2d50				  -	      .byte	%00000000	; SYMBOLS
   2524  2d50				  -
   2525  2d50				  -			;byte %00000000 ; SYMBOLS
   2526  2d50				  -
   2527  2d50					      endif		; fontcharCOLON
   2528  2d50
   2529  2d50
   2530  2d50				  -	      ifconst	fontcharBLOCK
   2531  2d50				  -
   2532  2d50				  -			;byte %00000000 ; SYMBOLS
   2533  2d50				  -
   2534  2d50				  -	      .byte	%11111111	; SYMBOLS
   2535  2d50				  -	      .byte	%11111111	; SYMBOLS
   2536  2d50				  -	      .byte	%11111111	; SYMBOLS
   2537  2d50				  -	      .byte	%11111111	; SYMBOLS
   2538  2d50				  -	      .byte	%11111111	; SYMBOLS
   2539  2d50				  -	      .byte	%11111111	; SYMBOLS
   2540  2d50				  -	      .byte	%11111111	; SYMBOLS
   2541  2d50				  -	      .byte	%11111111	; SYMBOLS
   2542  2d50				  -
   2543  2d50				  -			;byte %00000000 ; SYMBOLS
   2544  2d50				  -
   2545  2d50					      endif		; fontcharBLOCK
   2546  2d50
   2547  2d50				  -	      ifconst	fontcharUNDERLINE
   2548  2d50				  -
   2549  2d50				  -			;byte %00000000 ; SYMBOLS
   2550  2d50				  -
   2551  2d50				  -	      .byte	%11111111	; SYMBOLS
   2552  2d50				  -	      .byte	%00000000	; SYMBOLS
   2553  2d50				  -	      .byte	%00000000	; SYMBOLS
   2554  2d50				  -	      .byte	%00000000	; SYMBOLS
   2555  2d50				  -	      .byte	%00000000	; SYMBOLS
   2556  2d50				  -	      .byte	%00000000	; SYMBOLS
   2557  2d50				  -	      .byte	%00000000	; SYMBOLS
   2558  2d50				  -	      .byte	%00000000	; SYMBOLS
   2559  2d50				  -
   2560  2d50				  -			;byte %00000000 ; SYMBOLS
   2561  2d50				  -
   2562  2d50					      endif		; fontcharUNDERLINE
   2563  2d50
   2564  2d50				  -	      ifconst	fontcharARISIDE
   2565  2d50				  -			;byte %00000000 ; SYMBOLS
   2566  2d50				  -
   2567  2d50				  -	      .byte	%00000000	; SYMBOLS
   2568  2d50				  -	      .byte	%00101010	; SYMBOLS
   2569  2d50				  -	      .byte	%00101010	; SYMBOLS
   2570  2d50				  -	      .byte	%00101100	; SYMBOLS
   2571  2d50				  -	      .byte	%01111111	; SYMBOLS
   2572  2d50				  -	      .byte	%00110111	; SYMBOLS
   2573  2d50				  -	      .byte	%00000010	; SYMBOLS
   2574  2d50				  -	      .byte	%00000001	; SYMBOLS
   2575  2d50				  -
   2576  2d50				  -			;byte %00000000 ; SYMBOLS
   2577  2d50				  -
   2578  2d50					      endif		; fontcharARISIDE
   2579  2d50
   2580  2d50				  -	      ifconst	fontcharARIFACE
   2581  2d50				  -			;byte %00000000 ; SYMBOLS
   2582  2d50				  -
   2583  2d50				  -	      .byte	%00001000	; SYMBOLS
   2584  2d50				  -	      .byte	%00011100	; SYMBOLS
   2585  2d50				  -	      .byte	%00111110	; SYMBOLS
   2586  2d50				  -	      .byte	%00101010	; SYMBOLS
   2587  2d50				  -	      .byte	%00011100	; SYMBOLS
   2588  2d50				  -	      .byte	%01010100	; SYMBOLS
   2589  2d50				  -	      .byte	%00100100	; SYMBOLS
   2590  2d50				  -	      .byte	%00000010	; SYMBOLS
   2591  2d50				  -
   2592  2d50				  -			;byte %00000000 ; SYMBOLS
   2593  2d50				  -
   2594  2d50				  -
   2595  2d50					      endif		; fontcharARIRACE
   2596  2d50
------- FILE titlescreen/asm/titlescreen.asm
    170  2d50					      endif
    171  2d50
    172  2d50				  -	      ifconst	mk_gameselect_on
    173  2d50				  -	      include	"titlescreen/gameselect_image.asm"
    174  2d50					      endif
    175  2d50
------- FILE E:\Dev\test\default.bas.asm
   4039  2d50
   4040  2d50				   .
   4041  2d50							; 
   4042  2d50
   4043  2d50				   .
   4044  2d50							; 
   4045  2d50
   4046  2d50				   .L0257		;  inline 6lives_statusbar.asm
------- FILE 6lives_statusbar.asm LEVEL 2 PASS 3
      0  2d50					      include	6lives_statusbar.asm
      1  2d50				   minikernel		; display up to 6 lives on screen
      2  2d50		       85 02		      sta	WSYNC
      3  2d52		       a2 20		      ldx	#$20
      4  2d54		       86 21		      stx	HMP1
      5  2d56		       86 25		      stx	VDELP0
      6  2d58		       a5 c2		      lda	lives
      7  2d5a		       4a		      lsr
      8  2d5b		       4a		      lsr
      9  2d5c		       4a		      lsr
     10  2d5d		       4a		      lsr
     11  2d5e		       4a		      lsr
     12  2d5f		       85 10		      sta	RESP0
     13  2d61		       85 11		      sta	RESP1
     14  2d63		       86 26		      stx	VDELP1
     15  2d65		       aa		      tax
     16  2d66		       bd 01 fe 	      lda	lifenusiz0table,x
     17  2d69		       85 04		      sta	NUSIZ0
     18  2d6b		       bd 00 fe 	      lda	lifenusiz1table,x
     19  2d6e		       85 05		      sta	NUSIZ1
     20  2d70		       a5 c0		      lda	lifecolor
     21  2d72		       85 06		      sta	COLUP0
     22  2d74		       85 07		      sta	COLUP1
     23  2d76		       a9 10		      lda	#$10
     24  2d78		       85 20		      sta	HMP0
     25  2d7a
     26  2d7a		       a5 bf		      lda	statusbarlength
     27  2d7c		       4a		      lsr
     28  2d7d		       4a		      lsr
     29  2d7e		       4a		      lsr		; 0-31
     30  2d7f							; 3 cases: 0-7, 8-15, 16-24
     31  2d7f							; if 0-7, temp1=val, temp2=0, temp3=0
     32  2d7f							; if 8-15, temp1=255, temp2=val (rev), temp3=0
     33  2d7f							; if 16-23, temp1=255, temp2=255, temp3=val
     34  2d7f		       a8		      tay
     35  2d80
     36  2d80		       85 2a		      sta	HMOVE	;cycle 74?
     37  2d82
     38  2d82				  -	      ifconst	statusbarcolor
     39  2d82				  -			; only write COLUPF if color variable exists, otherwise use existing PF color
     40  2d82				  -	      lda	statusbarcolor
     41  2d82				  -	      sta	COLUPF
     42  2d82					      endif
     43  2d82
     44  2d82		       c0 08		      cpy	#8
     45  2d84		       90 17		      bcc	zero_7
     46  2d86		       c0 10		      cpy	#16
     47  2d88		       90 23		      bcc	eight_15
     48  2d8a		       a9 ff		      lda	#255
     49  2d8c		       85 cb		      sta	temp1
     50  2d8e		       85 cc		      sta	temp2
     51  2d90		       b9 f9 fd 	      lda	statustable-16,y
     52  2d93		       85 cd		      sta	temp3
     53  2d95		       b9 09 fe 	      lda	statustable,y
     54  2d98		       85 ce		      sta	temp4
     55  2d9a		       4c bc fd 	      jmp	startlifedisplay
     56  2d9d
     57  2d9d				   zero_7
     58  2d9d		       a9 00		      lda	#0
     59  2d9f		       85 ce		      sta	temp4
     60  2da1		       85 cd		      sta	temp3
     61  2da3		       85 cc		      sta	temp2
     62  2da5		       b9 09 fe 	      lda	statustable,y
     63  2da8		       85 cb		      sta	temp1
     64  2daa		       4c bc fd 	      jmp	startlifedisplay
     65  2dad				   eight_15
     66  2dad		       a9 ff		      lda	#255
     67  2daf		       85 cb		      sta	temp1
     68  2db1		       a9 00		      lda	#0
     69  2db3		       85 ce		      sta	temp4
     70  2db5		       85 cd		      sta	temp3
     71  2db7		       b9 19 fe 	      lda	statustable+16,y
     72  2dba		       85 cc		      sta	temp2
     73  2dbc				   startlifedisplay
     74  2dbc		       a0 07		      ldy	#7
     75  2dbe				   lifeloop
     76  2dbe		       85 02		      sta	WSYNC
     77  2dc0		       86 0d		      stx	PF0
     78  2dc2		       b1 c1		      lda	(lifepointer),y
     79  2dc4		       e0 00		      cpx	#0
     80  2dc6		       d0 01		      bne	onelife
     81  2dc8		       0c		      .byte.b	$0C
     82  2dc9				   onelife
     83  2dc9		       85 1b		      sta	GRP0
     84  2dcb
     85  2dcb		       e0 02		      cpx	#2
     86  2dcd		       b0 01		      bcs	nolives
     87  2dcf		       0c		      .byte.b	$0C
     88  2dd0				   nolives
     89  2dd0		       85 1c		      sta	GRP1
     90  2dd2		       a5 ce		      lda	temp4
     91  2dd4		       85 0d		      sta	PF0
     92  2dd6		       a5 cb		      lda	temp1
     93  2dd8		       85 0f		      sta	PF2
     94  2dda		       a5 cd		      lda	temp3
     95  2ddc		       85 0e		      sta	PF1
     96  2dde		       a5 cc		      lda	temp2
     97  2de0		       85 0f		      sta	PF2	;cycle 48!
     98  2de2		       68		      pla		; waste 14 cycles in 4 bytes
     99  2de3		       48		      pha		;
    100  2de4		       68		      pla		;
    101  2de5		       48		      pha		; Shouldn't hurt anything!
    102  2de6		       a9 00		      lda	#0
    103  2de8		       88		      dey
    104  2de9		       85 0e		      sta	PF1
    105  2deb		       10 d1		      bpl	lifeloop
    106  2ded		       85 02		      sta	WSYNC
    107  2def		       c8		      iny
    108  2df0		       84 0d		      sty	PF0
    109  2df2		       84 0f		      sty	PF2
    110  2df4		       84 0e		      sty	PF1
    111  2df6		       84 1b		      sty	GRP0
    112  2df8		       84 1c		      sty	GRP1
    113  2dfa		       60		      rts
    114  2dfb
    115  2dfb					      if	(<*) > $F5
    116  2e00		       00 00 00 00*	      align	256
    117  2e00					      endif
    118  2e00				   lifenusiz1table
    119  2e00		       00		      .byte.b	0
    120  2e01				   lifenusiz0table
    121  2e01		       00 00 00 01*	      .byte.b	0,0,0,1,1,3,3,3
    122  2e09
    123  2e09				   statustable		; warning: page-wrapping might cause issues
    124  2e09							;0-7 and 16+
    125  2e09		       00		      .byte.b	%00000000
    126  2e0a		       01		      .byte.b	%00000001
    127  2e0b		       03		      .byte.b	%00000011
    128  2e0c		       07		      .byte.b	%00000111
    129  2e0d		       0f		      .byte.b	%00001111
    130  2e0e		       1f		      .byte.b	%00011111
    131  2e0f		       3f		      .byte.b	%00111111
    132  2e10		       7f		      .byte.b	%01111111
    133  2e11		       ff		      .byte.b	255
    134  2e12		       ff		      .byte.b	255
    135  2e13		       ff		      .byte.b	255
    136  2e14		       ff		      .byte.b	255
    137  2e15		       ff		      .byte.b	255
    138  2e16		       ff		      .byte.b	255
    139  2e17		       ff		      .byte.b	255
    140  2e18		       ff		      .byte.b	255
    141  2e19							; 8-15
    142  2e19		       00		      .byte.b	0
    143  2e1a		       00		      .byte.b	0
    144  2e1b		       00		      .byte.b	0
    145  2e1c		       00		      .byte.b	0
    146  2e1d		       00		      .byte.b	0
    147  2e1e		       00		      .byte.b	0
    148  2e1f		       00		      .byte.b	0
    149  2e20		       00		      .byte.b	0
    150  2e21		       00		      .byte.b	%00000000
    151  2e22		       80		      .byte.b	%10000000
    152  2e23		       c0		      .byte.b	%11000000
    153  2e24		       e0		      .byte.b	%11100000
    154  2e25		       f0		      .byte.b	%11110000
    155  2e26		       f8		      .byte.b	%11111000
    156  2e27		       fc		      .byte.b	%11111100
    157  2e28		       fe		      .byte.b	%11111110
    158  2e29
------- FILE E:\Dev\test\default.bas.asm
   4048  2e29				  -	      if	(<*) > (<(*+8))
   4049  2e29				  -	      repeat	($100-<*)
   4050  2e29				  -	      .byte	0
   4051  2e29				  -	      repend
   4052  2e29					      endif
   4053  2e29				   lives__L068
   4054  2e29		       00		      .byte.b	%00000000
   4055  2e2a		       66		      .byte.b	%01100110
   4056  2e2b		       7e		      .byte.b	%01111110
   4057  2e2c		       3c		      .byte.b	%00111100
   4058  2e2d		       3c		      .byte.b	%00111100
   4059  2e2e		       24		      .byte.b	%00100100
   4060  2e2f		       00		      .byte.b	%00000000
   4061  2e30		       00		      .byte.b	%00000000
   4062  2e31				  -	      if	(<*) > (<(*+7))
   4063  2e31				  -	      repeat	($100-<*)
   4064  2e31				  -	      .byte	0
   4065  2e31				  -	      repend
   4066  2e31					      endif
   4067  2e31					      if	(<*) < 90
   4068  2e31					      repeat	(90-<*)
   4069  2e31		       00		      .byte.b	0
   4068  2e31					      repend
   4069  2e32		       00		      .byte.b	0
   4068  2e32					      repend
   4069  2e33		       00		      .byte.b	0
   4068  2e33					      repend
   4069  2e34		       00		      .byte.b	0
   4068  2e34					      repend
   4069  2e35		       00		      .byte.b	0
   4068  2e35					      repend
   4069  2e36		       00		      .byte.b	0
   4068  2e36					      repend
   4069  2e37		       00		      .byte.b	0
   4068  2e37					      repend
   4069  2e38		       00		      .byte.b	0
   4068  2e38					      repend
   4069  2e39		       00		      .byte.b	0
   4068  2e39					      repend
   4069  2e3a		       00		      .byte.b	0
   4068  2e3a					      repend
   4069  2e3b		       00		      .byte.b	0
   4068  2e3b					      repend
   4069  2e3c		       00		      .byte.b	0
   4068  2e3c					      repend
   4069  2e3d		       00		      .byte.b	0
   4068  2e3d					      repend
   4069  2e3e		       00		      .byte.b	0
   4068  2e3e					      repend
   4069  2e3f		       00		      .byte.b	0
   4068  2e3f					      repend
   4069  2e40		       00		      .byte.b	0
   4068  2e40					      repend
   4069  2e41		       00		      .byte.b	0
   4068  2e41					      repend
   4069  2e42		       00		      .byte.b	0
   4068  2e42					      repend
   4069  2e43		       00		      .byte.b	0
   4068  2e43					      repend
   4069  2e44		       00		      .byte.b	0
   4068  2e44					      repend
   4069  2e45		       00		      .byte.b	0
   4068  2e45					      repend
   4069  2e46		       00		      .byte.b	0
   4068  2e46					      repend
   4069  2e47		       00		      .byte.b	0
   4068  2e47					      repend
   4069  2e48		       00		      .byte.b	0
   4068  2e48					      repend
   4069  2e49		       00		      .byte.b	0
   4068  2e49					      repend
   4069  2e4a		       00		      .byte.b	0
   4068  2e4a					      repend
   4069  2e4b		       00		      .byte.b	0
   4068  2e4b					      repend
   4069  2e4c		       00		      .byte.b	0
   4068  2e4c					      repend
   4069  2e4d		       00		      .byte.b	0
   4068  2e4d					      repend
   4069  2e4e		       00		      .byte.b	0
   4068  2e4e					      repend
   4069  2e4f		       00		      .byte.b	0
   4068  2e4f					      repend
   4069  2e50		       00		      .byte.b	0
   4068  2e50					      repend
   4069  2e51		       00		      .byte.b	0
   4068  2e51					      repend
   4069  2e52		       00		      .byte.b	0
   4068  2e52					      repend
   4069  2e53		       00		      .byte.b	0
   4068  2e53					      repend
   4069  2e54		       00		      .byte.b	0
   4068  2e54					      repend
   4069  2e55		       00		      .byte.b	0
   4068  2e55					      repend
   4069  2e56		       00		      .byte.b	0
   4068  2e56					      repend
   4069  2e57		       00		      .byte.b	0
   4068  2e57					      repend
   4069  2e58		       00		      .byte.b	0
   4068  2e58					      repend
   4069  2e59		       00		      .byte.b	0
   4070  2e5a					      repend
   4071  2e5a					      endif
   4072  2e5a				   playerL069_1
   4073  2e5a		       18		      .byte.b	%00011000
   4074  2e5b		       f8		      .byte.b	%11111000
   4075  2e5c		       fe		      .byte.b	%11111110
   4076  2e5d		       7e		      .byte.b	%01111110
   4077  2e5e		       7e		      .byte.b	%01111110
   4078  2e5f		       ff		      .byte.b	%11111111
   4079  2e60		       ff		      .byte.b	%11111111
   4080  2e61		       78		      .byte.b	%01111000
   4081  2e62				  -	      if	(<*) > (<(*+7))
   4082  2e62				  -	      repeat	($100-<*)
   4083  2e62				  -	      .byte	0
   4084  2e62				  -	      repend
   4085  2e62					      endif
   4086  2e62				  -	      if	(<*) < 90
   4087  2e62				  -	      repeat	(90-<*)
   4088  2e62				  -	      .byte	0
   4089  2e62				  -	      repend
   4090  2e62					      endif
   4091  2e62				   playerL070_3
   4092  2e62		       18		      .byte.b	%00011000
   4093  2e63		       f8		      .byte.b	%11111000
   4094  2e64		       fe		      .byte.b	%11111110
   4095  2e65		       7e		      .byte.b	%01111110
   4096  2e66		       7e		      .byte.b	%01111110
   4097  2e67		       ff		      .byte.b	%11111111
   4098  2e68		       ff		      .byte.b	%11111111
   4099  2e69		       78		      .byte.b	%01111000
   4100  2e6a				  -	      if	(<*) > (<(*+8))
   4101  2e6a				  -	      repeat	($100-<*)
   4102  2e6a				  -	      .byte	0
   4103  2e6a				  -	      repend
   4104  2e6a					      endif
   4105  2e6a				  -	      if	(<*) < 90
   4106  2e6a				  -	      repeat	(90-<*)
   4107  2e6a				  -	      .byte	0
   4108  2e6a				  -	      repend
   4109  2e6a					      endif
   4110  2e6a				   player36then_0
   4111  2e6a		       00		      .byte.b	0
   4112  2e6b		       00		      .byte.b	%00000000
   4113  2e6c		       66		      .byte.b	%01100110
   4114  2e6d		       7e		      .byte.b	%01111110
   4115  2e6e		       3c		      .byte.b	%00111100
   4116  2e6f		       24		      .byte.b	%00100100
   4117  2e70		       00		      .byte.b	%00000000
   4118  2e71		       00		      .byte.b	%00000000
   4119  2e72		       00		      .byte.b	%00000000
   4120  2e73				  -	      if	(<*) > (<(*+8))
   4121  2e73				  -	      repeat	($100-<*)
   4122  2e73				  -	      .byte	0
   4123  2e73				  -	      repend
   4124  2e73					      endif
   4125  2e73				  -	      if	(<*) < 90
   4126  2e73				  -	      repeat	(90-<*)
   4127  2e73				  -	      .byte	0
   4128  2e73				  -	      repend
   4129  2e73					      endif
   4130  2e73				   player37then_0
   4131  2e73		       00		      .byte.b	0
   4132  2e74		       00		      .byte.b	%00000000
   4133  2e75		       00		      .byte.b	%00000000
   4134  2e76		       24		      .byte.b	%00100100
   4135  2e77		       3c		      .byte.b	%00111100
   4136  2e78		       7e		      .byte.b	%01111110
   4137  2e79		       66		      .byte.b	%01100110
   4138  2e7a		       00		      .byte.b	%00000000
   4139  2e7b		       00		      .byte.b	%00000000
   4140  2e7c				  -	      if	(<*) > (<(*+7))
   4141  2e7c				  -	      repeat	($100-<*)
   4142  2e7c				  -	      .byte	0
   4143  2e7c				  -	      repend
   4144  2e7c					      endif
   4145  2e7c				  -	      if	(<*) < 90
   4146  2e7c				  -	      repeat	(90-<*)
   4147  2e7c				  -	      .byte	0
   4148  2e7c				  -	      repend
   4149  2e7c					      endif
   4150  2e7c				   player38then_2
   4151  2e7c		       c3		      .byte.b	%11000011
   4152  2e7d		       5a		      .byte.b	%01011010
   4153  2e7e		       7e		      .byte.b	%01111110
   4154  2e7f		       24		      .byte.b	%00100100
   4155  2e80		       24		      .byte.b	%00100100
   4156  2e81		       7e		      .byte.b	%01111110
   4157  2e82		       5a		      .byte.b	%01011010
   4158  2e83		       c3		      .byte.b	%11000011
   4159  2e84				  -	      if	(<*) > (<(*+7))
   4160  2e84				  -	      repeat	($100-<*)
   4161  2e84				  -	      .byte	0
   4162  2e84				  -	      repend
   4163  2e84					      endif
   4164  2e84				  -	      if	(<*) < 90
   4165  2e84				  -	      repeat	(90-<*)
   4166  2e84				  -	      .byte	0
   4167  2e84				  -	      repend
   4168  2e84					      endif
   4169  2e84				   player39then_2
   4170  2e84		       66		      .byte.b	%01100110
   4171  2e85		       5a		      .byte.b	%01011010
   4172  2e86		       7e		      .byte.b	%01111110
   4173  2e87		       24		      .byte.b	%00100100
   4174  2e88		       24		      .byte.b	%00100100
   4175  2e89		       7e		      .byte.b	%01111110
   4176  2e8a		       5a		      .byte.b	%01011010
   4177  2e8b		       66		      .byte.b	%01100110
   4178  2e8c				  -	      if	(<*) > (<(*+7))
   4179  2e8c				  -	      repeat	($100-<*)
   4180  2e8c				  -	      .byte	0
   4181  2e8c				  -	      repend
   4182  2e8c					      endif
   4183  2e8c				  -	      if	(<*) < 90
   4184  2e8c				  -	      repeat	(90-<*)
   4185  2e8c				  -	      .byte	0
   4186  2e8c				  -	      repend
   4187  2e8c					      endif
   4188  2e8c				   player40then_2
   4189  2e8c		       78		      .byte.b	%01111000
   4190  2e8d		       ff		      .byte.b	%11111111
   4191  2e8e		       ff		      .byte.b	%11111111
   4192  2e8f		       7e		      .byte.b	%01111110
   4193  2e90		       7e		      .byte.b	%01111110
   4194  2e91		       fe		      .byte.b	%11111110
   4195  2e92		       f8		      .byte.b	%11111000
   4196  2e93		       18		      .byte.b	%00011000
   4197  2e94				  -	      if	(<*) > (<(*+7))
   4198  2e94				  -	      repeat	($100-<*)
   4199  2e94				  -	      .byte	0
   4200  2e94				  -	      repend
   4201  2e94					      endif
   4202  2e94				  -	      if	(<*) < 90
   4203  2e94				  -	      repeat	(90-<*)
   4204  2e94				  -	      .byte	0
   4205  2e94				  -	      repend
   4206  2e94					      endif
   4207  2e94				   player41then_4
   4208  2e94		       81		      .byte.b	%10000001
   4209  2e95		       42		      .byte.b	%01000010
   4210  2e96		       7e		      .byte.b	%01111110
   4211  2e97		       5a		      .byte.b	%01011010
   4212  2e98		       5a		      .byte.b	%01011010
   4213  2e99		       7e		      .byte.b	%01111110
   4214  2e9a		       42		      .byte.b	%01000010
   4215  2e9b		       81		      .byte.b	%10000001
   4216  2e9c				  -	      if	(<*) > (<(*+7))
   4217  2e9c				  -	      repeat	($100-<*)
   4218  2e9c				  -	      .byte	0
   4219  2e9c				  -	      repend
   4220  2e9c					      endif
   4221  2e9c				  -	      if	(<*) < 90
   4222  2e9c				  -	      repeat	(90-<*)
   4223  2e9c				  -	      .byte	0
   4224  2e9c				  -	      repend
   4225  2e9c					      endif
   4226  2e9c				   player42then_4
   4227  2e9c		       42		      .byte.b	%01000010
   4228  2e9d		       42		      .byte.b	%01000010
   4229  2e9e		       7e		      .byte.b	%01111110
   4230  2e9f		       5a		      .byte.b	%01011010
   4231  2ea0		       5a		      .byte.b	%01011010
   4232  2ea1		       7e		      .byte.b	%01111110
   4233  2ea2		       42		      .byte.b	%01000010
   4234  2ea3		       42		      .byte.b	%01000010
   4235  2ea4				  -	      if	(<*) > (<(*+7))
   4236  2ea4				  -	      repeat	($100-<*)
   4237  2ea4				  -	      .byte	0
   4238  2ea4				  -	      repend
   4239  2ea4					      endif
   4240  2ea4				  -	      if	(<*) < 90
   4241  2ea4				  -	      repeat	(90-<*)
   4242  2ea4				  -	      .byte	0
   4243  2ea4				  -	      repend
   4244  2ea4					      endif
   4245  2ea4				   player43then_5
   4246  2ea4		       91		      .byte.b	%10010001
   4247  2ea5		       5a		      .byte.b	%01011010
   4248  2ea6		       24		      .byte.b	%00100100
   4249  2ea7		       db		      .byte.b	%11011011
   4250  2ea8		       5a		      .byte.b	%01011010
   4251  2ea9		       24		      .byte.b	%00100100
   4252  2eaa		       5a		      .byte.b	%01011010
   4253  2eab		       89		      .byte.b	%10001001
   4254  2eac				  -	      if	(<*) > (<(*+7))
   4255  2eac				  -	      repeat	($100-<*)
   4256  2eac				  -	      .byte	0
   4257  2eac				  -	      repend
   4258  2eac					      endif
   4259  2eac				  -	      if	(<*) < 90
   4260  2eac				  -	      repeat	(90-<*)
   4261  2eac				  -	      .byte	0
   4262  2eac				  -	      repend
   4263  2eac					      endif
   4264  2eac				   player44then_5
   4265  2eac		       91		      .byte.b	%10010001
   4266  2ead		       5a		      .byte.b	%01011010
   4267  2eae		       24		      .byte.b	%00100100
   4268  2eaf		       42		      .byte.b	%01000010
   4269  2eb0		       43		      .byte.b	%01000011
   4270  2eb1		       24		      .byte.b	%00100100
   4271  2eb2		       5a		      .byte.b	%01011010
   4272  2eb3		       89		      .byte.b	%10001001
   4273  2eb4				  -	      if	(<*) > (<(*+7))
   4274  2eb4				  -	      repeat	($100-<*)
   4275  2eb4				  -	      .byte	0
   4276  2eb4				  -	      repend
   4277  2eb4					      endif
   4278  2eb4				  -	      if	(<*) < 90
   4279  2eb4				  -	      repeat	(90-<*)
   4280  2eb4				  -	      .byte	0
   4281  2eb4				  -	      repend
   4282  2eb4					      endif
   4283  2eb4				   player45then_5
   4284  2eb4		       91		      .byte.b	%10010001
   4285  2eb5		       5a		      .byte.b	%01011010
   4286  2eb6		       24		      .byte.b	%00100100
   4287  2eb7		       db		      .byte.b	%11011011
   4288  2eb8		       5a		      .byte.b	%01011010
   4289  2eb9		       24		      .byte.b	%00100100
   4290  2eba		       5a		      .byte.b	%01011010
   4291  2ebb		       89		      .byte.b	%10001001
   4292  2ebc				  -	      if	((>(*+11)) > (>*))
   4293  2ebc				  -	      ALIGN	256
   4294  2ebc					      endif
   4295  2ebc				   PF1_data0
   4296  2ebc		       80		      .byte.b	%10000000
   4297  2ebd		       80		      .byte.b	%10000000
   4298  2ebe		       80		      .byte.b	%10000000
   4299  2ebf		       80		      .byte.b	%10000000
   4300  2ec0		       80		      .byte.b	%10000000
   4301  2ec1		       ff		      .byte.b	%11111111
   4302  2ec2		       80		      .byte.b	%10000000
   4303  2ec3		       80		      .byte.b	%10000000
   4304  2ec4		       80		      .byte.b	%10000000
   4305  2ec5		       80		      .byte.b	%10000000
   4306  2ec6		       80		      .byte.b	%10000000
   4307  2ec7				  -	      if	((>(*+11)) > (>*))
   4308  2ec7				  -	      ALIGN	256
   4309  2ec7					      endif
   4310  2ec7				   PF2_data0
   4311  2ec7		       00		      .byte.b	%00000000
   4312  2ec8		       00		      .byte.b	%00000000
   4313  2ec9		       00		      .byte.b	%00000000
   4314  2eca		       00		      .byte.b	%00000000
   4315  2ecb		       00		      .byte.b	%00000000
   4316  2ecc		       ff		      .byte.b	%11111111
   4317  2ecd		       00		      .byte.b	%00000000
   4318  2ece		       00		      .byte.b	%00000000
   4319  2ecf		       00		      .byte.b	%00000000
   4320  2ed0		       00		      .byte.b	%00000000
   4321  2ed1		       00		      .byte.b	%00000000
   4322  2ed2					      if	ECHOFIRST
      162 bytes of ROM space left in bank 2
   4323  2ed2					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 2")
   4324  2ed2					      endif
   4325  2ed2		       00 01	   ECHOFIRST  =	1
   4326  2ed2
   4327  2ed2
   4328  2ed2							; feel free to modify the score graphics - just keep each digit 8 high
   4329  2ed2							; and keep the conditional compilation stuff intact
   4330  2ed2				  -	      ifconst	ROM2k
   4331  2ed2				  -	      ORG	$F7AC-8
   4332  2ed2					      else
   4333  2ed2					      ifconst	bankswitch
   4334  2ed2					      if	bankswitch == 8
   4335  2f74					      ORG	$2F94-bscode_length
   4336  2f74					      RORG	$FF94-bscode_length
   4337  2f74					      endif
   4338  2f74				  -	      if	bankswitch == 16
   4339  2f74				  -	      ORG	$4F94-bscode_length
   4340  2f74				  -	      RORG	$FF94-bscode_length
   4341  2f74					      endif
   4342  2f74				  -	      if	bankswitch == 32
   4343  2f74				  -	      ORG	$8F94-bscode_length
   4344  2f74				  -	      RORG	$FF94-bscode_length
   4345  2f74					      endif
   4346  2f74				  -	      if	bankswitch == 64
   4347  2f74				  -	      ORG	$10F80-bscode_length
   4348  2f74				  -	      RORG	$1FF80-bscode_length
   4349  2f74					      endif
   4350  2f74				  -	      else
   4351  2f74				  -	      ORG	$FF9C
   4352  2f74					      endif
   4353  2f74					      endif
   4354  2f74
   4355  2f74							; font equates
   4356  2f74		       00 01	   .21stcentury =	1
   4357  2f74		       00 02	   alarmclock =	2
   4358  2f74		       00 03	   handwritten =	3
   4359  2f74		       00 04	   interrupted =	4
   4360  2f74		       00 05	   retroputer =	5
   4361  2f74		       00 06	   whimsey    =	6
   4362  2f74		       00 07	   tiny       =	7
   4363  2f74
   4364  2f74				   scoretable
   4365  2f74
   4366  2f74				  -	      ifconst	font
   4367  2f74				  -	      if	font == .21stcentury
   4368  2f74				  -	      include	"score_graphics.asm.21stcentury"
   4369  2f74				  -	      endif
   4370  2f74				  -	      if	font == alarmclock
   4371  2f74				  -	      include	"score_graphics.asm.alarmclock"
   4372  2f74				  -	      endif
   4373  2f74				  -	      if	font == handwritten
   4374  2f74				  -	      include	"score_graphics.asm.handwritten"
   4375  2f74				  -	      endif
   4376  2f74				  -	      if	font == interrupted
   4377  2f74				  -	      include	"score_graphics.asm.interrupted"
   4378  2f74				  -	      endif
   4379  2f74				  -	      if	font == retroputer
   4380  2f74				  -	      include	"score_graphics.asm.retroputer"
   4381  2f74				  -	      endif
   4382  2f74				  -	      if	font == whimsey
   4383  2f74				  -	      include	"score_graphics.asm.whimsey"
   4384  2f74				  -	      endif
   4385  2f74				  -	      if	font == tiny
   4386  2f74				  -	      include	"score_graphics.asm.tiny"
   4387  2f74				  -	      endif
   4388  2f74					      else		; default font
   4389  2f74
   4390  2f74		       3c		      .byte.b	%00111100
   4391  2f75		       66		      .byte.b	%01100110
   4392  2f76		       66		      .byte.b	%01100110
   4393  2f77		       66		      .byte.b	%01100110
   4394  2f78		       66		      .byte.b	%01100110
   4395  2f79		       66		      .byte.b	%01100110
   4396  2f7a		       66		      .byte.b	%01100110
   4397  2f7b		       3c		      .byte.b	%00111100
   4398  2f7c
   4399  2f7c		       7e		      .byte.b	%01111110
   4400  2f7d		       18		      .byte.b	%00011000
   4401  2f7e		       18		      .byte.b	%00011000
   4402  2f7f		       18		      .byte.b	%00011000
   4403  2f80		       18		      .byte.b	%00011000
   4404  2f81		       38		      .byte.b	%00111000
   4405  2f82		       18		      .byte.b	%00011000
   4406  2f83		       08		      .byte.b	%00001000
   4407  2f84
   4408  2f84		       7e		      .byte.b	%01111110
   4409  2f85		       60		      .byte.b	%01100000
   4410  2f86		       60		      .byte.b	%01100000
   4411  2f87		       3c		      .byte.b	%00111100
   4412  2f88		       06		      .byte.b	%00000110
   4413  2f89		       06		      .byte.b	%00000110
   4414  2f8a		       46		      .byte.b	%01000110
   4415  2f8b		       3c		      .byte.b	%00111100
   4416  2f8c
   4417  2f8c		       3c		      .byte.b	%00111100
   4418  2f8d		       46		      .byte.b	%01000110
   4419  2f8e		       06		      .byte.b	%00000110
   4420  2f8f		       06		      .byte.b	%00000110
   4421  2f90		       1c		      .byte.b	%00011100
   4422  2f91		       06		      .byte.b	%00000110
   4423  2f92		       46		      .byte.b	%01000110
   4424  2f93		       3c		      .byte.b	%00111100
   4425  2f94
   4426  2f94		       0c		      .byte.b	%00001100
   4427  2f95		       0c		      .byte.b	%00001100
   4428  2f96		       7e		      .byte.b	%01111110
   4429  2f97		       4c		      .byte.b	%01001100
   4430  2f98		       4c		      .byte.b	%01001100
   4431  2f99		       2c		      .byte.b	%00101100
   4432  2f9a		       1c		      .byte.b	%00011100
   4433  2f9b		       0c		      .byte.b	%00001100
   4434  2f9c
   4435  2f9c		       3c		      .byte.b	%00111100
   4436  2f9d		       46		      .byte.b	%01000110
   4437  2f9e		       06		      .byte.b	%00000110
   4438  2f9f		       06		      .byte.b	%00000110
   4439  2fa0		       3c		      .byte.b	%00111100
   4440  2fa1		       60		      .byte.b	%01100000
   4441  2fa2		       60		      .byte.b	%01100000
   4442  2fa3		       7e		      .byte.b	%01111110
   4443  2fa4
   4444  2fa4		       3c		      .byte.b	%00111100
   4445  2fa5		       66		      .byte.b	%01100110
   4446  2fa6		       66		      .byte.b	%01100110
   4447  2fa7		       66		      .byte.b	%01100110
   4448  2fa8		       7c		      .byte.b	%01111100
   4449  2fa9		       60		      .byte.b	%01100000
   4450  2faa		       62		      .byte.b	%01100010
   4451  2fab		       3c		      .byte.b	%00111100
   4452  2fac
   4453  2fac		       30		      .byte.b	%00110000
   4454  2fad		       30		      .byte.b	%00110000
   4455  2fae		       30		      .byte.b	%00110000
   4456  2faf		       18		      .byte.b	%00011000
   4457  2fb0		       0c		      .byte.b	%00001100
   4458  2fb1		       06		      .byte.b	%00000110
   4459  2fb2		       42		      .byte.b	%01000010
   4460  2fb3		       3e		      .byte.b	%00111110
   4461  2fb4
   4462  2fb4		       3c		      .byte.b	%00111100
   4463  2fb5		       66		      .byte.b	%01100110
   4464  2fb6		       66		      .byte.b	%01100110
   4465  2fb7		       66		      .byte.b	%01100110
   4466  2fb8		       3c		      .byte.b	%00111100
   4467  2fb9		       66		      .byte.b	%01100110
   4468  2fba		       66		      .byte.b	%01100110
   4469  2fbb		       3c		      .byte.b	%00111100
   4470  2fbc
   4471  2fbc		       3c		      .byte.b	%00111100
   4472  2fbd		       46		      .byte.b	%01000110
   4473  2fbe		       06		      .byte.b	%00000110
   4474  2fbf		       3e		      .byte.b	%00111110
   4475  2fc0		       66		      .byte.b	%01100110
   4476  2fc1		       66		      .byte.b	%01100110
   4477  2fc2		       66		      .byte.b	%01100110
   4478  2fc3		       3c		      .byte.b	%00111100
   4479  2fc4
   4480  2fc4					      ifnconst	DPC_kernel_options
   4481  2fc4
   4482  2fc4		       00		      .byte.b	%00000000
   4483  2fc5		       00		      .byte.b	%00000000
   4484  2fc6		       00		      .byte.b	%00000000
   4485  2fc7		       00		      .byte.b	%00000000
   4486  2fc8		       00		      .byte.b	%00000000
   4487  2fc9		       00		      .byte.b	%00000000
   4488  2fca		       00		      .byte.b	%00000000
   4489  2fcb		       00		      .byte.b	%00000000
   4490  2fcc
   4491  2fcc					      endif
   4492  2fcc
   4493  2fcc					      endif
   4494  2fcc
   4495  2fcc				  -	      ifconst	ROM2k
   4496  2fcc				  -	      ORG	$F7FC
   4497  2fcc					      else
   4498  2fcc					      ifconst	bankswitch
   4499  2fcc					      if	bankswitch == 8
   4500  2fd4					      ORG	$2FF4-bscode_length
   4501  2fd4					      RORG	$FFF4-bscode_length
   4502  2fd4					      endif
   4503  2fd4				  -	      if	bankswitch == 16
   4504  2fd4				  -	      ORG	$4FF4-bscode_length
   4505  2fd4				  -	      RORG	$FFF4-bscode_length
   4506  2fd4					      endif
   4507  2fd4				  -	      if	bankswitch == 32
   4508  2fd4				  -	      ORG	$8FF4-bscode_length
   4509  2fd4				  -	      RORG	$FFF4-bscode_length
   4510  2fd4					      endif
   4511  2fd4				  -	      if	bankswitch == 64
   4512  2fd4				  -	      ORG	$10FE0-bscode_length
   4513  2fd4				  -	      RORG	$1FFE0-bscode_length
   4514  2fd4					      endif
   4515  2fd4				  -	      else
   4516  2fd4				  -	      ORG	$FFFC
   4517  2fd4					      endif
   4518  2fd4					      endif
   4519  2fd4							; every bank has this stuff at the same place
   4520  2fd4							; this code can switch to/from any bank at any entry point
   4521  2fd4							; and can preserve register values
   4522  2fd4							; note: lines not starting with a space are not placed in all banks
   4523  2fd4							;
   4524  2fd4							; line below tells the compiler how long this is - do not remove
   4525  2fd4							;size=32
   4526  2fd4
   4527  2fd4				   begin_bscode
   4528  2fd4		       a2 ff		      ldx	#$ff
   4529  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
   4530  2fd6				  -	      stx	FASTFETCH
   4531  2fd6					      endif
   4532  2fd6		       9a		      txs
   4533  2fd7				  -	      if	bankswitch == 64
   4534  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   4535  2fd7					      else
   4536  2fd7		       a9 f3		      lda	#>(start-1)
   4537  2fd9					      endif
   4538  2fd9		       48		      pha
   4539  2fda		       a9 f7		      lda	#<(start-1)
   4540  2fdc		       48		      pha
   4541  2fdd
   4542  2fdd				   BS_return
   4543  2fdd		       48		      pha
   4544  2fde		       8a		      txa
   4545  2fdf		       48		      pha
   4546  2fe0		       ba		      tsx
   4547  2fe1
   4548  2fe1					      if	bankswitch != 64
   4549  2fe1		       b5 04		      lda	4,x	; get high byte of return address
   4550  2fe3
   4551  2fe3		       2a		      rol
   4552  2fe4		       2a		      rol
   4553  2fe5		       2a		      rol
   4554  2fe6		       2a		      rol
   4555  2fe7		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   4556  2fe9		       aa		      tax
   4557  2fea		       e8		      inx
   4558  2feb				  -	      else
   4559  2feb				  -	      lda	4,x	; get high byte of return address
   4560  2feb				  -	      tay
   4561  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   4562  2feb				  -	      sta	4,x
   4563  2feb				  -	      tya
   4564  2feb				  -	      lsr
   4565  2feb				  -	      lsr
   4566  2feb				  -	      lsr
   4567  2feb				  -	      lsr
   4568  2feb				  -	      tax
   4569  2feb				  -	      inx
   4570  2feb					      endif
   4571  2feb
   4572  2feb				   BS_jsr
   4573  2feb		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   4574  2fee		       68		      pla
   4575  2fef		       aa		      tax
   4576  2ff0		       68		      pla
   4577  2ff1		       60		      rts
   4578  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   4579  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   4580  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   4581  2ff2					      endif
   4582  2ff2					      ifconst	bankswitch
   4583  2ff2					      if	bankswitch == 8
   4584  2ffc					      ORG	$2FFC
   4585  2ffc					      RORG	$FFFC
   4586  2ffc					      endif
   4587  2ffc				  -	      if	bankswitch == 16
   4588  2ffc				  -	      ORG	$4FFC
   4589  2ffc				  -	      RORG	$FFFC
   4590  2ffc					      endif
   4591  2ffc				  -	      if	bankswitch == 32
   4592  2ffc				  -	      ORG	$8FFC
   4593  2ffc				  -	      RORG	$FFFC
   4594  2ffc					      endif
   4595  2ffc				  -	      if	bankswitch == 64
   4596  2ffc				  -	      ORG	$10FF0
   4597  2ffc				  -	      RORG	$1FFF0
   4598  2ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   4599  2ffc				  -	      ORG	$10FF8
   4600  2ffc				  -	      RORG	$1FFF8
   4601  2ffc				  -	      ifconst	superchip
   4602  2ffc				  -	      .byte	"E","F","S","C"
   4603  2ffc				  -	      else
   4604  2ffc				  -	      .byte	"E","F","E","F"
   4605  2ffc				  -	      endif
   4606  2ffc				  -	      ORG	$10FFC
   4607  2ffc				  -	      RORG	$1FFFC
   4608  2ffc					      endif
   4609  2ffc				  -	      else
   4610  2ffc				  -	      ifconst	ROM2k
   4611  2ffc				  -	      ORG	$F7FC
   4612  2ffc				  -	      else
   4613  2ffc				  -	      ORG	$FFFC
   4614  2ffc				  -	      endif
   4615  2ffc					      endif
   4616  2ffc		       f8 f3		      .word.w	start
   4617  2ffe		       f8 f3		      .word.w	start
